/* The following code was generated by JFlex 1.6.1 */

package php.scanner;

import static php.scanner.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Maynor/Documents/Netbeans/PHP-Scanner/src/php/scanner/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\122\1\101\1\103\1\103\1\102\22\0\1\122\1\66\1\107"+
    "\1\117\1\110\1\62\1\70\1\105\1\72\1\72\1\60\1\56\1\77"+
    "\1\57\1\100\1\61\1\32\1\34\6\33\2\31\1\0\1\76\1\63"+
    "\1\65\1\64\1\121\1\0\1\51\1\112\1\46\1\43\1\41\1\42"+
    "\1\111\1\54\1\37\1\12\1\114\1\36\1\53\1\40\1\50\1\55"+
    "\1\115\1\44\1\52\1\47\1\45\1\113\1\116\1\30\1\12\1\12"+
    "\1\74\1\106\1\75\1\0\1\35\1\0\1\1\1\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\67"+
    "\1\120\1\12\1\73\1\71\1\73\1\0\6\12\1\104\172\12\u1f28\0"+
    "\1\103\1\103\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\23\2\2\3\11\2\5\4\2\5\1\6"+
    "\1\7\1\2\2\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\3\1\1\20\1\2\1\1\3\2"+
    "\1\21\10\2\1\22\24\2\1\7\13\2\4\0\1\23"+
    "\1\3\1\2\1\24\1\6\1\0\1\5\1\0\1\7"+
    "\1\23\1\0\1\25\3\0\10\26\1\2\1\27\26\2"+
    "\1\22\24\2\2\23\1\0\2\3\10\2\2\0\2\25"+
    "\15\26\12\2\1\22\25\2\1\30\4\23\11\2\1\20"+
    "\1\0\15\26\13\2\1\21\16\2\2\23\10\2\1\31"+
    "\12\26\3\2\1\21\20\2\12\26\3\2\1\22\4\2"+
    "\1\21\3\2\1\32\1\2\7\26\1\33\6\2\5\26"+
    "\4\2\4\26\1\2\4\26\1\2\2\26\1\0\1\26"+
    "\1\2\2\26\2\0\1\26\1\2\1\26\3\0\2\26"+
    "\1\34\2\0\2\26\2\34\11\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775"+
    "\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d"+
    "\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\123\0\u0bac\0\u0bff\0\u0bff"+
    "\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\123\0\123\0\123\0\123"+
    "\0\123\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d"+
    "\0\u0f90\0\u0fe3\0\u1036\0\u1089\0\u10dc\0\u02eb\0\u112f\0\u1182"+
    "\0\u11d5\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374\0\u02eb\0\u13c7"+
    "\0\u141a\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9\0\u160c\0\u165f"+
    "\0\u16b2\0\u1705\0\u1758\0\u17ab\0\u17fe\0\u1851\0\u18a4\0\u18f7"+
    "\0\u194a\0\u199d\0\u19f0\0\u02eb\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c"+
    "\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81\0\u1dd4"+
    "\0\u0d4b\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\123\0\123"+
    "\0\u1fc6\0\123\0\u2019\0\123\0\u206c\0\u0e44\0\123\0\u20bf"+
    "\0\u0e97\0\u2112\0\u2165\0\u21b8\0\u220b\0\u225e\0\u22b1\0\u2304"+
    "\0\u2357\0\u23aa\0\u23fd\0\123\0\u2450\0\u24a3\0\u24f6\0\u2549"+
    "\0\u259c\0\u25ef\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e\0\u27e1"+
    "\0\u2834\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79"+
    "\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11"+
    "\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9"+
    "\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u31ee\0\u3241"+
    "\0\u3294\0\u32e7\0\u1e27\0\u1e7a\0\u333a\0\u338d\0\u33e0\0\u3433"+
    "\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625\0\u0e44\0\u0e97"+
    "\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd"+
    "\0\u3910\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55"+
    "\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\u2980"+
    "\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032"+
    "\0\u4085\0\u40d8\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277\0\u42ca"+
    "\0\u431d\0\u4370\0\u43c3\0\u4416\0\u4469\0\u02eb\0\u44bc\0\u450f"+
    "\0\u4562\0\u45b5\0\u4608\0\u465b\0\u46ae\0\u4701\0\u4754\0\u47a7"+
    "\0\u47fa\0\u484d\0\u48a0\0\123\0\u48f3\0\u4946\0\u4999\0\u49ec"+
    "\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84"+
    "\0\u4cd7\0\u4d2a\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u4ec9\0\u4f1c"+
    "\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb\0\u510e\0\u5161\0\u51b4"+
    "\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353\0\u53a6\0\u53f9\0\u544c"+
    "\0\u549f\0\u54f2\0\u5545\0\u5598\0\u55eb\0\u563e\0\u5691\0\u56e4"+
    "\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883\0\u58d6\0\u21b8\0\u5929"+
    "\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8\0\u5b1b\0\u5b6e\0\u5bc1"+
    "\0\u5c14\0\u5c67\0\u5cba\0\u5d0d\0\u5d60\0\u5db3\0\u5e06\0\u5e59"+
    "\0\u5eac\0\u5eff\0\u5f52\0\u5fa5\0\u5ff8\0\u604b\0\u609e\0\u60f1"+
    "\0\u6144\0\u6197\0\u61ea\0\u623d\0\u6290\0\u62e3\0\u6336\0\u6389"+
    "\0\u63dc\0\u642f\0\u6482\0\u64d5\0\u6528\0\u657b\0\u65ce\0\u6621"+
    "\0\u6674\0\u66c7\0\u671a\0\u676d\0\u67c0\0\u6813\0\u6866\0\u671a"+
    "\0\u68b9\0\u690c\0\u695f\0\u02eb\0\u69b2\0\u6a05\0\u6a58\0\u6aab"+
    "\0\u6afe\0\u6b51\0\u6ba4\0\u6bf7\0\u02eb\0\u6c4a\0\u6c9d\0\u6cf0"+
    "\0\u6d43\0\u6d96\0\u6de9\0\u6e3c\0\u6e8f\0\u6ee2\0\u6f35\0\u6f88"+
    "\0\u6fdb\0\u702e\0\u7081\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220"+
    "\0\u7273\0\u72c6\0\u7319\0\u736c\0\u73bf\0\u7412\0\u7465\0\u74b8"+
    "\0\u750b\0\u755e\0\u75b1\0\u7604\0\u7657\0\u76aa\0\u76fd\0\u7750"+
    "\0\u77a3\0\u77f6\0\u7849\0\u789c\0\u78ef\0\u7942\0\u7995\0\123"+
    "\0\u79e8\0\u7a3b\0\u7a8e\0\u7ae1\0\u76aa\0\u76fd\0\u7b34\0\u7b87"+
    "\0\u7bda\0\u7c2d\0\u7c80\0\u7cd3\0\u7d26\0\u7d79\0\u7dcc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\12\1\14\1\12\1\15\1\16\1\17"+
    "\1\12\1\20\1\21\1\22\1\23\1\24\1\25\1\12"+
    "\1\26\1\27\2\26\1\30\1\12\1\31\1\12\1\32"+
    "\1\33\1\34\1\35\1\12\1\36\1\37\2\12\1\40"+
    "\3\12\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\2\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\0\1\12\1\65"+
    "\1\2\1\66\1\67\1\12\1\4\3\12\1\25\1\70"+
    "\1\71\1\72\1\64\124\0\1\12\1\73\13\12\1\74"+
    "\3\12\1\75\1\76\32\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\21\12\1\77\21\12"+
    "\1\77\11\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\1\100\12\12\1\101\2\12\1\102"+
    "\30\12\1\103\1\104\4\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\4\12\1\105\3\12"+
    "\1\106\5\12\1\107\30\12\1\107\5\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\2\12"+
    "\1\110\10\12\1\111\1\112\1\113\7\12\1\114\7\12"+
    "\1\111\1\12\1\115\15\12\11\0\1\116\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\1\117\7\12\1\120"+
    "\5\12\1\121\5\12\1\122\22\12\1\121\1\117\4\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\13\12\1\123\2\12\1\124\36\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\55\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\5\12\1\107\6\12\1\125\1\126\4\12\1\127"+
    "\14\12\1\130\1\12\1\107\13\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\10\12\1\131"+
    "\44\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\1\132\3\12\1\133\50\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\21\12"+
    "\1\134\33\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\21\12\1\135\2\12\1\136\30\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\4\12\1\137\33\12\1\140\14\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\23\12"+
    "\1\141\2\12\1\142\26\12\11\0\1\12\14\0\1\12"+
    "\4\0\5\12\1\142\1\0\1\12\3\0\7\12\1\143"+
    "\11\12\1\144\21\12\1\145\11\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\15\12\1\127"+
    "\4\12\1\106\32\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\1\146\54\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\7\12"+
    "\1\147\43\12\1\147\1\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\7\0\1\150\23\0\4\26"+
    "\4\0\1\150\36\0\1\151\24\0\1\152\2\0\1\150"+
    "\22\0\1\153\1\154\3\155\4\0\1\150\25\0\1\153"+
    "\10\0\1\151\11\0\1\152\11\0\34\12\1\156\20\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\5\12\1\107\7\12\1\130\21\12\1\130\1\12"+
    "\1\107\13\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\13\12\1\111\1\12\1\115\17\12"+
    "\1\111\1\12\1\115\15\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\1\117\15\12\1\121"+
    "\30\12\1\121\1\117\4\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\16\12\1\107\30\12"+
    "\1\107\5\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\4\12\1\140\33\12\1\140\14\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\1\104\15\12\1\103\30\12\1\103\1\104\4\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\21\12\1\145\21\12\1\145\11\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\26\12"+
    "\1\142\26\12\11\0\1\12\14\0\1\12\4\0\5\12"+
    "\1\142\1\0\1\12\33\0\1\26\1\27\2\26\21\0"+
    "\1\157\6\0\1\160\12\0\1\151\53\0\1\26\1\27"+
    "\2\26\22\0\1\157\5\0\1\160\12\0\1\151\102\0"+
    "\1\45\4\0\1\160\115\0\1\161\1\70\3\0\1\160"+
    "\122\0\1\162\33\0\1\163\66\0\1\162\36\0\16\12"+
    "\1\16\36\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\72\0\1\164\123\0\1\164\62\0\4\165"+
    "\167\0\1\63\123\0\1\64\17\0\1\64\72\166\1\0"+
    "\6\166\1\0\3\166\1\167\1\170\14\166\72\171\1\0"+
    "\6\171\1\0\4\171\1\172\1\167\13\171\1\0\1\173"+
    "\6\174\1\175\7\174\1\176\1\174\1\177\6\174\4\0"+
    "\1\200\6\174\1\177\7\174\1\201\1\174\11\0\1\174"+
    "\14\0\1\174\4\0\1\202\5\174\1\0\1\174\2\0"+
    "\101\70\4\0\16\70\1\0\10\12\1\203\44\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\66\0"+
    "\1\204\37\0\22\12\1\205\32\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\3\12\1\134"+
    "\51\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\21\12\1\206\33\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\4\12\1\207"+
    "\33\12\1\207\14\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\13\12\1\210\6\12\1\211"+
    "\1\212\25\12\1\211\3\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\1\213\15\12\1\214"+
    "\36\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\15\12\1\215\21\12\1\216\15\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\15\12\1\216\21\12\1\216\15\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\22\12\1\211"+
    "\26\12\1\211\3\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\2\12\1\217\2\12\1\220"+
    "\47\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\4\12\1\76\50\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\7\12\1\221"+
    "\45\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\22\12\1\222\26\12\1\222\3\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\17\12\1\223\35\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\3\12\1\224\36\12\1\225"+
    "\12\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\1\226\54\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\3\12\1\225\36\12"+
    "\1\225\12\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\10\12\1\227\12\12\1\230\31\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\13\12\1\231\21\12\1\231\17\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\15\12"+
    "\1\232\37\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\21\12\1\233\21\12\1\233\11\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\15\12\1\234\37\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\16\12\1\235\36\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\23\12\1\221\31\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\17\12\1\236\35\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\2\12\1\237\17\12\1\240\1\241\21\12\1\242"+
    "\7\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\22\12\1\243\32\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\2\12\1\242"+
    "\42\12\1\242\7\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\22\12\1\227\32\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\14\12\1\244\40\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\26\12\1\76\26\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\10\12\1\245\5\12\1\246\36\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\1\12\1\247"+
    "\53\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\20\12\1\250\2\12\1\251\22\12\1\251"+
    "\6\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\23\12\1\251\22\12\1\251\6\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\1\252\54\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\10\12\1\253\25\12\1\253\16\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\21\12\1\254\33\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\1\255\23\12\1\256"+
    "\17\12\1\256\10\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\76\3\0\24\12\1\256\17\12\1\256"+
    "\10\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\21\12\1\76\33\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\10\12\1\257"+
    "\25\12\1\257\16\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\33\0\1\260\1\261\2\260\21\0"+
    "\2\262\75\0\1\263\1\0\1\263\67\0\6\264\22\0"+
    "\4\264\4\0\3\264\2\0\1\264\2\0\1\264\40\0"+
    "\1\264\15\0\1\150\23\0\4\154\4\0\1\150\36\0"+
    "\1\151\27\0\1\150\23\0\1\154\3\155\4\0\1\150"+
    "\36\0\1\151\23\0\7\12\1\265\25\12\1\266\1\12"+
    "\1\267\1\12\1\270\1\271\2\12\1\272\1\273\3\12"+
    "\1\274\2\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\2\0\60\161\1\275\1\0\10\161\1\0"+
    "\30\161\20\0\1\276\34\0\1\276\52\0\1\150\23\0"+
    "\4\165\4\0\1\150\61\0\72\166\1\0\6\166\1\0"+
    "\3\166\1\277\1\170\14\166\72\171\1\0\6\171\1\0"+
    "\4\171\1\172\1\300\13\171\1\0\21\174\1\301\33\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\55\174\11\0\1\174\14\0\1\174\4\0\6\174"+
    "\1\0\1\174\3\0\23\174\1\302\31\174\11\0\1\174"+
    "\14\0\1\174\4\0\6\174\1\0\1\174\3\0\7\174"+
    "\1\303\45\174\11\0\1\174\14\0\1\174\4\0\6\174"+
    "\1\0\1\174\3\0\4\174\1\304\33\174\1\304\14\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\40\174\1\305\1\306\1\174\1\307\1\174\1\310"+
    "\3\174\1\311\2\174\1\312\11\0\1\174\14\0\1\174"+
    "\4\0\1\313\5\174\1\0\1\174\3\0\46\174\1\314"+
    "\6\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\35\174\1\315\17\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\4\12\1\316"+
    "\50\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\23\12\1\317\31\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\1\320\54\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\1\321\47\12\1\321\4\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\13\12\1\322"+
    "\41\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\4\12\1\107\33\12\1\107\14\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\2\12\1\323\52\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\22\12\1\324\32\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\15\12\1\106\37\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\22\12\1\227\1\325\22\12"+
    "\1\325\6\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\23\12\1\325\22\12\1\325\6\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\13\12\1\326\41\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\1\327\7\12\1\214"+
    "\44\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\16\12\1\76\36\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\4\12\1\330"+
    "\33\12\1\330\14\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\23\12\1\320\31\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\3\12\1\331\1\12\1\332\2\12\1\333\11\12\1\334"+
    "\3\12\1\335\7\12\1\333\16\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\10\12\1\333"+
    "\25\12\1\333\16\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\13\12\1\76\41\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\23\12\1\76\31\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\4\12\1\336\50\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\22\12\1\256\26\12\1\256\3\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\1\337\54\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\4\12\1\340\33\12\1\340\14\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\2\12"+
    "\1\341\52\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\114\53\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\13\12"+
    "\1\342\41\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\13\12\1\343\21\12\1\344\17\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\23\12\1\345\31\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\4\12\1\346\50\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\13\12\1\344\21\12\1\344\17\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\4\12"+
    "\1\227\50\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\4\12\1\347\50\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\15\12"+
    "\1\227\7\12\1\350\27\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\23\12\1\351\31\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\13\12\1\352\41\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\24\12\1\353\30\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\24\12\1\354\17\12\1\354\10\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\23\12"+
    "\1\352\31\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\23\12\1\355\22\12\1\355\6\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\16\12\1\133\36\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\10\12\1\227\44\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\4\12\1\356\33\12\1\356\14\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\13\12"+
    "\1\211\21\12\1\211\17\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\2\0\31\357\4\260\44\357"+
    "\4\0\20\357\1\360\25\357\1\361\1\357\3\362\32\357"+
    "\1\361\11\357\4\0\5\357\1\360\10\357\31\0\1\260"+
    "\1\261\2\260\67\0\1\363\54\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\36\12\1\364"+
    "\16\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\50\12\1\365\4\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\36\12\1\366"+
    "\5\12\1\367\10\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\36\12\1\370\16\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\35\12\1\371\17\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\43\12\1\372\11\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\40\12\1\373\14\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\63\0\1\374\51\0\1\375\43\0"+
    "\1\375\47\0\6\174\1\376\46\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\23\174\1\377"+
    "\31\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\17\174\1\u0100\35\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\2\174\1\u0101"+
    "\42\174\1\u0101\7\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\37\174\1\u0102\15\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\36\174\1\u0103\16\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\40\174\1\u0104\14\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\47\174\1\u0105\5\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\40\174\1\u0106\14\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\47\174\1\u0107\5\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\40\174\1\u0108\14\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\46\174\1\u0109\6\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\47\174\1\u010a\5\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\13\12\1\u010b\41\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\21\12\1\u010c\33\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\55\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\76\3\0\12\12\1\107\42\12\11\0\1\12\14\0"+
    "\1\12\4\0\3\12\1\107\2\12\1\0\1\12\3\0"+
    "\1\u010d\54\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\7\12\1\76\45\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\22\12"+
    "\1\76\32\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\10\12\1\u010e\25\12\1\u010e\16\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\1\u010f\54\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\24\12\1\u0110\30\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\4\12\1\u0111\50\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\16\12\1\u0112\36\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\5\12\1\107\33\12\1\107\13\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\26\12\1\u0113"+
    "\26\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\7\12\1\u0114\45\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\15\12\1\u0115"+
    "\37\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\13\12\1\u0116\41\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\1\355\47\12"+
    "\1\355\4\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\23\12\1\u0117\31\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\4\12"+
    "\1\u0118\50\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\24\12\1\u0119\17\12\1\u011a\10\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\24\12\1\u011a\17\12\1\u011a\10\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\1\u011b"+
    "\3\12\1\u011c\50\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\21\12\1\u011d\33\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\22\12\1\u011e\32\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\1\u011f\54\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\4\12"+
    "\1\u0120\50\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\10\12\1\u0121\44\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\10\12"+
    "\1\u0122\44\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\21\12\1\u0123\21\12\1\u0123\11\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\2\12\1\u0124\42\12\1\u0124\7\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\33\0\4\357"+
    "\117\0\1\357\1\u0125\1\357\1\u0125\67\0\6\u0126\22\0"+
    "\4\u0126\4\0\3\u0126\2\0\1\u0126\2\0\1\u0126\40\0"+
    "\1\u0126\10\0\32\357\3\362\44\357\4\0\16\357\1\0"+
    "\13\12\1\u0127\41\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\37\12\1\u0128\15\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\52\12\1\u0129\2\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\35\12\1\u0128\17\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\37\12\1\u012a\15\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\43\12\1\u012b\11\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\50\12\1\u012c\4\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\50\12\1\u012d\4\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\46\12\1\u012e\6\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\22\0\1\204\34\0\1\204\46\0"+
    "\2\174\1\u012f\22\174\1\u012f\27\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\17\174\1\u0130"+
    "\35\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\34\174\1\u0131\20\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\16\174\1\u0132"+
    "\30\174\1\u0132\5\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\55\174\11\0\1\174\14\0"+
    "\1\174\4\0\2\174\1\u012f\3\174\1\0\1\174\3\0"+
    "\35\174\1\u0133\17\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\55\174\11\0\1\174\14\0"+
    "\1\174\4\0\4\174\1\u0134\1\174\1\0\1\174\3\0"+
    "\47\174\1\u0135\5\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\43\174\1\u0136\5\174\1\u0137"+
    "\3\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\51\174\1\u0108\3\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\46\174\1\u012f"+
    "\6\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\54\174\1\u0138\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\55\174\11\0\1\174"+
    "\14\0\1\174\4\0\1\174\1\u0139\4\174\1\0\1\174"+
    "\3\0\3\12\1\76\51\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\1\u013a\54\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\u013b\53\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\15\12\1\u013c\21\12\1\u013c"+
    "\15\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\21\12\1\106\33\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\13\12\1\227"+
    "\41\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\2\12\1\217\52\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\21\12\1\u013d"+
    "\33\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\10\12\1\u013e\44\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\10\12\1\u013b"+
    "\44\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\3\12\1\324\51\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\13\12\1\320"+
    "\41\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\10\12\1\u013f\44\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\14\12\1\u0140"+
    "\40\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\3\12\1\u0141\36\12\1\211\12\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\3\12\1\211\36\12\1\211\12\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\15\12\1\u0142"+
    "\37\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\1\u0143\54\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\5\12\1\u0144\47\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\17\12\1\u0144\35\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\23\12\1\106\31\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\2\12\1\u0145\52\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\2\12\1\76\52\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\21\12\1\u0146\33\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\15\12\1\107\21\12"+
    "\1\107\15\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\7\12\1\107\43\12\1\107\1\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\2\0\32\357\1\u0125\1\357\1\u0125\44\357\4\0\17\357"+
    "\6\u0126\22\357\4\u0126\4\357\3\u0126\2\357\1\u0126\2\357"+
    "\1\u0126\27\357\4\0\5\357\1\u0126\10\357\1\0\23\12"+
    "\1\u0147\31\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\40\12\1\u012b\14\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\40\12"+
    "\1\u0148\14\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\45\12\1\u0149\7\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\34\12"+
    "\1\u014a\20\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\51\12\1\u014b\3\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\36\12"+
    "\1\u014c\16\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\53\12\1\u014d\1\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\34\174"+
    "\1\u014e\20\174\11\0\1\174\14\0\1\174\4\0\6\174"+
    "\1\0\1\174\3\0\4\174\1\u014f\50\174\11\0\1\174"+
    "\14\0\1\174\4\0\6\174\1\0\1\174\3\0\21\174"+
    "\1\u0150\21\174\1\u0150\11\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\40\174\1\u0151\14\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\44\174\1\u0152\10\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\55\174\11\0\1\174"+
    "\14\0\1\174\4\0\3\174\1\u0153\2\174\1\0\1\174"+
    "\3\0\55\174\11\0\1\174\14\0\1\174\4\0\2\174"+
    "\1\u0154\3\174\1\0\1\174\3\0\51\174\1\u0155\3\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\34\174\1\u0156\20\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\50\174\1\u0157\4\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\2\12\1\227\52\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\13\12\1\106\41\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\24\12\1\211\17\12\1\211\10\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\4\12"+
    "\1\u0158\50\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\23\12\1\212\31\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\16\12"+
    "\1\u0159\36\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\4\12\1\u015a\50\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\4\12"+
    "\1\u015b\33\12\1\107\14\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\2\12\1\u015c\52\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\3\12\1\u015d\51\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\1\u015e\54\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\23\12\1\u015f\31\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\4\12\1\u0160\50\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\34\12\1\u0161\20\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\51\12\1\u0162\3\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\46\12\1\u0163\6\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\34\12\1\u0164\20\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\51\12\1\u012b\3\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\46\12\1\u012b\6\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\47\12\1\u0165\5\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\21\174\1\u0166\33\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\21\174\1\u0167\33\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\3\174\1\u0168\36\174\1\u0168"+
    "\12\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\51\174\1\u012f\3\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\40\174\1\u0107"+
    "\14\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\36\174\1\u0169\16\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\40\174\1\u016a"+
    "\14\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\36\174\1\u016b\16\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\43\174\1\u016c"+
    "\11\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\35\174\1\u0151\17\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\1\212\54\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\15\12\1\u016d\37\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\15\12\1\u016e\37\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\34\12\1\u016f\20\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\4\12\1\u015d\50\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\16\12\1\u0170\36\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\2\12\1\106\52\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\4\12\1\u010b\50\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\2\12\1\u0171\52\12"+
    "\11\0\1\12\14\0\1\12\4\0\6\12\1\0\1\12"+
    "\3\0\54\12\1\u0172\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\36\12\1\u0173\16\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\42\12\1\u012b\12\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\4\174\1\u0174\50\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\21\174\1\u0175\33\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\22\174\1\u0176\26\174\1\u0176"+
    "\3\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\40\174\1\u012f\14\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\43\174\1\u012f"+
    "\11\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\47\174\1\u0177\5\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\50\174\1\u0178"+
    "\4\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\23\12\1\324\31\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\16\12\1\u0179"+
    "\36\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\5\12\1\76\47\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\16\12\1\u017a"+
    "\36\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\50\12\1\u017b\4\12\11\0\1\12\14\0"+
    "\1\12\4\0\6\12\1\0\1\12\3\0\47\12\1\u017c"+
    "\5\12\11\0\1\12\14\0\1\12\4\0\6\12\1\0"+
    "\1\12\3\0\22\174\1\u017d\32\174\11\0\1\174\14\0"+
    "\1\174\4\0\6\174\1\0\1\174\3\0\16\174\1\u017e"+
    "\36\174\11\0\1\174\14\0\1\174\4\0\6\174\1\0"+
    "\1\174\3\0\4\174\1\u017f\33\174\1\u017f\14\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\37\174\1\u012f\15\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\55\174\11\0\1\174\14\0"+
    "\1\174\4\0\5\174\1\u0180\1\0\1\174\3\0\15\12"+
    "\1\u015e\37\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\14\12\1\u0181\40\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\45\12"+
    "\1\u0128\7\12\11\0\1\12\14\0\1\12\4\0\6\12"+
    "\1\0\1\12\3\0\37\12\1\u012b\15\12\11\0\1\12"+
    "\14\0\1\12\4\0\6\12\1\0\1\12\3\0\17\174"+
    "\1\u0182\35\174\11\0\1\174\14\0\1\174\4\0\6\174"+
    "\1\0\1\174\3\0\21\174\1\u0183\33\174\11\0\1\174"+
    "\14\0\1\174\4\0\6\174\1\0\1\174\3\0\23\174"+
    "\1\u0184\22\174\1\u0184\6\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\34\174\1\u0185\20\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\17\12\1\u0186\35\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\16\174\1\u0187\36\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\14\174\1\u0188\40\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\55\174\11\0\1\174"+
    "\4\0\1\u0189\7\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\54\174\1\u018a\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\10\12\1\u018b\44\12\11\0"+
    "\1\12\14\0\1\12\4\0\6\12\1\0\1\12\3\0"+
    "\15\174\1\u018c\37\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\22\174\1\u018d\32\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\107\0"+
    "\1\u018e\1\0\1\u018f\14\0\47\174\1\u0190\5\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\13\12\1\u0191\41\12\11\0\1\12\14\0\1\12\4\0"+
    "\6\12\1\0\1\12\3\0\22\174\1\u0192\32\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\6\174\1\u012f\46\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\2\0\72\u018e\1\0\6\u018e\1\0"+
    "\3\u018e\1\u0193\1\u0194\14\u018e\72\u018f\1\0\6\u018f\1\0"+
    "\4\u018f\1\u0195\1\u0193\13\u018f\1\0\51\174\1\u0196\3\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\4\12\1\146\50\12\11\0\1\12\14\0\1\12"+
    "\4\0\6\12\1\0\1\12\3\0\4\174\1\u0197\50\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\77\0\1\u0198\25\0\72\u018e\1\0\6\u018e\1\0\3\u018e"+
    "\1\u0199\1\u0194\14\u018e\72\u018f\1\0\6\u018f\1\0\4\u018f"+
    "\1\u0195\1\u019a\13\u018f\1\0\46\174\1\u019b\6\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\34\174\1\u019c\20\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\2\0\72\u018e\1\0\2\u018e\1\u019d"+
    "\3\u018e\1\0\3\u018e\1\u0193\1\u0194\14\u018e\72\u018f\1\0"+
    "\2\u018f\1\u019e\3\u018f\1\0\4\u018f\1\u0195\1\u0193\13\u018f"+
    "\1\0\34\174\1\u019f\20\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\7\174\1\u01a0\45\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\42\174\1\u01a1\12\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\4\174\1\u01a2\50\174"+
    "\11\0\1\174\14\0\1\174\4\0\6\174\1\0\1\174"+
    "\3\0\50\174\1\u01a3\4\174\11\0\1\174\14\0\1\174"+
    "\4\0\6\174\1\0\1\174\3\0\1\u01a4\54\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\46\174\1\u01a5\6\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\3\174\1\u01a6\51\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\50\174\1\u012f\4\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\3\0\4\174\1\u01a7\50\174\11\0"+
    "\1\174\14\0\1\174\4\0\6\174\1\0\1\174\3\0"+
    "\21\174\1\u012f\33\174\11\0\1\174\14\0\1\174\4\0"+
    "\6\174\1\0\1\174\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32287];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\42\1\1\11\7\1\5\11\66\1\4\0"+
    "\3\1\2\11\1\0\1\11\1\0\1\11\1\1\1\0"+
    "\1\11\3\0\11\1\1\11\55\1\1\0\12\1\2\0"+
    "\75\1\1\11\1\0\213\1\1\0\4\1\2\0\3\1"+
    "\3\0\2\1\1\11\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int lineNumber = 0;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); lexeme = yytext();return ERROR;
            }
          case 29: break;
          case 2: 
            { chars += yytext().length(); lexeme=yytext(); return CONSTANT;
            }
          case 30: break;
          case 3: 
            { chars += yytext().length(); lexeme=yytext(); return INT;
            }
          case 31: break;
          case 4: 
            { chars += yytext().length(); lexeme=yytext(); return AROP;
            }
          case 32: break;
          case 5: 
            { chars += yytext().length(); lexeme=yytext(); return CMPOP;
            }
          case 33: break;
          case 6: 
            { chars += yytext().length(); lexeme=yytext(); return ASSOP;
            }
          case 34: break;
          case 7: 
            { chars += yytext().length(); lexeme=yytext(); return LOGOP;
            }
          case 35: break;
          case 8: 
            { chars += yytext().length(); lexeme=yytext(); return PRNTHSS;
            }
          case 36: break;
          case 9: 
            { chars += yytext().length(); lexeme=yytext(); return CURLY;
            }
          case 37: break;
          case 10: 
            { chars += yytext().length(); lexeme=yytext(); return BRACKET;
            }
          case 38: break;
          case 11: 
            { chars += yytext().length(); lexeme=yytext(); return SEMICOLON;
            }
          case 39: break;
          case 12: 
            { chars += yytext().length(); lexeme=yytext(); return COMMA;
            }
          case 40: break;
          case 13: 
            { chars += yytext().length(); lexeme=yytext(); return CONCAT;
            }
          case 41: break;
          case 14: 
            { chars = 0; lineNumber++; lexeme="\n"; return NEWLINE;
            }
          case 42: break;
          case 15: 
            { chars += yytext().length(); lexeme=yytext(); return BLANK;
            }
          case 43: break;
          case 16: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; lineNumber++;} lexeme=yytext(); return COMMENT;
            }
          case 44: break;
          case 17: 
            { chars += yytext().length(); lexeme=yytext(); return RSRVWRDS;
            }
          case 45: break;
          case 18: 
            { chars += yytext().length(); lexeme=yytext(); return CTRLSTRCT;
            }
          case 46: break;
          case 19: 
            { chars += yytext().length(); lexeme=yytext(); return DOUBLE;
            }
          case 47: break;
          case 20: 
            { chars += yytext().length(); lexeme=yytext(); return INCDECOP;
            }
          case 48: break;
          case 21: 
            { chars += yytext().length(); lexeme=yytext(); return STRING;
            }
          case 49: break;
          case 22: 
            { chars += yytext().length(); lexeme=yytext(); return VARID;
            }
          case 50: break;
          case 23: 
            { chars += yytext().length(); lexeme=yytext(); return PHP;
            }
          case 51: break;
          case 24: 
            { chars += yytext().length(); lexeme=yytext(); return BOOL;
            }
          case 52: break;
          case 25: 
            { chars += yytext().length(); lexeme=yytext(); return RSRVDVAR;
            }
          case 53: break;
          case 26: 
            { chars += yytext().length(); lexeme=yytext(); return MAGCONSTANT;
            }
          case 54: break;
          case 27: 
            { chars += yytext().length(); lexeme=yytext(); return FUNC;
            }
          case 55: break;
          case 28: 
            { chars += yytext().length(); lexeme=yytext(); return DB;
            }
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
