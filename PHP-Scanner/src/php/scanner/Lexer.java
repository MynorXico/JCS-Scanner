/* The following code was generated by JFlex 1.6.1 */

package php.scanner;
import java_cup.runtime.Symbol;
import static php.scanner.Token.*;
import java.util.LinkedList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/mynor/OneDrive/Documentos/repos/JPHP-Scanner/PHP-Scanner/src/php/scanner/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 66, 37, 39, 39, 38,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    56, 13, 41,  0,  0, 10, 14,  0, 16, 17,  8,  6, 23,  7, 24,  9, 
     2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 22, 11, 12, 11,  0, 
     0, 54, 63,  4,  4, 36,  4, 62,  5, 60,  5,  5, 61, 58, 53,  5, 
    57,  5, 59, 64,  5,  5,  5,  5,  3,  5,  5, 20, 42, 21,  0,  5, 
     0, 34, 45, 47, 29, 25, 33, 46, 48, 43,  5, 52, 35, 49, 28, 44, 
    50,  5, 31, 30, 27, 32, 65, 51, 26, 55,  5, 18, 15, 19,  0,  5, 
     5,  5,  5,  5,  5, 40,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\5\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\7\3\2\20\1\1\5\3\1\21\6\3\1\21"+
    "\1\2\2\0\1\3\1\5\1\1\1\22\1\4\1\0"+
    "\1\23\1\24\1\21\1\25\11\3\1\0\1\26\1\0"+
    "\1\3\1\27\14\3\1\0\1\30\1\2\2\0\3\3"+
    "\1\31\4\3\1\32\1\33\14\3\2\30\1\0\1\22"+
    "\1\3\1\34\1\35\1\36\6\3\1\37\10\3\1\40"+
    "\2\30\6\3\1\41\1\42\1\43\1\3\1\44\5\3"+
    "\1\30\1\3\1\45\1\46\1\47\3\3\1\50\4\3"+
    "\1\51\5\3\1\52\1\53\2\3\1\54\1\3\1\55"+
    "\1\56\2\3\1\57\1\3\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u025b\0\u02e1\0\u0324\0\u0367\0\103"+
    "\0\u03aa\0\103\0\u03ed\0\103\0\103\0\103\0\103\0\u0430"+
    "\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648"+
    "\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u0648\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\103\0\103\0\u0abb\0\u0afe\0\103\0\u0b41\0\103"+
    "\0\103\0\103\0\103\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90"+
    "\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u068b\0\103\0\u0ddf\0\u0e22"+
    "\0\u010c\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7"+
    "\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u0a78"+
    "\0\u0abb\0\u120f\0\u1252\0\u1295\0\u12d8\0\u010c\0\u131b\0\u135e"+
    "\0\u13a1\0\u13e4\0\u010c\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533"+
    "\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\u1814\0\103\0\u1857\0\u010c\0\u010c\0\u010c"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u010c\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u010c"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u010c\0\u010c\0\u010c\0\u1e5c\0\u010c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u010c\0\u010c\0\u010c\0\u2074"+
    "\0\u20b7\0\u20fa\0\u010c\0\u213d\0\u2180\0\u21c3\0\u2206\0\u010c"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u010c\0\u010c\0\u2398"+
    "\0\u23db\0\u010c\0\u241e\0\u010c\0\u010c\0\u2461\0\u24a4\0\u010c"+
    "\0\u24e7\0\u010c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\6\1\7\1\10\1\11"+
    "\1\10\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\5\1\31\1\32\1\33\1\34\1\35\1\5\1\36"+
    "\3\5\1\37\1\40\1\0\1\5\1\41\1\2\1\42"+
    "\1\5\1\43\1\5\1\44\3\5\1\45\1\5\1\46"+
    "\2\5\1\47\1\50\1\51\1\52\2\5\1\53\1\5"+
    "\1\54\1\55\1\56\104\0\2\57\25\0\1\60\53\0"+
    "\2\57\1\61\24\0\1\60\1\0\1\61\51\0\5\5"+
    "\23\0\14\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\1\3\1\4\3\0\1\62\5\0\1\63\67\0"+
    "\1\3\1\4\4\0\1\62\4\0\1\63\102\0\1\63"+
    "\76\0\1\64\1\65\2\0\1\63\102\0\1\66\102\0"+
    "\1\66\1\67\103\0\1\70\103\0\1\70\104\0\1\71"+
    "\104\0\1\72\104\0\1\73\56\0\5\5\23\0\1\5"+
    "\1\74\10\5\1\75\1\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\14\5\3\0\1\5"+
    "\2\0\5\5\1\76\7\5\1\0\11\5\2\0\5\5"+
    "\23\0\1\77\6\5\1\100\4\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\23\0\14\5\3\0"+
    "\1\5\2\0\1\5\1\101\13\5\1\0\11\5\2\0"+
    "\5\5\23\0\2\5\1\102\11\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\23\0\1\103\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\23\0\14\5\3\0\1\5\2\0\1\5\1\104\13\5"+
    "\1\0\11\5\46\0\2\37\21\0\1\37\57\0\1\37"+
    "\1\40\21\0\1\40\11\0\1\56\45\105\1\0\3\105"+
    "\1\106\1\107\30\105\1\0\5\5\23\0\3\5\1\110"+
    "\4\5\1\111\3\5\3\0\1\5\2\0\6\5\1\112"+
    "\6\5\1\0\11\5\2\0\5\5\23\0\6\5\1\113"+
    "\5\5\3\0\1\5\2\0\1\5\1\114\13\5\1\0"+
    "\11\5\2\0\5\5\23\0\12\5\1\115\1\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\23\0"+
    "\14\5\3\0\1\5\2\0\5\5\1\116\7\5\1\0"+
    "\11\5\2\0\5\5\23\0\1\117\13\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\6\5"+
    "\1\120\5\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\11\5\1\121\2\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\1\122"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\1\123\13\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\1\124\13\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\23\0"+
    "\14\5\3\0\1\5\2\0\1\5\1\125\13\5\1\0"+
    "\11\5\47\0\1\56\21\0\1\56\11\0\1\56\1\0"+
    "\2\57\25\0\1\60\1\126\12\0\1\126\37\0\2\127"+
    "\101\0\2\130\1\0\1\130\24\0\1\130\3\0\1\130"+
    "\3\0\2\130\1\0\1\130\10\0\1\130\1\0\1\130"+
    "\6\0\1\130\10\0\1\130\3\0\10\131\1\132\72\131"+
    "\45\65\4\0\32\65\14\0\1\2\67\0\5\5\23\0"+
    "\2\5\1\133\11\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\5\5\1\134\6\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\23\0"+
    "\14\5\3\0\1\5\2\0\1\135\14\5\1\0\11\5"+
    "\2\0\5\5\23\0\14\5\3\0\1\5\2\0\10\5"+
    "\1\136\4\5\1\0\11\5\2\0\5\5\23\0\12\5"+
    "\1\137\1\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\7\5\1\140\4\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\6\5"+
    "\1\141\5\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\2\5\1\142\11\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\6\5"+
    "\1\143\5\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\1\0\45\105\4\0\32\105\1\0\5\5\23\0\2\5"+
    "\1\144\11\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\14\5\3\0\1\5\2\0\7\5"+
    "\1\145\5\5\1\0\11\5\2\0\5\5\23\0\1\146"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\14\5\3\0\1\5\2\0\1\5\1\147"+
    "\13\5\1\0\11\5\2\0\5\5\23\0\11\5\1\150"+
    "\2\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\14\5\3\0\1\5\2\0\1\151\14\5"+
    "\1\0\11\5\2\0\5\5\23\0\14\5\3\0\1\5"+
    "\2\0\10\5\1\152\4\5\1\0\11\5\2\0\5\5"+
    "\23\0\14\5\3\0\1\5\2\0\1\153\14\5\1\0"+
    "\11\5\2\0\5\5\23\0\12\5\1\154\1\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\23\0"+
    "\11\5\1\155\2\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\2\5\1\156\11\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\23\0"+
    "\2\5\1\157\11\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\14\5\3\0\1\5\2\0"+
    "\1\160\14\5\1\0\11\5\2\0\1\161\1\162\3\0"+
    "\2\163\74\0\2\127\26\0\1\126\12\0\1\126\36\0"+
    "\10\131\1\132\1\164\71\131\1\0\5\5\23\0\1\165"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\1\166\13\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\5\5\1\167\6\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\23\0\12\5\1\170\1\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\14\5\3\0\1\5"+
    "\2\0\2\5\1\171\12\5\1\0\11\5\2\0\5\5"+
    "\23\0\14\5\3\0\1\5\2\0\1\172\14\5\1\0"+
    "\11\5\2\0\5\5\23\0\7\5\1\173\4\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\23\0"+
    "\1\174\13\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\12\5\1\175\1\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\11\5"+
    "\1\176\2\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\12\5\1\177\1\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\5\5"+
    "\1\200\6\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\12\5\1\201\1\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\14\5"+
    "\3\0\1\5\2\0\13\5\1\202\1\5\1\0\11\5"+
    "\2\0\5\5\23\0\3\5\1\203\10\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\12\5"+
    "\1\204\1\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\4\5\1\205\7\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\14\5"+
    "\3\0\1\5\2\0\15\5\1\0\6\5\1\206\2\5"+
    "\2\0\5\5\23\0\14\5\3\0\1\5\2\0\15\5"+
    "\1\0\6\5\1\207\2\5\2\0\5\5\23\0\4\5"+
    "\1\210\7\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\1\0\1\211\2\161\42\211\4\0\33\211\2\161\1\212"+
    "\26\211\1\212\12\211\4\0\32\211\1\0\1\161\1\162"+
    "\101\0\5\5\23\0\3\5\1\213\10\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\12\5"+
    "\1\214\1\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\3\5\1\215\10\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\6\5"+
    "\1\216\5\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\6\5\1\217\5\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\1\220"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\14\5\3\0\1\5\2\0\11\5\1\221"+
    "\3\5\1\0\11\5\2\0\5\5\23\0\5\5\1\222"+
    "\6\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\1\223\13\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\6\5\1\224\5\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\23\0\2\5\1\225\11\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\14\5\3\0\1\5"+
    "\2\0\1\5\1\226\13\5\1\0\11\5\2\0\5\5"+
    "\23\0\14\5\3\0\1\5\2\0\15\5\1\0\3\5"+
    "\1\227\1\230\4\5\2\0\5\5\23\0\14\5\3\0"+
    "\1\5\2\0\14\5\1\231\1\0\11\5\2\0\5\5"+
    "\23\0\14\5\3\0\1\5\2\0\14\5\1\232\1\0"+
    "\11\5\2\0\2\211\101\0\2\233\1\0\1\233\24\0"+
    "\1\233\3\0\1\233\3\0\2\233\1\0\1\233\10\0"+
    "\1\233\1\0\1\233\6\0\1\233\10\0\1\233\4\0"+
    "\5\5\23\0\4\5\1\234\7\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\23\0\1\235\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\23\0\14\5\3\0\1\5\2\0\3\5\1\236\11\5"+
    "\1\0\11\5\2\0\5\5\23\0\3\5\1\237\10\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\23\0\10\5\1\240\3\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\14\5\3\0\1\5"+
    "\2\0\6\5\1\241\6\5\1\0\11\5\2\0\5\5"+
    "\23\0\6\5\1\242\5\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\14\5\3\0\1\5"+
    "\2\0\4\5\1\243\10\5\1\0\11\5\2\0\5\5"+
    "\23\0\3\5\1\244\10\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\14\5\3\0\1\5"+
    "\2\0\1\245\14\5\1\0\11\5\2\0\5\5\23\0"+
    "\2\5\1\246\11\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\2\5\1\247\11\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\1\0\1\211\2\233"+
    "\1\211\1\233\24\211\1\233\3\211\1\233\3\211\2\233"+
    "\1\211\1\233\4\0\4\211\1\233\1\211\1\233\6\211"+
    "\1\233\10\211\1\233\3\211\1\0\5\5\23\0\5\5"+
    "\1\250\6\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\23\0\11\5\1\251\2\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\1\252"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\11\5\1\253\2\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\23\0\2\5\1\254"+
    "\11\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\3\5\1\255\10\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\23\0\1\256\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\23\0\1\257\13\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\14\5\3\0\1\5\2\0"+
    "\4\5\1\260\10\5\1\0\11\5\2\0\5\5\23\0"+
    "\3\5\1\261\10\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\14\5\3\0\1\5\2\0"+
    "\14\5\1\262\1\0\11\5\2\0\5\5\23\0\1\263"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\23\0\1\264\13\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\23\0\1\265\13\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\23\0"+
    "\2\5\1\266\11\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\14\5\3\0\1\5\2\0"+
    "\3\5\1\267\11\5\1\0\11\5\2\0\5\5\23\0"+
    "\5\5\1\270\6\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\23\0\1\271\13\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\23\0\6\5"+
    "\1\272\5\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9514];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\1\1\1\11\1\1\4\11"+
    "\30\1\2\0\2\11\2\1\1\11\1\0\4\11\11\1"+
    "\1\0\1\11\1\0\16\1\1\0\2\1\2\0\30\1"+
    "\1\0\1\11\106\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static LinkedList<TError> TablaEL = new LinkedList<TError>(); 
public String lexeme;
public int lineNumber = 0;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
                          TError datos = new TError(yytext(),yyline,yycolumn,"Error Lexico","Simbolo no existe en el lenguaje");
                          TablaEL.add(datos);
            }
          case 49: break;
          case 2: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.intCnst, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 3: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.ident, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 4: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.arop, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 5: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.equals, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 6: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.neg, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 7: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.prnthss_A, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 8: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.prnthss_C, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 9: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.curly_A, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 10: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.curly_C, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 11: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.brackets_A, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 12: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.brackets_C, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 13: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.pyc, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 14: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.comma, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 15: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.dot, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 16: 
            { chars = 0; lineNumber=yyline; lexeme="\n"; lineNumber = yyline;
            }
          case 64: break;
          case 17: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline;
            }
          case 65: break;
          case 18: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; lineNumber=yyline;} lexeme=yytext();
            }
          case 66: break;
          case 19: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.logop, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 20: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.prnthss, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 21: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.brackets, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 22: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline; return new Symbol(sym.strConst, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 23: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_if, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 24: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline;return new Symbol(sym.dblConst, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 25: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline; return new Symbol(sym.t_new, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 26: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_for, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 27: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_int, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 28: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_else, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 29: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_this, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 30: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_null, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 31: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_bool, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 32: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline; return new Symbol(sym.t_void, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 33: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_break, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 34: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.clase, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 35: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_while, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 36: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.print, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 37: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_double, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 38: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_string, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 39: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_return, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 40: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.malloc, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 41: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.extend, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 42: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.getByte, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 43: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.setByte, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 44: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_newArr, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 45: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.ReadLine, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 46: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_interface, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 47: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_implements, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 48: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.readInteger, yycolumn, yyline, yytext());
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
