/* The following code was generated by JFlex 1.6.1 */

package php.scanner;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/mynor/OneDrive/Documentos/repos/JPHP-Scanner/PHP-Scanner/src/php/scanner/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\101\1\44\1\46\1\46\1\45\22\0\1\67\1\14\1\50"+
    "\2\0\1\6\1\15\1\0\1\17\1\20\1\10\1\6\1\26\1\7"+
    "\1\27\1\11\1\2\11\1\1\0\1\25\1\12\1\13\1\12\2\0"+
    "\1\65\1\76\2\4\1\43\1\4\1\75\1\5\1\73\2\5\1\74"+
    "\1\71\1\64\1\5\1\70\1\5\1\72\1\77\4\5\1\3\2\5"+
    "\1\23\1\51\1\24\1\0\1\5\1\0\1\41\1\54\1\56\1\34"+
    "\1\30\1\40\1\55\1\57\1\52\1\5\1\63\1\42\1\60\1\33"+
    "\1\53\1\61\1\5\1\36\1\35\1\32\1\37\1\100\1\62\1\31"+
    "\1\66\1\5\1\21\1\16\1\22\1\0\6\5\1\47\172\5\u1f28\0"+
    "\1\46\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\2\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\7\3\2\22\1\1\5\3"+
    "\1\23\6\3\1\23\1\2\2\0\1\7\1\24\1\25"+
    "\1\6\1\0\1\26\1\23\1\27\12\3\1\0\1\30"+
    "\1\0\1\3\1\31\14\3\1\0\1\32\1\2\2\0"+
    "\11\3\1\33\1\34\5\3\1\35\6\3\2\32\1\25"+
    "\1\3\1\36\1\37\1\40\1\41\6\3\1\42\10\3"+
    "\1\43\2\32\6\3\1\44\1\45\1\46\1\3\1\47"+
    "\5\3\1\32\1\3\1\50\1\51\1\52\3\3\1\53"+
    "\4\3\1\54\5\3\1\55\1\56\2\3\1\57\1\3"+
    "\1\60\1\61\2\3\1\62\1\3\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u01ce\0\u0252\0\u0294\0\102\0\102\0\u02d6"+
    "\0\102\0\u0318\0\102\0\102\0\102\0\102\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u056a\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\102\0\u09cc\0\u0a0e\0\102\0\u0a50\0\102\0\102\0\102"+
    "\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60"+
    "\0\u0ca2\0\u0ce4\0\u05ac\0\102\0\u0d26\0\u0d68\0\u0108\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u098a\0\u09cc\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u0108\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\102\0\u17b8\0\u0108\0\u0108\0\u0108\0\u0108\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u0108\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u0108\0\u1b96"+
    "\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u0108"+
    "\0\u0108\0\u0108\0\u1da6\0\u0108\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae"+
    "\0\u1ef0\0\u1f32\0\u1f74\0\u0108\0\u0108\0\u0108\0\u1fb6\0\u1ff8"+
    "\0\u203a\0\u0108\0\u207c\0\u20be\0\u2100\0\u2142\0\u0108\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u0108\0\u0108\0\u22ce\0\u2310"+
    "\0\u0108\0\u2352\0\u0108\0\u0108\0\u2394\0\u23d6\0\u0108\0\u2418"+
    "\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\5\1\6\1\7\1\6\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\5"+
    "\1\30\1\31\1\32\1\33\1\34\1\5\1\35\3\5"+
    "\1\36\1\37\1\0\1\5\1\40\1\2\1\41\1\5"+
    "\1\42\1\5\1\43\3\5\1\44\1\5\1\45\2\5"+
    "\1\46\1\47\1\50\1\51\2\5\1\52\1\5\1\53"+
    "\1\54\1\55\103\0\2\56\24\0\1\57\53\0\2\56"+
    "\1\60\23\0\1\57\1\0\1\60\51\0\5\5\22\0"+
    "\14\5\3\0\1\5\2\0\15\5\1\0\11\5\14\0"+
    "\1\61\76\0\1\62\1\63\1\0\1\61\101\0\1\64"+
    "\101\0\1\64\1\65\102\0\1\66\102\0\1\66\105\0"+
    "\1\67\103\0\1\70\56\0\5\5\22\0\1\5\1\71"+
    "\10\5\1\72\1\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\6\5\1\73\5\5\3\0"+
    "\1\5\2\0\5\5\1\74\7\5\1\0\11\5\2\0"+
    "\5\5\22\0\7\5\1\75\4\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\14\5\3\0"+
    "\1\5\2\0\1\5\1\76\13\5\1\0\11\5\2\0"+
    "\5\5\22\0\2\5\1\77\11\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\1\100\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\11\5\1\101\2\5\3\0\1\5\2\0\1\5"+
    "\1\102\13\5\1\0\11\5\45\0\2\36\21\0\1\36"+
    "\56\0\1\36\1\37\21\0\1\37\11\0\1\55\44\103"+
    "\1\0\3\103\1\104\1\105\30\103\1\0\5\5\22\0"+
    "\3\5\1\106\4\5\1\107\3\5\3\0\1\5\2\0"+
    "\6\5\1\110\6\5\1\0\11\5\2\0\5\5\22\0"+
    "\6\5\1\111\5\5\3\0\1\5\2\0\1\5\1\112"+
    "\13\5\1\0\11\5\2\0\5\5\22\0\12\5\1\113"+
    "\1\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\14\5\3\0\1\5\2\0\5\5\1\114"+
    "\7\5\1\0\11\5\2\0\5\5\22\0\1\115\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\6\5\1\116\5\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\11\5\1\117\2\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\1\120\13\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\1\121\13\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\22\0\1\122"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\14\5\3\0\1\5\2\0\1\5\1\123"+
    "\13\5\1\0\11\5\46\0\1\55\21\0\1\55\11\0"+
    "\1\55\1\0\2\56\24\0\1\57\1\124\12\0\1\124"+
    "\37\0\2\125\100\0\2\126\1\0\1\126\23\0\1\126"+
    "\3\0\1\126\3\0\2\126\1\0\1\126\10\0\1\126"+
    "\1\0\1\126\6\0\1\126\10\0\1\126\3\0\10\127"+
    "\1\130\71\127\44\63\4\0\32\63\13\0\1\2\67\0"+
    "\5\5\22\0\2\5\1\131\11\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\5\5\1\132"+
    "\6\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\7\5\1\133\4\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\14\5\3\0"+
    "\1\5\2\0\1\134\14\5\1\0\11\5\2\0\5\5"+
    "\22\0\12\5\1\135\1\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\7\5\1\136\4\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\6\5\1\137\5\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\2\5\1\140\11\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\12\5\1\141\1\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\6\5\1\142\5\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\1\0\44\103"+
    "\4\0\32\103\1\0\5\5\22\0\2\5\1\143\11\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\14\5\3\0\1\5\2\0\7\5\1\144\5\5"+
    "\1\0\11\5\2\0\5\5\22\0\1\145\13\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\22\0"+
    "\14\5\3\0\1\5\2\0\1\5\1\146\13\5\1\0"+
    "\11\5\2\0\5\5\22\0\11\5\1\147\2\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\22\0"+
    "\14\5\3\0\1\5\2\0\1\150\14\5\1\0\11\5"+
    "\2\0\5\5\22\0\14\5\3\0\1\5\2\0\10\5"+
    "\1\151\4\5\1\0\11\5\2\0\5\5\22\0\14\5"+
    "\3\0\1\5\2\0\1\152\14\5\1\0\11\5\2\0"+
    "\5\5\22\0\12\5\1\153\1\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\11\5\1\154"+
    "\2\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\2\5\1\155\11\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\2\5\1\156"+
    "\11\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\14\5\3\0\1\5\2\0\1\157\14\5"+
    "\1\0\11\5\2\0\1\160\1\161\100\0\2\125\25\0"+
    "\1\124\12\0\1\124\36\0\10\127\1\130\1\162\70\127"+
    "\1\0\5\5\22\0\1\163\13\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\1\164\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\1\165\13\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\5\5\1\166\6\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\22\0"+
    "\12\5\1\167\1\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\14\5\3\0\1\5\2\0"+
    "\2\5\1\170\12\5\1\0\11\5\2\0\5\5\22\0"+
    "\14\5\3\0\1\5\2\0\1\171\14\5\1\0\11\5"+
    "\2\0\5\5\22\0\7\5\1\172\4\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\22\0\5\5"+
    "\1\133\6\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\22\0\1\173\13\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\12\5\1\174"+
    "\1\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\11\5\1\175\2\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\12\5\1\176"+
    "\1\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\5\5\1\177\6\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\12\5\1\200"+
    "\1\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\14\5\3\0\1\5\2\0\13\5\1\201"+
    "\1\5\1\0\11\5\2\0\5\5\22\0\3\5\1\202"+
    "\10\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\12\5\1\203\1\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\4\5\1\204"+
    "\7\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\14\5\3\0\1\5\2\0\15\5\1\0"+
    "\6\5\1\205\2\5\2\0\5\5\22\0\14\5\3\0"+
    "\1\5\2\0\15\5\1\0\6\5\1\206\2\5\2\0"+
    "\5\5\22\0\4\5\1\207\7\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\1\0\1\210\2\160\41\210\4\0"+
    "\33\210\2\160\1\211\25\210\1\211\12\210\4\0\32\210"+
    "\1\0\5\5\22\0\3\5\1\212\10\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\22\0\12\5"+
    "\1\213\1\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\22\0\3\5\1\214\10\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\22\0\6\5"+
    "\1\215\5\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\22\0\6\5\1\216\5\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\22\0\1\217"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\14\5\3\0\1\5\2\0\11\5\1\220"+
    "\3\5\1\0\11\5\2\0\5\5\22\0\5\5\1\221"+
    "\6\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\1\222\13\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\6\5\1\223\5\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\2\5\1\224\11\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\14\5\3\0\1\5"+
    "\2\0\1\5\1\225\13\5\1\0\11\5\2\0\5\5"+
    "\22\0\14\5\3\0\1\5\2\0\15\5\1\0\3\5"+
    "\1\226\1\227\4\5\2\0\5\5\22\0\14\5\3\0"+
    "\1\5\2\0\14\5\1\230\1\0\11\5\2\0\5\5"+
    "\22\0\14\5\3\0\1\5\2\0\14\5\1\231\1\0"+
    "\11\5\2\0\2\210\100\0\2\232\1\0\1\232\23\0"+
    "\1\232\3\0\1\232\3\0\2\232\1\0\1\232\10\0"+
    "\1\232\1\0\1\232\6\0\1\232\10\0\1\232\4\0"+
    "\5\5\22\0\4\5\1\233\7\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\1\234\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\14\5\3\0\1\5\2\0\3\5\1\235\11\5"+
    "\1\0\11\5\2\0\5\5\22\0\3\5\1\236\10\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\10\5\1\237\3\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\14\5\3\0\1\5"+
    "\2\0\6\5\1\240\6\5\1\0\11\5\2\0\5\5"+
    "\22\0\6\5\1\241\5\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\14\5\3\0\1\5"+
    "\2\0\4\5\1\242\10\5\1\0\11\5\2\0\5\5"+
    "\22\0\3\5\1\243\10\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\14\5\3\0\1\5"+
    "\2\0\1\244\14\5\1\0\11\5\2\0\5\5\22\0"+
    "\2\5\1\245\11\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\2\5\1\246\11\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\1\0\1\210\2\232"+
    "\1\210\1\232\23\210\1\232\3\210\1\232\3\210\2\232"+
    "\1\210\1\232\4\0\4\210\1\232\1\210\1\232\6\210"+
    "\1\232\10\210\1\232\3\210\1\0\5\5\22\0\5\5"+
    "\1\247\6\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\2\0\5\5\22\0\11\5\1\250\2\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\22\0\1\251"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\11\5\1\252\2\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\2\5\1\253"+
    "\11\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\3\5\1\254\10\5\3\0\1\5\2\0"+
    "\15\5\1\0\11\5\2\0\5\5\22\0\1\255\13\5"+
    "\3\0\1\5\2\0\15\5\1\0\11\5\2\0\5\5"+
    "\22\0\1\256\13\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\14\5\3\0\1\5\2\0"+
    "\4\5\1\257\10\5\1\0\11\5\2\0\5\5\22\0"+
    "\3\5\1\260\10\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\14\5\3\0\1\5\2\0"+
    "\14\5\1\261\1\0\11\5\2\0\5\5\22\0\1\262"+
    "\13\5\3\0\1\5\2\0\15\5\1\0\11\5\2\0"+
    "\5\5\22\0\1\263\13\5\3\0\1\5\2\0\15\5"+
    "\1\0\11\5\2\0\5\5\22\0\1\264\13\5\3\0"+
    "\1\5\2\0\15\5\1\0\11\5\2\0\5\5\22\0"+
    "\2\5\1\265\11\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\14\5\3\0\1\5\2\0"+
    "\3\5\1\266\11\5\1\0\11\5\2\0\5\5\22\0"+
    "\5\5\1\267\6\5\3\0\1\5\2\0\15\5\1\0"+
    "\11\5\2\0\5\5\22\0\1\270\13\5\3\0\1\5"+
    "\2\0\15\5\1\0\11\5\2\0\5\5\22\0\6\5"+
    "\1\271\5\5\3\0\1\5\2\0\15\5\1\0\11\5"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9306];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\2\11\1\1\1\11\1\1\4\11"+
    "\30\1\2\0\1\11\2\1\1\11\1\0\3\11\12\1"+
    "\1\0\1\11\1\0\16\1\1\0\2\1\2\0\31\1"+
    "\1\11\107\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public LinkedList<TError> TablaEL = new LinkedList<TError>(); 
public String lexeme;
public int lineNumber = 0;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; System.out.println("Error Léxico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
                          try {
                            Interfaz.getInterfaz().AddTextToJTextArea("Error Léxico. Lexema: "+lexeme+"\tFila: " + (yyline+1) + "\tColumna: "+ (yycolumn+1)+"\n");
                          } catch (BadLocationException ex) {
                              System.out.println("Error escribiendo");
                              Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
                          }
            }
          case 52: break;
          case 2: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.intCnst, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 3: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; if(lexeme.length() > 31){
                        lexeme = lexeme.substring(0,31);
                        try {
                    Interfaz.getInterfaz().AddTextToJTextArea("Identificador Truncado\n");
                } catch (BadLocationException ex) {
                    Logger.getLogger(Lexer.class.getName()).log(Level.SEVERE, null, ex);
                }
                    }  
                return new Symbol(sym.ident, yycolumn, yyline, lexeme);
            }
          case 54: break;
          case 4: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.arop, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 5: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.minus, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 6: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.cmpop, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 7: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.equals, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 8: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.neg, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 9: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.prnthss_A, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 10: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.prnthss_C, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 11: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.curly_A, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 12: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.curly_C, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 13: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.brackets_A, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 14: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.brackets_C, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 15: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.pyc, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 16: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.comma, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 17: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.dot, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 18: 
            { chars = 0; lineNumber=yyline; lexeme="\n"; lineNumber = yyline;
            }
          case 69: break;
          case 19: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline;
            }
          case 70: break;
          case 20: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
                          try {
                            Interfaz.getInterfaz().AddTextToJTextArea("Error Léxico. Lexema: "+lexeme+"\tFila: " + (yyline+1) + "\tColumna: "+ (yycolumn+1)+"\n");
                          } catch (BadLocationException ex) {
                              System.out.println("Error escribiendo");
                              Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
                          }
            }
          case 71: break;
          case 21: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; lineNumber=yyline;} lexeme=yytext();
            }
          case 72: break;
          case 22: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.logop, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 23: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.brackets, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 24: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline; return new Symbol(sym.strConst, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 25: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_if, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 26: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline;return new Symbol(sym.dblConst, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 27: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_for, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 28: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_int, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 29: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline; return new Symbol(sym.t_new, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 30: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_else, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 31: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.bolCnst, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 32: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_this, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 33: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_null, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 34: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_bool, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 35: 
            { chars += yytext().length(); lexeme=yytext(); lineNumber=yyline; return new Symbol(sym.t_void, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 36: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_break, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 37: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.clase, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 38: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_while, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 39: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.print, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 40: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_double, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 41: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_string, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 42: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_return, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 43: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.malloc, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 44: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.extend, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 45: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.getByte, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 46: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.setByte, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 47: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_newArr, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 48: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.ReadLine, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 49: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_interface, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 50: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.t_implements, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 51: 
            { chars += yytext().length(); lexeme=yytext();lineNumber=yyline; return new Symbol(sym.readInteger, yycolumn, yyline, yytext());
            }
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
