
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 10 17:57:05 CST 2018
//----------------------------------------------------

package php.scanner;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 10 17:57:05 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\003\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\010\002\000" +
    "\002\010\004\000\002\005\004\000\002\012\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\006\010" +
    "\000\002\006\010\000\002\014\003\000\002\014\002\000" +
    "\002\002\003\000\002\002\005\000\002\007\011\000\002" +
    "\032\004\000\002\032\002\000\002\017\004\000\002\017" +
    "\002\000\002\020\004\000\002\020\002\000\002\044\003" +
    "\000\002\044\005\000\002\016\003\000\002\016\003\000" +
    "\002\011\007\000\002\042\004\000\002\042\002\000\002" +
    "\021\010\000\002\021\010\000\002\022\004\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\015\006\000\002\024\007\000\002" +
    "\024\011\000\002\033\004\000\002\033\002\000\002\034" +
    "\004\000\002\034\002\000\002\025\007\000\002\026\013" +
    "\000\002\030\005\000\002\027\004\000\002\031\007\000" +
    "\002\043\003\000\002\043\002\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\004\000" +
    "\002\023\004\000\002\023\006\000\002\023\010\000\002" +
    "\023\005\000\002\023\005\000\002\023\006\000\002\035" +
    "\003\000\002\035\005\000\002\035\006\000\002\037\006" +
    "\000\002\037\010\000\002\037\010\000\002\041\006\000" +
    "\002\041\010\000\002\040\003\000\002\040\002\000\002" +
    "\045\003\000\002\045\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\024\003\020\010\013\012\017\013\015\014" +
    "\016\015\012\021\021\025\022\027\024\001\002\000\006" +
    "\010\306\020\047\001\002\000\026\002\uffff\003\uffff\010" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\021\uffff\025\uffff" +
    "\027\uffff\001\002\000\026\002\ufffc\003\ufffc\010\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\021\ufffc\025\ufffc\027\ufffc" +
    "\001\002\000\026\002\ufff9\003\ufff9\010\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\021\ufff9\025\ufff9\027\ufff9\001\002" +
    "\000\004\011\303\001\002\000\004\002\302\001\002\000" +
    "\010\010\ufff2\020\ufff2\023\ufff2\001\002\000\010\010\ufff1" +
    "\020\ufff1\023\ufff1\001\002\000\026\002\ufffd\003\ufffd\010" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\021\ufffd\025\ufffd" +
    "\027\ufffd\001\002\000\010\010\ufff4\020\ufff4\023\ufff4\001" +
    "\002\000\010\010\ufff3\020\ufff3\023\ufff3\001\002\000\010" +
    "\010\ufff5\020\ufff5\023\ufff5\001\002\000\006\011\300\057" +
    "\301\001\002\000\004\010\075\001\002\000\004\010\055" +
    "\001\002\000\026\002\ufffe\003\ufffe\010\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\021\ufffe\025\ufffe\027\ufffe\001\002" +
    "\000\004\010\025\001\002\000\004\056\026\001\002\000" +
    "\020\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\021\uffdc" +
    "\057\uffdc\001\002\000\020\010\013\012\017\013\015\014" +
    "\016\015\012\021\031\057\032\001\002\000\006\010\050" +
    "\020\047\001\002\000\004\010\034\001\002\000\026\002" +
    "\uffde\003\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\021\uffde\025\uffde\027\uffde\001\002\000\020\010\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\021\uffdd\057\uffdd\001\002" +
    "\000\004\022\035\001\002\000\016\010\013\012\017\013" +
    "\015\014\016\015\012\023\uffec\001\002\000\006\010\046" +
    "\020\047\001\002\000\006\023\uffeb\024\uffeb\001\002\000" +
    "\004\023\044\001\002\000\006\023\uffed\024\042\001\002" +
    "\000\014\010\013\012\017\013\015\014\016\015\012\001" +
    "\002\000\006\023\uffea\024\uffea\001\002\000\004\011\045" +
    "\001\002\000\020\010\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\021\uffda\057\uffda\001\002\000\010\011\ufff6\023\ufff6" +
    "\024\ufff6\001\002\000\010\010\ufff0\020\ufff0\023\ufff0\001" +
    "\002\000\004\022\051\001\002\000\016\010\013\012\017" +
    "\013\015\014\016\015\012\023\uffec\001\002\000\004\023" +
    "\053\001\002\000\004\011\054\001\002\000\020\010\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\021\uffdb\057\uffdb\001" +
    "\002\000\010\026\uffe5\056\uffe5\060\056\001\002\000\004" +
    "\010\074\001\002\000\006\026\060\056\uffe3\001\002\000" +
    "\004\010\070\001\002\000\004\056\062\001\002\000\020" +
    "\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\021\uffe7\057" +
    "\uffe7\001\002\000\020\010\013\012\017\013\015\014\016" +
    "\015\012\021\021\057\066\001\002\000\020\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\021\uffe0\057\uffe0\001\002" +
    "\000\020\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\021" +
    "\uffe8\057\uffe8\001\002\000\026\002\uffe9\003\uffe9\010\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\021\uffe9\025\uffe9\027" +
    "\uffe9\001\002\000\020\010\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\021\uffdf\057\uffdf\001\002\000\006\024\uffe2\056" +
    "\uffe2\001\002\000\006\024\072\056\uffe4\001\002\000\004" +
    "\010\073\001\002\000\006\024\uffe1\056\uffe1\001\002\000" +
    "\006\026\uffe6\056\uffe6\001\002\000\004\022\076\001\002" +
    "\000\016\010\013\012\017\013\015\014\016\015\012\023" +
    "\uffec\001\002\000\004\023\100\001\002\000\004\056\101" +
    "\001\002\000\072\004\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\022\uffcc\030\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\056\uffcc\057\uffcc\061\uffcc\001\002\000\030\002" +
    "\uffee\003\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\021\uffee\025\uffee\027\uffee\057\uffee\001\002\000\072\004" +
    "\113\010\127\011\130\012\017\013\015\014\016\015\012" +
    "\016\104\017\142\022\131\030\120\032\106\033\147\034" +
    "\115\035\140\036\143\037\146\042\116\043\117\044\126" +
    "\045\125\047\133\050\121\051\111\052\123\056\101\057" +
    "\uffca\061\122\001\002\000\026\004\uffa3\005\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\023\uffa3\024\uffa3\040\uffa3\041\uffa3\046" +
    "\uffa3\001\002\000\064\004\uffd3\010\uffd3\011\uffd3\016\uffd3" +
    "\017\uffd3\022\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\056\uffd3\057" +
    "\uffd3\061\uffd3\001\002\000\004\022\270\001\002\000\004" +
    "\057\267\001\002\000\026\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\011\uffc1\023\uffc1\024\uffc1\040\uffc1\041\uffc1\046\uffc1" +
    "\001\002\000\026\004\uffa1\005\uffa1\006\uffa1\007\uffa1\011" +
    "\uffa1\023\uffa1\024\uffa1\040\uffa1\041\uffa1\046\uffa1\001\002" +
    "\000\064\004\uffd5\010\uffd5\011\uffd5\016\uffd5\017\uffd5\022" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\056\uffd5\057\uffd5\061\uffd5" +
    "\001\002\000\040\004\113\010\152\016\104\017\142\022" +
    "\131\037\146\042\116\043\117\044\126\045\125\047\133" +
    "\050\121\051\111\052\123\061\122\001\002\000\064\004" +
    "\uffd2\010\uffd2\011\uffd2\016\uffd2\017\uffd2\022\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\056\uffd2\057\uffd2\061\uffd2\001\002\000" +
    "\042\004\113\010\152\011\uffc3\016\104\017\142\022\131" +
    "\037\146\042\116\043\117\044\126\045\125\047\133\050" +
    "\121\051\111\052\123\061\122\001\002\000\040\004\113" +
    "\010\152\016\104\017\142\022\131\037\146\042\116\043" +
    "\117\044\126\045\125\047\133\050\121\051\111\052\123" +
    "\061\122\001\002\000\004\022\257\001\002\000\004\022" +
    "\251\001\002\000\026\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\011\uffa5\023\uffa5\024\uffa5\040\uffa5\041\uffa5\046\uffa5\001" +
    "\002\000\004\022\246\001\002\000\004\022\241\001\002" +
    "\000\064\004\uffd6\010\uffd6\011\uffd6\016\uffd6\017\uffd6\022" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\056\uffd6\057\uffd6\061\uffd6" +
    "\001\002\000\004\022\237\001\002\000\004\022\235\001" +
    "\002\000\030\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\ufff1" +
    "\011\uffb1\020\ufff1\022\153\040\uffb1\046\uffb1\055\uffb1\001" +
    "\002\000\064\004\uffd8\010\uffd8\011\uffd8\016\uffd8\017\uffd8" +
    "\022\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\056\uffd8\057\uffd8\061" +
    "\uffd8\001\002\000\040\004\113\010\152\016\104\017\142" +
    "\022\131\037\146\042\116\043\117\044\126\045\125\047" +
    "\133\050\121\051\111\052\123\061\122\001\002\000\064" +
    "\004\uffd1\010\uffd1\011\uffd1\016\uffd1\017\uffd1\022\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\056\uffd1\057\uffd1\061\uffd1\001\002" +
    "\000\026\004\uffa4\005\uffa4\006\uffa4\007\uffa4\011\uffa4\023" +
    "\uffa4\024\uffa4\040\uffa4\041\uffa4\046\uffa4\001\002\000\064" +
    "\004\uffd7\010\uffd7\011\uffd7\016\uffd7\017\uffd7\022\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\056\uffd7\057\uffd7\061\uffd7\001\002" +
    "\000\020\004\163\005\157\006\162\007\160\011\232\040" +
    "\164\046\161\001\002\000\030\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\011\uffc0\023\uffc0\024\uffc0\040\uffc0\041\uffc0\046" +
    "\uffc0\055\230\001\002\000\072\004\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\022" +
    "\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\056\uffcd\057\uffcd\061\uffcd\001\002" +
    "\000\004\011\227\001\002\000\062\004\113\010\152\011" +
    "\130\016\104\017\142\022\131\030\120\032\106\033\147" +
    "\034\115\035\140\036\143\037\146\042\116\043\117\044" +
    "\126\045\125\047\133\050\121\051\111\052\123\056\101" +
    "\057\uffca\061\122\001\002\000\026\004\uffa2\005\uffa2\006" +
    "\uffa2\007\uffa2\011\uffa2\023\uffa2\024\uffa2\040\uffa2\041\uffa2" +
    "\046\uffa2\001\002\000\004\022\222\001\002\000\026\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\023\uffbe\024\uffbe" +
    "\040\uffbe\041\uffbe\046\uffbe\001\002\000\064\004\uffd4\010" +
    "\uffd4\011\uffd4\016\uffd4\017\uffd4\022\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\056\uffd4\057\uffd4\061\uffd4\001\002\000\026\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\023\uffbf\024\uffbf" +
    "\040\uffbf\041\uffbf\046\uffbf\001\002\000\004\022\150\001" +
    "\002\000\040\004\113\010\152\016\104\017\142\022\131" +
    "\037\146\042\116\043\117\044\126\045\125\047\133\050" +
    "\121\051\111\052\123\061\122\001\002\000\020\004\163" +
    "\005\157\006\162\007\160\023\220\040\164\046\161\001" +
    "\002\000\032\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1" +
    "\022\153\023\uffb1\024\uffb1\040\uffb1\041\uffb1\046\uffb1\055" +
    "\uffb1\001\002\000\042\004\113\010\152\016\104\017\142" +
    "\022\131\023\uffa8\037\146\042\116\043\117\044\126\045" +
    "\125\047\133\050\121\051\111\052\123\061\122\001\002" +
    "\000\004\023\217\001\002\000\006\023\uffa9\024\215\001" +
    "\002\000\022\004\163\005\157\006\162\007\160\023\uffa7" +
    "\024\uffa7\040\164\046\161\001\002\000\040\004\113\010" +
    "\152\016\104\017\142\022\131\037\146\042\116\043\117" +
    "\044\126\045\125\047\133\050\121\051\111\052\123\061" +
    "\122\001\002\000\040\004\113\010\152\016\104\017\142" +
    "\022\131\037\146\042\116\043\117\044\126\045\125\047" +
    "\133\050\121\051\111\052\123\061\122\001\002\000\010" +
    "\010\173\053\171\054\172\001\002\000\040\004\113\010" +
    "\152\016\104\017\142\022\131\037\146\042\116\043\117" +
    "\044\126\045\125\047\133\050\121\051\111\052\123\061" +
    "\122\001\002\000\040\004\113\010\152\016\104\017\142" +
    "\022\131\037\146\042\116\043\117\044\126\045\125\047" +
    "\133\050\121\051\111\052\123\061\122\001\002\000\040" +
    "\004\113\010\152\016\104\017\142\022\131\037\146\042" +
    "\116\043\117\044\126\045\125\047\133\050\121\051\111" +
    "\052\123\061\122\001\002\000\020\004\163\005\157\006" +
    "\162\007\160\040\164\041\166\046\161\001\002\000\030" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\023\uffaf\024" +
    "\uffaf\040\uffaf\041\uffaf\046\uffaf\055\uffaf\001\002\000\026" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\023\uffb9\024" +
    "\uffb9\040\164\041\uffb9\046\161\001\002\000\024\004\163" +
    "\005\157\007\uffba\011\uffba\023\uffba\024\uffba\040\164\041" +
    "\uffba\046\161\001\002\000\004\022\210\001\002\000\004" +
    "\022\203\001\002\000\032\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\022\200\023\uffb0\024\uffb0\040\uffb0\041\uffb0" +
    "\046\uffb0\055\uffb0\001\002\000\004\022\175\001\002\000" +
    "\042\004\113\010\152\016\104\017\142\022\131\023\uffa8" +
    "\037\146\042\116\043\117\044\126\045\125\047\133\050" +
    "\121\051\111\052\123\061\122\001\002\000\004\023\177" +
    "\001\002\000\026\004\uffac\005\uffac\006\uffac\007\uffac\011" +
    "\uffac\023\uffac\024\uffac\040\uffac\041\uffac\046\uffac\001\002" +
    "\000\042\004\113\010\152\016\104\017\142\022\131\023" +
    "\uffa8\037\146\042\116\043\117\044\126\045\125\047\133" +
    "\050\121\051\111\052\123\061\122\001\002\000\004\023" +
    "\202\001\002\000\026\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\011\uffad\023\uffad\024\uffad\040\uffad\041\uffad\046\uffad\001" +
    "\002\000\040\004\113\010\152\016\104\017\142\022\131" +
    "\037\146\042\116\043\117\044\126\045\125\047\133\050" +
    "\121\051\111\052\123\061\122\001\002\000\020\004\163" +
    "\005\157\006\162\007\160\024\205\040\164\046\161\001" +
    "\002\000\040\004\113\010\152\016\104\017\142\022\131" +
    "\037\146\042\116\043\117\044\126\045\125\047\133\050" +
    "\121\051\111\052\123\061\122\001\002\000\020\004\163" +
    "\005\157\006\162\007\160\023\207\040\164\046\161\001" +
    "\002\000\004\022\uffaa\001\002\000\040\004\113\010\152" +
    "\016\104\017\142\022\131\037\146\042\116\043\117\044" +
    "\126\045\125\047\133\050\121\051\111\052\123\061\122" +
    "\001\002\000\020\004\163\005\157\006\162\007\160\023" +
    "\212\040\164\046\161\001\002\000\004\022\uffab\001\002" +
    "\000\026\004\163\005\157\006\162\007\uffbb\011\uffbb\023" +
    "\uffbb\024\uffbb\040\164\041\uffbb\046\161\001\002\000\026" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\023\uffbc\024" +
    "\uffbc\040\164\041\uffbc\046\161\001\002\000\040\004\113" +
    "\010\152\016\104\017\142\022\131\037\146\042\116\043" +
    "\117\044\126\045\125\047\133\050\121\051\111\052\123" +
    "\061\122\001\002\000\022\004\163\005\157\006\162\007" +
    "\160\023\uffa6\024\uffa6\040\164\046\161\001\002\000\026" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\023\uffae\024" +
    "\uffae\040\uffae\041\uffae\046\uffae\001\002\000\060\004\113" +
    "\010\152\011\130\016\104\017\142\022\131\030\120\032" +
    "\106\033\147\034\115\035\140\036\143\037\146\042\116" +
    "\043\117\044\126\045\125\047\133\050\121\051\111\052" +
    "\123\056\101\061\122\001\002\000\064\004\uffc9\010\uffc9" +
    "\011\uffc9\016\uffc9\017\uffc9\022\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\056\uffc9\057\uffc9\061\uffc9\001\002\000\040\004\113" +
    "\010\152\016\104\017\142\022\131\037\146\042\116\043" +
    "\117\044\126\045\125\047\133\050\121\051\111\052\123" +
    "\061\122\001\002\000\006\023\224\024\215\001\002\000" +
    "\004\011\225\001\002\000\064\004\uffc5\010\uffc5\011\uffc5" +
    "\016\uffc5\017\uffc5\022\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\056" +
    "\uffc5\057\uffc5\061\uffc5\001\002\000\004\057\uffcb\001\002" +
    "\000\064\004\uffc6\010\uffc6\011\uffc6\016\uffc6\017\uffc6\022" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\056\uffc6\057\uffc6\061\uffc6" +
    "\001\002\000\040\004\113\010\152\016\104\017\142\022" +
    "\131\037\146\042\116\043\117\044\126\045\125\047\133" +
    "\050\121\051\111\052\123\061\122\001\002\000\026\004" +
    "\163\005\157\006\162\007\160\011\uffc2\023\uffc2\024\uffc2" +
    "\040\164\041\uffc2\046\161\001\002\000\064\004\uffd9\010" +
    "\uffd9\011\uffd9\016\uffd9\017\uffd9\022\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\056\uffd9\057\uffd9\061\uffd9\001\002\000\020\004" +
    "\163\005\157\006\162\007\160\023\234\040\164\046\161" +
    "\001\002\000\026\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011" +
    "\uffbd\023\uffbd\024\uffbd\040\uffbd\041\uffbd\046\uffbd\001\002" +
    "\000\004\023\236\001\002\000\026\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\011\uffb4\023\uffb4\024\uffb4\040\uffb4\041\uffb4" +
    "\046\uffb4\001\002\000\004\023\240\001\002\000\026\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\023\uffb3\024\uffb3" +
    "\040\uffb3\041\uffb3\046\uffb3\001\002\000\040\004\113\010" +
    "\152\016\104\017\142\022\131\037\146\042\116\043\117" +
    "\044\126\045\125\047\133\050\121\051\111\052\123\061" +
    "\122\001\002\000\020\004\163\005\157\006\162\007\160" +
    "\024\243\040\164\046\161\001\002\000\014\010\013\012" +
    "\017\013\015\014\016\015\012\001\002\000\006\020\047" +
    "\023\245\001\002\000\026\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\011\uffb5\023\uffb5\024\uffb5\040\uffb5\041\uffb5\046\uffb5" +
    "\001\002\000\004\010\247\001\002\000\004\023\250\001" +
    "\002\000\026\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6" +
    "\023\uffb6\024\uffb6\040\uffb6\041\uffb6\046\uffb6\001\002\000" +
    "\040\004\113\010\152\016\104\017\142\022\131\037\146" +
    "\042\116\043\117\044\126\045\125\047\133\050\121\051" +
    "\111\052\123\061\122\001\002\000\020\004\163\005\157" +
    "\006\162\007\160\023\253\040\164\046\161\001\002\000" +
    "\060\004\113\010\152\011\130\016\104\017\142\022\131" +
    "\030\120\032\106\033\147\034\115\035\140\036\143\037" +
    "\146\042\116\043\117\044\126\045\125\047\133\050\121" +
    "\051\111\052\123\056\101\061\122\001\002\000\064\004" +
    "\uffcf\010\uffcf\011\uffcf\016\uffcf\017\uffcf\022\uffcf\030\uffcf" +
    "\031\255\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\056\uffcf\057\uffcf\061\uffcf\001\002\000" +
    "\060\004\113\010\152\011\130\016\104\017\142\022\131" +
    "\030\120\032\106\033\147\034\115\035\140\036\143\037" +
    "\146\042\116\043\117\044\126\045\125\047\133\050\121" +
    "\051\111\052\123\056\101\061\122\001\002\000\064\004" +
    "\uffce\010\uffce\011\uffce\016\uffce\017\uffce\022\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\056\uffce\057\uffce\061\uffce\001\002\000" +
    "\040\004\113\010\152\016\104\017\142\022\131\037\146" +
    "\042\116\043\117\044\126\045\125\047\133\050\121\051" +
    "\111\052\123\061\122\001\002\000\020\004\163\005\157" +
    "\006\162\007\160\023\261\040\164\046\161\001\002\000" +
    "\026\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\023\uffb2" +
    "\024\uffb2\040\uffb2\041\uffb2\046\uffb2\001\002\000\026\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7\023\uffb7\024\uffb7" +
    "\040\164\041\uffb7\046\161\001\002\000\022\004\163\005" +
    "\157\006\162\007\160\011\uffc4\023\uffc4\040\164\046\161" +
    "\001\002\000\004\011\265\001\002\000\064\004\uffc7\010" +
    "\uffc7\011\uffc7\016\uffc7\017\uffc7\022\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\056\uffc7\057\uffc7\061\uffc7\001\002\000\026\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\023\uffb8\024\uffb8" +
    "\040\164\041\uffb8\046\161\001\002\000\106\002\uffd0\003" +
    "\uffd0\004\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\056\uffd0\057\uffd0\061\uffd0" +
    "\001\002\000\042\004\113\010\152\011\uffc3\016\104\017" +
    "\142\022\131\037\146\042\116\043\117\044\126\045\125" +
    "\047\133\050\121\051\111\052\123\061\122\001\002\000" +
    "\004\011\272\001\002\000\040\004\113\010\152\016\104" +
    "\017\142\022\131\037\146\042\116\043\117\044\126\045" +
    "\125\047\133\050\121\051\111\052\123\061\122\001\002" +
    "\000\020\004\163\005\157\006\162\007\160\011\274\040" +
    "\164\046\161\001\002\000\042\004\113\010\152\016\104" +
    "\017\142\022\131\023\uffc3\037\146\042\116\043\117\044" +
    "\126\045\125\047\133\050\121\051\111\052\123\061\122" +
    "\001\002\000\004\023\276\001\002\000\060\004\113\010" +
    "\152\011\130\016\104\017\142\022\131\030\120\032\106" +
    "\033\147\034\115\035\140\036\143\037\146\042\116\043" +
    "\117\044\126\045\125\047\133\050\121\051\111\052\123" +
    "\056\101\061\122\001\002\000\064\004\uffc8\010\uffc8\011" +
    "\uffc8\016\uffc8\017\uffc8\022\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\056\uffc8\057\uffc8\061\uffc8\001\002\000\026\002\ufffb\003" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\021\ufffb" +
    "\025\ufffb\027\ufffb\001\002\000\026\002\ufffa\003\ufffa\010" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\021\ufffa\025\ufffa" +
    "\027\ufffa\001\002\000\004\002\001\001\002\000\104\002" +
    "\ufff7\003\ufff7\004\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\025" +
    "\ufff7\027\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\056\ufff7\057\ufff7\061\ufff7" +
    "\001\002\000\026\002\000\003\020\010\013\012\017\013" +
    "\015\014\016\015\012\021\021\025\022\027\024\001\002" +
    "\000\026\002\ufff8\003\ufff8\010\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\021\ufff8\025\ufff8\027\ufff8\001\002\000\006" +
    "\011\ufff6\022\307\001\002\000\016\010\013\012\017\013" +
    "\015\014\016\015\012\023\uffec\001\002\000\004\023\311" +
    "\001\002\000\004\056\101\001\002\000\030\002\uffef\003" +
    "\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef\021\uffef" +
    "\025\uffef\027\uffef\057\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\022\003\010\004\006\005\004\006\022\007" +
    "\013\011\005\012\007\013\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\026\001\001\000\006" +
    "\013\027\021\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\040\012\036\013\035\014\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\042\013\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\040\012" +
    "\036\013\035\014\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\056\001\001\000" +
    "\002\001\001\000\004\020\060\001\001\000\004\044\070" +
    "\001\001\000\002\001\001\000\004\032\062\001\001\000" +
    "\014\005\063\006\066\012\007\013\003\016\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\040\012\036\013\035\014\076\001\001" +
    "\000\002\001\001\000\004\015\101\001\001\000\004\033" +
    "\102\001\001\000\002\001\001\000\042\005\136\012\007" +
    "\013\035\015\131\022\140\023\134\024\133\025\123\026" +
    "\111\027\144\030\104\031\113\034\106\035\135\036\107" +
    "\037\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\265\035\135\036" +
    "\107\037\143\001\001\000\002\001\001\000\014\023\262" +
    "\035\135\036\107\037\143\043\263\001\001\000\012\023" +
    "\261\035\135\036\107\037\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\232\035\135\036\107\037\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\015\131\022\140\023\134\024\133\025\123\026\111\027" +
    "\144\030\104\031\113\034\225\035\135\036\107\037\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\150\035\135\036\107\037\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\155\035\135" +
    "\036\107\037\143\040\153\045\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\213" +
    "\035\135\036\107\037\143\001\001\000\012\023\212\035" +
    "\135\036\107\037\143\001\001\000\004\041\173\001\001" +
    "\000\012\023\167\035\135\036\107\037\143\001\001\000" +
    "\012\023\166\035\135\036\107\037\143\001\001\000\012" +
    "\023\164\035\135\036\107\037\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\155\035\135\036\107\037\143" +
    "\040\175\045\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\155\035\135\036\107\037\143\040\200" +
    "\045\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\203\035\135\036\107\037\143\001\001\000\002" +
    "\001\001\000\012\023\205\035\135\036\107\037\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\210" +
    "\035\135\036\107\037\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\215\035\135\036\107\037\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\015\131\022\220\023\134" +
    "\024\133\025\123\026\111\027\144\030\104\031\113\035" +
    "\135\036\107\037\143\001\001\000\002\001\001\000\014" +
    "\023\155\035\135\036\107\037\143\045\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\230\035\135\036" +
    "\107\037\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\241\035\135\036\107\037\143\001\001\000\002\001" +
    "\001\000\004\013\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\251\035\135\036\107\037\143\001\001" +
    "\000\002\001\001\000\032\015\131\022\253\023\134\024" +
    "\133\025\123\026\111\027\144\030\104\031\113\035\135" +
    "\036\107\037\143\001\001\000\002\001\001\000\032\015" +
    "\131\022\255\023\134\024\133\025\123\026\111\027\144" +
    "\030\104\031\113\035\135\036\107\037\143\001\001\000" +
    "\002\001\001\000\012\023\257\035\135\036\107\037\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\262\035" +
    "\135\036\107\037\143\043\270\001\001\000\002\001\001" +
    "\000\012\023\272\035\135\036\107\037\143\001\001\000" +
    "\002\001\001\000\014\023\262\035\135\036\107\037\143" +
    "\043\274\001\001\000\002\001\001\000\032\015\131\022" +
    "\276\023\134\024\133\025\123\026\111\027\144\030\104" +
    "\031\113\035\135\036\107\037\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\304\005\004\006\022\007" +
    "\013\011\005\012\007\013\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\040\012\036\013\035\014" +
    "\307\001\001\000\002\001\001\000\004\015\311\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<TError> TablaES = new LinkedList<TError>();


    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Constant ::= t_null 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Constant ::= strConst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Constant ::= bolCnst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Constant ::= dblConst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Constant ::= intCnst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprList ::= ExprList comma Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Actuals ::= ExprList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LibCall ::= setByte prnthss_A Expr comma Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LibCall ::= getByte prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Call ::= Expr dot LibCall prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Call ::= Expr dot ident prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Call ::= ident prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LValue ::= Expr brackets_A Expr brackets_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LValue ::= Expr dot ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LValue ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= malloc prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= ReadLine prnthss_A prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= readInteger prnthss_A prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= t_newArr prnthss_A Expr comma Type prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= t_new prnthss_A ident prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= neg Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= minus Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr minus Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr cmpop Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr logop Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr arop Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= t_this 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= LValue equals Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExprOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprOptional ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PrintStmt ::= print prnthss_A ExprList prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BreakStmt ::= t_break pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ReturnStmt ::= t_return ExprOptional pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ForStmt ::= t_for prnthss_A ExprOptional pyc Expr pyc ExprOptional prnthss_C Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WhileStmt ::= t_while prnthss_A Expr prnthss_C Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StmtStar ::= Stmt StmtStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VariableDeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VariableDeclStar ::= VariableDeclStar VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt t_else Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtBlock ::= curly_A VariableDeclStar StmtStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stmt ::= pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stmt ::= Expr pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Prototype ::= t_void ident prnthss_A Formals prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Prototype ::= Type ident prnthss_A Formals prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PrototypeStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrototypeStar ::= PrototypeStar Prototype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InterfaceDecl ::= t_interface ident curly_A PrototypeStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IdentList ::= IdentList comma ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IdentList ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ImplementsIdentPlusCommaOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ImplementsIdentPlusCommaOptional ::= t_implements IdentList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExtendsIdentOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExtendsIdentOptional ::= extend ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FieldStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldStar ::= FieldStar Field 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= clase ident ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_A FieldStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VariableList ::= VariableList comma Variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VariableList ::= Variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Formals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Formals ::= VariableList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= t_void ident prnthss_A Formals prnthss_C StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type ident prnthss_A Formals prnthss_C StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= t_string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= t_bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= t_double 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= t_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclStar ::= DeclStar Decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

