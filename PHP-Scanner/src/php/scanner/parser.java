
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 06:28:56 CST 2018
//----------------------------------------------------

package php.scanner;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 06:28:56 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\051\002\000\002\003" +
    "\006\000\002\046\004\000\002\046\002\000\002\047\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\010\002\000\002\010\004\000\002\005" +
    "\004\000\002\045\005\000\002\012\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\052\002\000\002" +
    "\053\002\000\002\054\002\000\002\006\013\000\002\055" +
    "\002\000\002\056\002\000\002\057\002\000\002\006\013" +
    "\000\002\014\003\000\002\014\002\000\002\002\003\000" +
    "\002\002\005\000\002\060\002\000\002\061\002\000\002" +
    "\007\013\000\002\031\004\000\002\031\002\000\002\017" +
    "\004\000\002\017\002\000\002\020\004\000\002\020\002" +
    "\000\002\043\003\000\002\043\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\062\002\000\002" +
    "\063\002\000\002\064\002\000\002\011\012\000\002\041" +
    "\004\000\002\041\002\000\002\021\010\000\002\021\010" +
    "\000\002\022\004\000\002\022\003\000\002\065\002\000" +
    "\002\022\004\000\002\066\002\000\002\022\004\000\002" +
    "\067\002\000\002\022\004\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\015\006" +
    "\000\002\023\007\000\002\023\011\000\002\032\004\000" +
    "\002\032\004\000\002\032\002\000\002\033\004\000\002" +
    "\033\002\000\002\024\007\000\002\070\002\000\002\025" +
    "\014\000\002\071\002\000\002\027\006\000\002\026\004" +
    "\000\002\030\007\000\002\042\003\000\002\042\002\000" +
    "\002\050\005\000\002\050\003\000\002\050\005\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\004\000\002" +
    "\050\004\000\002\050\006\000\002\050\010\000\002\050" +
    "\005\000\002\050\005\000\002\050\006\000\002\034\005" +
    "\000\002\034\006\000\002\072\002\000\002\073\002\000" +
    "\002\036\010\000\002\074\002\000\002\075\002\000\002" +
    "\036\012\000\002\076\002\000\002\036\011\000\002\040" +
    "\006\000\002\040\010\000\002\037\003\000\002\037\002" +
    "\000\002\044\003\000\002\044\005\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\030\003\000\007\000\011\000\012\000\013" +
    "\000\014\000\020\000\024\000\026\000\064\000\065\000" +
    "\001\002\000\004\002\365\001\002\000\030\003\ufffd\007" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\020\ufffd\024\ufffd" +
    "\026\ufffd\064\ufffd\065\006\001\002\000\004\066\364\001" +
    "\002\000\030\003\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\020\ufffd\024\ufffd\026\ufffd\064\ufffd\065\006\001" +
    "\002\000\026\003\025\007\023\011\030\012\013\013\016" +
    "\014\015\020\022\024\031\026\011\064\014\001\002\000" +
    "\004\007\337\001\002\000\030\002\ufff7\003\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\020\ufff7\024\ufff7\026" +
    "\ufff7\064\ufff7\001\002\000\010\007\uffee\017\uffee\022\uffee" +
    "\001\002\000\014\007\023\011\030\012\013\013\016\014" +
    "\015\001\002\000\010\007\uffec\017\uffec\022\uffec\001\002" +
    "\000\010\007\uffed\017\uffed\022\uffed\001\002\000\030\002" +
    "\ufff9\003\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\020\ufff9\024\ufff9\026\ufff9\064\ufff9\001\002\000\030\002" +
    "\ufff4\003\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\020\ufff4\024\ufff4\026\ufff4\064\ufff4\001\002\000\006\007" +
    "\323\017\305\001\002\000\004\007\061\001\002\000\010" +
    "\007\uffeb\017\uffeb\022\uffeb\001\002\000\030\002\ufff8\003" +
    "\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\020\ufff8" +
    "\024\ufff8\026\ufff8\064\ufff8\001\002\000\006\010\057\055" +
    "\060\001\002\000\004\010\056\001\002\000\030\002\ufffa" +
    "\003\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\020" +
    "\ufffa\024\ufffa\026\ufffa\064\ufffa\001\002\000\010\007\uffef" +
    "\017\uffef\022\uffef\001\002\000\004\007\033\001\002\000" +
    "\030\002\ufffb\003\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\020\ufffb\024\ufffb\026\ufffb\064\ufffb\001\002\000" +
    "\010\025\uffdd\054\uffdd\056\uffdd\001\002\000\010\025\uffd7" +
    "\054\uffd7\056\036\001\002\000\006\025\040\054\uffd5\001" +
    "\002\000\004\007\037\001\002\000\006\025\uffd8\054\uffd8" +
    "\001\002\000\004\007\052\001\002\000\004\054\042\001" +
    "\002\000\022\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\020\uffdc\055\uffdc\064\uffdc\001\002\000\022\007\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\020\uffd9\055\uffd9\064\uffd9" +
    "\001\002\000\022\007\023\011\030\012\013\013\016\014" +
    "\015\020\022\055\047\064\014\001\002\000\022\007\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\020\uffd2\055\uffd2\064" +
    "\uffd2\001\002\000\022\007\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\020\uffda\055\uffda\064\uffda\001\002\000\030\002" +
    "\uffdb\003\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\020\uffdb\024\uffdb\026\uffdb\064\uffdb\001\002\000\022\007" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\020\uffd0\055\uffd0" +
    "\064\uffd0\001\002\000\022\007\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\020\uffd1\055\uffd1\064\uffd1\001\002\000\006" +
    "\023\uffd4\054\uffd4\001\002\000\006\023\054\054\uffd6\001" +
    "\002\000\004\007\055\001\002\000\006\023\uffd3\054\uffd3" +
    "\001\002\000\106\002\ufff2\003\ufff2\004\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\020\ufff2\021\ufff2\024\ufff2\026\ufff2\027\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2\054\ufff2\055" +
    "\ufff2\057\ufff2\064\ufff2\067\ufff2\001\002\000\030\002\ufff6" +
    "\003\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\020" +
    "\ufff6\024\ufff6\026\ufff6\064\ufff6\001\002\000\030\002\ufff5" +
    "\003\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\020" +
    "\ufff5\024\ufff5\026\ufff5\064\ufff5\001\002\000\004\021\uffe5" +
    "\001\002\000\004\021\063\001\002\000\016\007\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\022\uffe4\001\002\000\016" +
    "\007\023\011\030\012\013\013\016\014\015\022\uffe0\001" +
    "\002\000\006\007\322\017\305\001\002\000\006\022\uffdf" +
    "\023\uffdf\001\002\000\004\022\073\001\002\000\006\022" +
    "\uffe1\023\071\001\002\000\014\007\023\011\030\012\013" +
    "\013\016\014\015\001\002\000\006\022\uffde\023\uffde\001" +
    "\002\000\004\054\uffe3\001\002\000\004\054\075\001\002" +
    "\000\074\004\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\021\uffb6\027\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6\054\uffb6" +
    "\055\uffb6\057\uffb6\064\uffb6\067\uffb6\001\002\000\032\002" +
    "\uffe2\003\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\020\uffe2\024\uffe2\026\uffe2\055\uffe2\064\uffe2\001\002\000" +
    "\074\004\105\007\122\010\123\011\030\012\013\013\016" +
    "\014\015\015\101\016\134\021\124\027\uffc5\031\uffc1\032" +
    "\uffc3\033\107\034\132\035\135\036\141\041\110\042\111" +
    "\043\121\044\117\046\126\047\104\050\114\054\075\055" +
    "\uffb4\057\113\064\014\067\112\001\002\000\064\004\uffbe" +
    "\007\uffbe\010\uffbe\015\uffbe\016\uffbe\021\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\054\uffbe\055\uffbe\057\uffbe\067\uffbe\001\002\000\034" +
    "\004\uff82\005\uff82\006\uff82\010\uff82\022\uff82\023\uff82\037" +
    "\uff82\040\uff82\045\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\001\002\000\004\055\321\001\002\000\034\004\uffa7\005" +
    "\uffa7\006\uffa7\010\uffa7\022\uffa7\023\uffa7\037\uffa7\040\uffa7" +
    "\045\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\001\002\000" +
    "\034\004\uff80\005\uff80\006\uff80\010\uff80\022\uff80\023\uff80" +
    "\037\uff80\040\uff80\045\uff80\060\uff80\061\uff80\062\uff80\063" +
    "\uff80\001\002\000\040\004\105\007\145\015\101\016\134" +
    "\021\124\036\141\041\110\042\111\043\121\044\117\046" +
    "\126\047\104\050\114\057\113\067\112\001\002\000\064" +
    "\004\uffbd\007\uffbd\010\uffbd\015\uffbd\016\uffbd\021\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\054\uffbd\055\uffbd\057\uffbd\067\uffbd\001\002" +
    "\000\042\004\105\007\145\010\uffab\015\101\016\134\021" +
    "\124\036\141\041\110\042\111\043\121\044\117\046\126" +
    "\047\104\050\114\057\113\067\112\001\002\000\040\004" +
    "\105\007\145\015\101\016\134\021\124\036\141\041\110" +
    "\042\111\043\121\044\117\046\126\047\104\050\114\057" +
    "\113\067\112\001\002\000\004\021\311\001\002\000\034" +
    "\004\uff84\005\uff84\006\uff84\010\uff84\022\uff84\023\uff84\037" +
    "\uff84\040\uff84\045\uff84\060\uff84\061\uff84\062\uff84\063\uff84" +
    "\001\002\000\004\021\306\001\002\000\004\021\300\001" +
    "\002\000\004\031\264\001\002\000\004\032\256\001\002" +
    "\000\004\021\254\001\002\000\004\027\245\001\002\000" +
    "\004\021\242\001\002\000\036\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffeb\010\uffa9\017\uffeb\021\150\037\uffa9\045\146\053" +
    "\147\060\uffa9\061\uffa9\062\uffa9\063\uffa9\001\002\000\064" +
    "\004\uffc6\007\uffc6\010\uffc6\015\uffc6\016\uffc6\021\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\054\uffc6\055\uffc6\057\uffc6\067\uffc6\001\002" +
    "\000\040\004\105\007\145\015\101\016\134\021\124\036" +
    "\141\041\110\042\111\043\121\044\117\046\126\047\104" +
    "\050\114\057\113\067\112\001\002\000\064\004\uffbc\007" +
    "\uffbc\010\uffbc\015\uffbc\016\uffbc\021\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\054\uffbc\055\uffbc\057\uffbc\067\uffbc\001\002\000\034\004" +
    "\uff83\005\uff83\006\uff83\010\uff83\022\uff83\023\uff83\037\uff83" +
    "\040\uff83\045\uff83\060\uff83\061\uff83\062\uff83\063\uff83\001" +
    "\002\000\026\004\160\005\165\006\163\010\237\037\166" +
    "\045\157\060\162\061\156\062\161\063\164\001\002\000" +
    "\036\004\uffa6\005\uffa6\006\uffa6\010\uffa6\022\uffa6\023\uffa6" +
    "\037\uffa6\040\uffa6\045\uffa6\053\235\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\001\002\000\074\004\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021" +
    "\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\054\uffb8\055\uffb8\057\uffb8\064\uffb8\067\uffb8" +
    "\001\002\000\004\010\234\001\002\000\062\004\105\007" +
    "\145\010\123\015\101\016\134\021\124\027\uffc5\031\uffc1" +
    "\032\uffc3\033\107\034\132\035\135\036\141\041\110\042" +
    "\111\043\121\044\117\046\126\047\104\050\114\054\075" +
    "\055\uffb4\057\113\067\112\001\002\000\034\004\uff81\005" +
    "\uff81\006\uff81\010\uff81\022\uff81\023\uff81\037\uff81\040\uff81" +
    "\045\uff81\060\uff81\061\uff81\062\uff81\063\uff81\001\002\000" +
    "\004\021\142\001\002\000\074\004\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\021" +
    "\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\054\uffb7\055\uffb7\057\uffb7\064\uffb7\067\uffb7" +
    "\001\002\000\034\004\uffa4\005\uffa4\006\uffa4\010\uffa4\022" +
    "\uffa4\023\uffa4\037\uffa4\040\uffa4\045\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\001\002\000\064\004\uffbf\007\uffbf\010" +
    "\uffbf\015\uffbf\016\uffbf\021\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\054\uffbf" +
    "\055\uffbf\057\uffbf\067\uffbf\001\002\000\034\004\uffa5\005" +
    "\uffa5\006\uffa5\010\uffa5\022\uffa5\023\uffa5\037\uffa5\040\uffa5" +
    "\045\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002\000" +
    "\040\004\105\007\145\015\101\016\134\021\124\036\141" +
    "\041\110\042\111\043\121\044\117\046\126\047\104\050" +
    "\114\057\113\067\112\001\002\000\006\022\231\023\154" +
    "\001\002\000\030\004\160\005\165\006\163\022\uff86\023" +
    "\uff86\037\166\045\157\060\162\061\156\062\161\063\164" +
    "\001\002\000\040\004\uffa9\005\uffa9\006\uffa9\010\uffa9\021" +
    "\150\022\uffa9\023\uffa9\037\uffa9\040\uffa9\045\146\053\147" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\001\002\000\004\007" +
    "\223\001\002\000\040\004\105\007\145\015\101\016\134" +
    "\021\124\036\141\041\110\042\111\043\121\044\117\046" +
    "\126\047\104\050\114\057\113\067\112\001\002\000\042" +
    "\004\uff92\007\uff92\015\uff92\016\uff92\021\uff92\022\uff92\036" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\046\uff92\047\uff92" +
    "\050\uff92\057\uff92\067\uff92\001\002\000\042\004\105\007" +
    "\145\015\101\016\134\021\124\022\uff87\036\141\041\110" +
    "\042\111\043\121\044\117\046\126\047\104\050\114\057" +
    "\113\067\112\001\002\000\004\022\uff91\001\002\000\006" +
    "\022\uff88\023\154\001\002\000\040\004\105\007\145\015" +
    "\101\016\134\021\124\036\141\041\110\042\111\043\121" +
    "\044\117\046\126\047\104\050\114\057\113\067\112\001" +
    "\002\000\030\004\160\005\165\006\163\022\uff85\023\uff85" +
    "\037\166\045\157\060\162\061\156\062\161\063\164\001" +
    "\002\000\040\004\105\007\145\015\101\016\134\021\124" +
    "\036\141\041\110\042\111\043\121\044\117\046\126\047" +
    "\104\050\114\057\113\067\112\001\002\000\010\007\201" +
    "\051\177\052\200\001\002\000\040\004\105\007\145\015" +
    "\101\016\134\021\124\036\141\041\110\042\111\043\121" +
    "\044\117\046\126\047\104\050\114\057\113\067\112\001" +
    "\002\000\040\004\105\007\145\015\101\016\134\021\124" +
    "\036\141\041\110\042\111\043\121\044\117\046\126\047" +
    "\104\050\114\057\113\067\112\001\002\000\040\004\105" +
    "\007\145\015\101\016\134\021\124\036\141\041\110\042" +
    "\111\043\121\044\117\046\126\047\104\050\114\057\113" +
    "\067\112\001\002\000\040\004\105\007\145\015\101\016" +
    "\134\021\124\036\141\041\110\042\111\043\121\044\117" +
    "\046\126\047\104\050\114\057\113\067\112\001\002\000" +
    "\040\004\105\007\145\015\101\016\134\021\124\036\141" +
    "\041\110\042\111\043\121\044\117\046\126\047\104\050" +
    "\114\057\113\067\112\001\002\000\040\004\105\007\145" +
    "\015\101\016\134\021\124\036\141\041\110\042\111\043" +
    "\121\044\117\046\126\047\104\050\114\057\113\067\112" +
    "\001\002\000\040\004\105\007\145\015\101\016\134\021" +
    "\124\036\141\041\110\042\111\043\121\044\117\046\126" +
    "\047\104\050\114\057\113\067\112\001\002\000\026\004" +
    "\160\005\165\006\163\037\166\040\170\045\157\060\162" +
    "\061\156\062\161\063\164\001\002\000\036\004\uff93\005" +
    "\uff93\006\uff93\010\uff93\022\uff93\023\uff93\037\uff93\040\uff93" +
    "\045\uff93\053\uff93\060\uff93\061\uff93\062\uff93\063\uff93\001" +
    "\002\000\032\004\160\006\uff9d\010\uff9d\022\uff9d\023\uff9d" +
    "\037\166\040\uff9d\045\157\060\162\061\156\062\161\063" +
    "\164\001\002\000\034\004\uff9f\005\uff9f\006\uff9f\010\uff9f" +
    "\022\uff9f\023\uff9f\037\166\040\uff9f\045\157\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\001\002\000\034\004\160\005\165" +
    "\006\uff9e\010\uff9e\022\uff9e\023\uff9e\037\166\040\uff9e\045" +
    "\157\060\162\061\156\062\161\063\164\001\002\000\034" +
    "\004\uffa2\005\uffa2\006\uffa2\010\uffa2\022\uffa2\023\uffa2\037" +
    "\166\040\uffa2\045\157\060\uffa2\061\156\062\161\063\164" +
    "\001\002\000\034\004\uffa0\005\uffa0\006\uffa0\010\uffa0\022" +
    "\uffa0\023\uffa0\037\166\040\uffa0\045\157\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\001\002\000\034\004\uff9c\005\uff9c\006" +
    "\uff9c\010\uff9c\022\uff9c\023\uff9c\037\166\040\uff9c\045\157" +
    "\060\uff9c\061\156\062\161\063\164\001\002\000\004\021" +
    "\214\001\002\000\004\021\207\001\002\000\036\004\uff94" +
    "\005\uff94\006\uff94\010\uff94\022\uff94\023\uff94\037\uff94\040" +
    "\uff94\045\uff94\053\uff94\060\uff94\061\uff94\062\uff94\063\uff94" +
    "\001\002\000\004\021\203\001\002\000\042\004\uff8c\007" +
    "\uff8c\015\uff8c\016\uff8c\021\uff8c\022\uff8c\036\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\046\uff8c\047\uff8c\050\uff8c\057" +
    "\uff8c\067\uff8c\001\002\000\042\004\105\007\145\015\101" +
    "\016\134\021\124\022\uff87\036\141\041\110\042\111\043" +
    "\121\044\117\046\126\047\104\050\114\057\113\067\112" +
    "\001\002\000\004\022\206\001\002\000\034\004\uff8b\005" +
    "\uff8b\006\uff8b\010\uff8b\022\uff8b\023\uff8b\037\uff8b\040\uff8b" +
    "\045\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\001\002\000" +
    "\040\004\105\007\145\015\101\016\134\021\124\036\141" +
    "\041\110\042\111\043\121\044\117\046\126\047\104\050" +
    "\114\057\113\067\112\001\002\000\026\004\160\005\165" +
    "\006\163\023\211\037\166\045\157\060\162\061\156\062" +
    "\161\063\164\001\002\000\040\004\105\007\145\015\101" +
    "\016\134\021\124\036\141\041\110\042\111\043\121\044" +
    "\117\046\126\047\104\050\114\057\113\067\112\001\002" +
    "\000\026\004\160\005\165\006\163\022\213\037\166\045" +
    "\157\060\162\061\156\062\161\063\164\001\002\000\004" +
    "\021\uff89\001\002\000\040\004\105\007\145\015\101\016" +
    "\134\021\124\036\141\041\110\042\111\043\121\044\117" +
    "\046\126\047\104\050\114\057\113\067\112\001\002\000" +
    "\026\004\160\005\165\006\163\022\216\037\166\045\157" +
    "\060\162\061\156\062\161\063\164\001\002\000\004\021" +
    "\uff8a\001\002\000\034\004\uffa1\005\uffa1\006\uffa1\010\uffa1" +
    "\022\uffa1\023\uffa1\037\166\040\uffa1\045\157\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\001\002\000\004\022\221\001\002" +
    "\000\034\004\uff90\005\uff90\006\uff90\010\uff90\022\uff90\023" +
    "\uff90\037\uff90\040\uff90\045\uff90\060\uff90\061\uff90\062\uff90" +
    "\063\uff90\001\002\000\034\004\160\005\165\006\163\010" +
    "\uffa8\022\uffa8\023\uffa8\037\166\040\uffa8\045\157\060\162" +
    "\061\156\062\161\063\164\001\002\000\004\021\224\001" +
    "\002\000\042\004\uff8f\007\uff8f\015\uff8f\016\uff8f\021\uff8f" +
    "\022\uff8f\036\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\057\uff8f\067\uff8f\001\002\000\042" +
    "\004\105\007\145\015\101\016\134\021\124\022\uff87\036" +
    "\141\041\110\042\111\043\121\044\117\046\126\047\104" +
    "\050\114\057\113\067\112\001\002\000\004\022\uff8e\001" +
    "\002\000\004\022\230\001\002\000\034\004\uff8d\005\uff8d" +
    "\006\uff8d\010\uff8d\022\uff8d\023\uff8d\037\uff8d\040\uff8d\045" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\001\002\000\004" +
    "\010\232\001\002\000\064\004\uffad\007\uffad\010\uffad\015" +
    "\uffad\016\uffad\021\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\046\uffad\047\uffad\050\uffad\054\uffad\055\uffad" +
    "\057\uffad\067\uffad\001\002\000\004\055\uffb5\001\002\000" +
    "\064\004\uffae\007\uffae\010\uffae\015\uffae\016\uffae\021\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\041\uffae\042\uffae\043\uffae\044\uffae\046\uffae" +
    "\047\uffae\050\uffae\054\uffae\055\uffae\057\uffae\067\uffae\001" +
    "\002\000\040\004\105\007\145\015\101\016\134\021\124" +
    "\036\141\041\110\042\111\043\121\044\117\046\126\047" +
    "\104\050\114\057\113\067\112\001\002\000\034\004\160" +
    "\005\165\006\163\010\uffaa\022\uffaa\023\uffaa\037\166\040" +
    "\uffaa\045\157\060\162\061\156\062\161\063\164\001\002" +
    "\000\064\004\uffc7\007\uffc7\010\uffc7\015\uffc7\016\uffc7\021" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\054\uffc7\055\uffc7\057\uffc7\067\uffc7" +
    "\001\002\000\026\004\160\005\165\006\163\022\241\037" +
    "\166\045\157\060\162\061\156\062\161\063\164\001\002" +
    "\000\034\004\uffa3\005\uffa3\006\uffa3\010\uffa3\022\uffa3\023" +
    "\uffa3\037\uffa3\040\uffa3\045\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\001\002\000\004\022\243\001\002\000\034\004" +
    "\uff97\005\uff97\006\uff97\010\uff97\022\uff97\023\uff97\037\uff97" +
    "\040\uff97\045\uff97\060\uff97\061\uff97\062\uff97\063\uff97\001" +
    "\002\000\064\004\uffc4\007\uffc4\010\uffc4\015\uffc4\016\uffc4" +
    "\021\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\054\uffc4\055\uffc4\057\uffc4\067" +
    "\uffc4\001\002\000\004\021\246\001\002\000\040\004\105" +
    "\007\145\015\101\016\134\021\124\036\141\041\110\042" +
    "\111\043\121\044\117\046\126\047\104\050\114\057\113" +
    "\067\112\001\002\000\026\004\160\005\165\006\163\022" +
    "\250\037\166\045\157\060\162\061\156\062\161\063\164" +
    "\001\002\000\060\004\105\007\145\010\123\015\101\016" +
    "\134\021\124\027\uffc5\031\uffc1\032\uffc3\033\107\034\132" +
    "\035\135\036\141\041\110\042\111\043\121\044\117\046" +
    "\126\047\104\050\114\054\075\057\113\067\112\001\002" +
    "\000\064\004\uffba\007\uffba\010\uffba\015\uffba\016\uffba\021" +
    "\uffba\027\uffba\030\252\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046" +
    "\uffba\047\uffba\050\uffba\054\uffba\055\uffba\057\uffba\067\uffba" +
    "\001\002\000\060\004\105\007\145\010\123\015\101\016" +
    "\134\021\124\027\uffc5\031\uffc1\032\uffc3\033\107\034\132" +
    "\035\135\036\141\041\110\042\111\043\121\044\117\046" +
    "\126\047\104\050\114\054\075\057\113\067\112\001\002" +
    "\000\064\004\uffb9\007\uffb9\010\uffb9\015\uffb9\016\uffb9\021" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\054\uffb9\055\uffb9\057\uffb9\067\uffb9" +
    "\001\002\000\004\022\255\001\002\000\034\004\uff96\005" +
    "\uff96\006\uff96\010\uff96\022\uff96\023\uff96\037\uff96\040\uff96" +
    "\045\uff96\060\uff96\061\uff96\062\uff96\063\uff96\001\002\000" +
    "\004\021\260\001\002\000\064\004\uffc2\007\uffc2\010\uffc2" +
    "\015\uffc2\016\uffc2\021\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\054\uffc2\055" +
    "\uffc2\057\uffc2\067\uffc2\001\002\000\040\004\105\007\145" +
    "\015\101\016\134\021\124\036\141\041\110\042\111\043" +
    "\121\044\117\046\126\047\104\050\114\057\113\067\112" +
    "\001\002\000\026\004\160\005\165\006\163\022\262\037" +
    "\166\045\157\060\162\061\156\062\161\063\164\001\002" +
    "\000\060\004\105\007\145\010\123\015\101\016\134\021" +
    "\124\027\uffc5\031\uffc1\032\uffc3\033\107\034\132\035\135" +
    "\036\141\041\110\042\111\043\121\044\117\046\126\047" +
    "\104\050\114\054\075\057\113\067\112\001\002\000\064" +
    "\004\uffb3\007\uffb3\010\uffb3\015\uffb3\016\uffb3\021\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\054\uffb3\055\uffb3\057\uffb3\067\uffb3\001\002" +
    "\000\004\021\266\001\002\000\064\004\uffc0\007\uffc0\010" +
    "\uffc0\015\uffc0\016\uffc0\021\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\054\uffc0" +
    "\055\uffc0\057\uffc0\067\uffc0\001\002\000\042\004\105\007" +
    "\145\010\uffab\015\101\016\134\021\124\036\141\041\110" +
    "\042\111\043\121\044\117\046\126\047\104\050\114\057" +
    "\113\067\112\001\002\000\030\004\160\005\165\006\163" +
    "\010\uffac\022\uffac\037\166\045\157\060\162\061\156\062" +
    "\161\063\164\001\002\000\004\010\uffb2\001\002\000\004" +
    "\010\272\001\002\000\040\004\105\007\145\015\101\016" +
    "\134\021\124\036\141\041\110\042\111\043\121\044\117" +
    "\046\126\047\104\050\114\057\113\067\112\001\002\000" +
    "\026\004\160\005\165\006\163\010\274\037\166\045\157" +
    "\060\162\061\156\062\161\063\164\001\002\000\042\004" +
    "\105\007\145\015\101\016\134\021\124\022\uffab\036\141" +
    "\041\110\042\111\043\121\044\117\046\126\047\104\050" +
    "\114\057\113\067\112\001\002\000\004\022\276\001\002" +
    "\000\060\004\105\007\145\010\123\015\101\016\134\021" +
    "\124\027\uffc5\031\uffc1\032\uffc3\033\107\034\132\035\135" +
    "\036\141\041\110\042\111\043\121\044\117\046\126\047" +
    "\104\050\114\054\075\057\113\067\112\001\002\000\064" +
    "\004\uffb1\007\uffb1\010\uffb1\015\uffb1\016\uffb1\021\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\054\uffb1\055\uffb1\057\uffb1\067\uffb1\001\002" +
    "\000\040\004\105\007\145\015\101\016\134\021\124\036" +
    "\141\041\110\042\111\043\121\044\117\046\126\047\104" +
    "\050\114\057\113\067\112\001\002\000\026\004\160\005" +
    "\165\006\163\023\302\037\166\045\157\060\162\061\156" +
    "\062\161\063\164\001\002\000\014\007\023\011\030\012" +
    "\013\013\016\014\015\001\002\000\006\017\305\022\304" +
    "\001\002\000\034\004\uff98\005\uff98\006\uff98\010\uff98\022" +
    "\uff98\023\uff98\037\uff98\040\uff98\045\uff98\060\uff98\061\uff98" +
    "\062\uff98\063\uff98\001\002\000\010\007\uffea\017\uffea\022" +
    "\uffea\001\002\000\004\007\307\001\002\000\004\022\310" +
    "\001\002\000\034\004\uff99\005\uff99\006\uff99\010\uff99\022" +
    "\uff99\023\uff99\037\uff99\040\uff99\045\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\001\002\000\040\004\105\007\145\015" +
    "\101\016\134\021\124\036\141\041\110\042\111\043\121" +
    "\044\117\046\126\047\104\050\114\057\113\067\112\001" +
    "\002\000\026\004\160\005\165\006\163\022\313\037\166" +
    "\045\157\060\162\061\156\062\161\063\164\001\002\000" +
    "\034\004\uff95\005\uff95\006\uff95\010\uff95\022\uff95\023\uff95" +
    "\037\uff95\040\uff95\045\uff95\060\uff95\061\uff95\062\uff95\063" +
    "\uff95\001\002\000\034\004\uff9a\005\uff9a\006\uff9a\010\uff9a" +
    "\022\uff9a\023\uff9a\037\166\040\uff9a\045\157\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\001\002\000\004\010\uffb0\001\002" +
    "\000\004\010\317\001\002\000\064\004\uffaf\007\uffaf\010" +
    "\uffaf\015\uffaf\016\uffaf\021\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\054\uffaf" +
    "\055\uffaf\057\uffaf\067\uffaf\001\002\000\034\004\uff9b\005" +
    "\uff9b\006\uff9b\010\uff9b\022\uff9b\023\uff9b\037\166\040\uff9b" +
    "\045\157\060\uff9b\061\156\062\161\063\164\001\002\000" +
    "\110\002\uffbb\003\uffbb\004\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021" +
    "\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\054\uffbb\055\uffbb" +
    "\057\uffbb\064\uffbb\067\uffbb\001\002\000\010\010\ufff0\022" +
    "\ufff0\023\ufff0\001\002\000\006\010\ufff0\021\uffe9\001\002" +
    "\000\004\021\325\001\002\000\016\007\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\022\uffe8\001\002\000\016\007\023" +
    "\011\030\012\013\013\016\014\015\022\uffe0\001\002\000" +
    "\004\022\330\001\002\000\004\054\uffe7\001\002\000\004" +
    "\054\075\001\002\000\032\002\uffe6\003\uffe6\007\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\020\uffe6\024\uffe6\026\uffe6" +
    "\055\uffe6\064\uffe6\001\002\000\030\002\uffff\003\025\007" +
    "\023\011\030\012\013\013\016\014\015\020\022\024\031" +
    "\026\011\064\014\001\002\000\030\002\ufff3\003\ufff3\007" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\020\ufff3\024\ufff3" +
    "\026\ufff3\064\ufff3\001\002\000\004\010\336\001\002\000" +
    "\106\002\ufff1\003\ufff1\004\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021" +
    "\ufff1\024\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1\057\ufff1" +
    "\064\ufff1\067\ufff1\001\002\000\004\054\uffcf\001\002\000" +
    "\004\054\341\001\002\000\020\007\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\020\uffce\055\uffce\001\002\000\020\007" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\020\uffca\055\uffca" +
    "\001\002\000\020\007\023\011\030\012\013\013\016\014" +
    "\015\020\345\055\uffcd\001\002\000\006\007\356\017\305" +
    "\001\002\000\004\007\351\001\002\000\004\055\350\001" +
    "\002\000\020\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\020\uffcb\055\uffcb\001\002\000\030\002\uffcc\003\uffcc\007" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\020\uffcc\024\uffcc" +
    "\026\uffcc\064\uffcc\001\002\000\004\021\352\001\002\000" +
    "\016\007\023\011\030\012\013\013\016\014\015\022\uffe0" +
    "\001\002\000\004\022\354\001\002\000\004\010\355\001" +
    "\002\000\020\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\020\uffc8\055\uffc8\001\002\000\004\021\357\001\002\000" +
    "\016\007\023\011\030\012\013\013\016\014\015\022\uffe0" +
    "\001\002\000\004\022\361\001\002\000\004\010\362\001" +
    "\002\000\020\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\020\uffc9\055\uffc9\001\002\000\026\003\ufffe\007\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\020\ufffe\024\ufffe\026\ufffe" +
    "\064\ufffe\001\002\000\030\003\ufffc\007\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\020\ufffc\024\ufffc\026\ufffc\064\ufffc" +
    "\065\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\006\003\003\051\004\001\001\000\002\001" +
    "\001\000\006\046\007\047\006\001\001\000\002\001\001" +
    "\000\006\046\362\047\006\001\001\000\022\004\017\005" +
    "\031\006\026\007\016\011\023\012\025\013\020\045\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\334\013\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\033\001\001\000\004\017\034\001" +
    "\001\000\004\020\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\052\001\001\000\002\001\001\000" +
    "\004\061\042\001\001\000\004\031\043\001\001\000\016" +
    "\005\044\006\050\012\025\013\020\016\045\045\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\061\001\001\000\002\001\001\000\004\056\063\001\001" +
    "\000\012\002\067\012\065\013\064\014\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\071\013\064\001\001\000\002\001" +
    "\001\000\004\057\073\001\001\000\004\015\075\001\001" +
    "\000\004\032\076\001\001\000\002\001\001\000\044\005" +
    "\130\012\025\013\064\015\124\022\132\026\137\027\077" +
    "\030\105\033\101\034\127\035\102\036\136\045\135\050" +
    "\126\065\117\066\115\067\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\127\035\102\036\136\050\317" +
    "\001\001\000\002\001\001\000\014\034\127\035\102\036" +
    "\136\042\314\050\266\001\001\000\012\034\127\035\102" +
    "\036\136\050\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\264" +
    "\001\001\000\004\024\256\001\001\000\002\001\001\000" +
    "\004\023\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\127\035\102\036\136\050" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\015\124\022\132\026\137\027\077\030\105" +
    "\033\232\034\127\035\102\036\136\050\126\065\117\066" +
    "\115\067\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\034\127\035\102\036\136\044\142" +
    "\050\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\127\035\102" +
    "\036\136\050\221\001\001\000\004\072\150\001\001\000" +
    "\016\034\127\035\102\036\136\037\151\044\152\050\143" +
    "\001\001\000\004\073\217\001\001\000\002\001\001\000" +
    "\012\034\127\035\102\036\136\050\154\001\001\000\002" +
    "\001\001\000\012\034\127\035\102\036\136\050\216\001" +
    "\001\000\004\040\201\001\001\000\012\034\127\035\102" +
    "\036\136\050\175\001\001\000\012\034\127\035\102\036" +
    "\136\050\174\001\001\000\012\034\127\035\102\036\136" +
    "\050\173\001\001\000\012\034\127\035\102\036\136\050" +
    "\172\001\001\000\012\034\127\035\102\036\136\050\171" +
    "\001\001\000\012\034\127\035\102\036\136\050\170\001" +
    "\001\000\012\034\127\035\102\036\136\050\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\203" +
    "\001\001\000\016\034\127\035\102\036\136\037\204\044" +
    "\152\050\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\127\035\102\036\136\050\207\001\001\000" +
    "\002\001\001\000\012\034\127\035\102\036\136\050\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\127\035\102\036\136\050\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\224\001\001\000\016\034\127\035\102\036\136\037" +
    "\225\044\152\050\143\001\001\000\004\075\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\127\035\102\036\136\050\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\127\035\102\036\136\050\246" +
    "\001\001\000\002\001\001\000\032\015\124\022\250\026" +
    "\137\027\077\030\105\034\127\035\102\036\136\050\126" +
    "\065\117\066\115\067\114\001\001\000\002\001\001\000" +
    "\032\015\124\022\252\026\137\027\077\030\105\034\127" +
    "\035\102\036\136\050\126\065\117\066\115\067\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\034\127\035" +
    "\102\036\136\050\260\001\001\000\002\001\001\000\032" +
    "\015\124\022\262\026\137\027\077\030\105\034\127\035" +
    "\102\036\136\050\126\065\117\066\115\067\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\127\035\102\036\136\042\267\050\266\001\001" +
    "\000\002\001\001\000\004\070\270\001\001\000\002\001" +
    "\001\000\012\034\127\035\102\036\136\050\272\001\001" +
    "\000\002\001\001\000\014\034\127\035\102\036\136\042" +
    "\274\050\266\001\001\000\002\001\001\000\032\015\124" +
    "\022\276\026\137\027\077\030\105\034\127\035\102\036" +
    "\136\050\126\065\117\066\115\067\114\001\001\000\002" +
    "\001\001\000\012\034\127\035\102\036\136\050\300\001" +
    "\001\000\002\001\001\000\004\013\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\127" +
    "\035\102\036\136\050\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\323\001\001" +
    "\000\002\001\001\000\004\053\325\001\001\000\012\002" +
    "\067\012\065\013\064\014\326\001\001\000\002\001\001" +
    "\000\004\054\330\001\001\000\004\015\331\001\001\000" +
    "\002\001\001\000\022\004\333\005\031\006\026\007\016" +
    "\011\023\012\025\013\020\045\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\337" +
    "\001\001\000\002\001\001\000\004\063\341\001\001\000" +
    "\004\041\342\001\001\000\010\013\343\021\346\064\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\067\012\065\013\064\014\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\067\012\065\013\064\014\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<TError> TablaES = new LinkedList<TError>();

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 
   
    boolean WritingParameters = false;
    boolean ReadingParameters = false;
    int CurrentParameter = 0;
    String CurrentFile = "";
    String CurrentDirectory = "";
    oSymbol CurrentFunction;
    public void MostrarFilaColumnaError(int Fila, int Columna, String error) throws BadLocationException{
      String newMssg = (CurrentDirectory + " - Fila: " + Fila + " - Columna: " + Columna +" - " + error);
      Interfaz.getInterfaz().AddTextToJTextArea(newMssg + "\n");
    }


    public boolean isNumber(String s){
        try{
            Double.valueOf(s);
            return true;
        }catch(Exception e){
            return false;
        }
    }
    
    public boolean isInteger(String s){
        if(isNumber(s) && !s.contains(".")){
            return true;
        }
        return false;
    }

    
    public boolean isBoolean(String s){
        return (s.equals("true") || s.equals("false"));
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Constant ::= t_null 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Constant ::= strConst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Constant ::= bolCnst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Constant ::= dblConst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Constant ::= intCnst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExprList ::= ExprList comma Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(CurrentFunction == null){

                        }else{
                            try{
                                if((CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("int")  && !isInteger(e))|| 
                                (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("double") && !isNumber(e))|| 
                                (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("bool") && !isBoolean(e))){
                                    MostrarFilaColumnaError(eright, eleft, "El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");                          
                                    System.out.println("El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");
                                }
                                else if(CurrentParameter!=CurrentFunction.Parameters.size()-1 && !(CurrentParameter!=CurrentFunction.Parameters.size()-1)){
                                    MostrarFilaColumnaError(eright, eleft, "Se reciben más de los parámetros necesarios para la función.");                          
                                    System.out.println("Se reciben más de los parámetros necesarios para la función.");
                                }
                            }catch(Exception ex){
                                MostrarFilaColumnaError(eright, eleft, "El número de parámetros no coincide con la definición del mismo");                          
                                System.out.println("El número de parámetros no coincide con la definición del mismo");
                            }
                            CurrentParameter++;  
                        }
                                              

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExprList ::= Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(CurrentFunction != null){
                            if(CurrentParameter>=CurrentFunction.Parameters.size()){
                                        MostrarFilaColumnaError(eright, eleft, "Menos parámetros de los esperados");                          
                            }
                            else if(CurrentFunction == null){
                                System.out.println("No se encuentra el símbolo en el contexto actual");
                            }else{
                                try{    
                                    if((CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("int")  && !isInteger(e))|| 
                                        (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("double") && !isNumber(e))|| 
                                        (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("bool") && !isBoolean(e))){
                                        MostrarFilaColumnaError(eright, eleft, "El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");                          
                                        System.out.println("El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");
                                    }
                                } catch (Exception ex){
                                    MostrarFilaColumnaError(eright, eleft, "El número de parámetros no coincide con la definición del mismo");                          
                                    System.out.println("El número de parámetros no coincide con la definición del mismo");
                                } 
                                CurrentParameter++; 
                            }
                        
                        }
                        
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Actuals ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Actuals ::= ExprList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LibCall ::= setByte prnthss_A Expr comma Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LibCall ::= getByte prnthss_A Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Call ::= Expr dot LibCall prnthss_A NT$21 Actuals prnthss_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 WritingParameters = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$21 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value; CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i); WritingParameters = true; CurrentParameter = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Call ::= ident dot ident prnthss_A NT$19 Actuals NT$20 prnthss_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
             WritingParameters = false; 
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$20 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                System.out.println("Inicia Actuals"); 
                if(CurrentFunction != null)
                if(CurrentParameter <= CurrentFunction.Parameters.size()-1){
                 MostrarFilaColumnaError(iright, ileft,"Menos parámetros de los esperados.");
             }  
                System.out.println("Finaliza Actuals");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$19 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                System.out.println("Expr dot ident");
                if(ManejadorScopes.getInstancia().GetSimbolo(i1)==null){
                    MostrarFilaColumnaError(iright, ileft,"No se encuentra el símbolo en el ámbito actual");
                    System.out.println("No se encuentra el símbolo en el ámbito actual");
               }else{
                    String clasePerteneceA = ManejadorScopes.getInstancia().GetSimbolo(i1).DataType;
                    oSymbol functionSymbol = ManejadorScopes.getInstancia().GetFuncion(clasePerteneceA, i);
                    if(functionSymbol == null){
                        CurrentFunction = functionSymbol;
                        MostrarFilaColumnaError(iright, ileft,"No se encuentra la función en la tabla de símbolos");
                        System.out.println("No se encuentra la función en la tabla de símbolos");
                        RESULT = null;
                    }else{
                        RESULT = functionSymbol.Value; 
                        CurrentFunction = functionSymbol; 
                        WritingParameters = true; 
                        CurrentParameter = 0; 
                    }                      }
                System.out.println("Finaliza expr dot ident");            
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Call ::= ident prnthss_A NT$17 Actuals NT$18 prnthss_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
              if(CurrentFunction==null){
            }else{
                WritingParameters = false;
            }


             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$18 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                if(CurrentFunction==null) ;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$17 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

            System.out.println("Inicia CALL");
            CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
            if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
                System.out.println("No se encuentra el símbolo en el ámbito actual");
                    MostrarFilaColumnaError(iright, ileft,"No se encuentra el símbolo en el ámbito actual");
                 RESULT = null;
            }else{
                RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value; 
                CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                RESULT = CurrentFunction.Value;
                WritingParameters = true; 
                CurrentParameter = 0;
            }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LValue ::= Expr brackets_A Expr brackets_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LValue ::= Expr dot ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= malloc prnthss_A Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= ReadLine prnthss_A prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= readInteger prnthss_A prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= t_newArr prnthss_A Expr comma Type prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= t_new prnthss_A ident prnthss_C 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= neg Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(e==null){
                    System.out.println("La variable " + e + " nunca fue asignada.");
                } else{
                    System.out.println("Operación de negación !("+e+") = "+ !(Boolean.valueOf(e)));
                    RESULT = String.valueOf(!(Boolean.valueOf(e)));
                }

                
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= minus Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                    RESULT = String.valueOf(-Double.valueOf(e));
                }catch(Exception ex){
                    MostrarFilaColumnaError(eright, eleft,"No es un tipo de dato válido");
                    System.out.println("No es un tipo de dato válido");
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= Expr minus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                try{
                    if(e1 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");                  
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                     System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) - Double.valueOf(e2));
                     }
                }catch(Exception e){
                     MostrarFilaColumnaError(e1right, e1left,"Esta operación no está deinida para este tipo de dato.");          
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr cmpop Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(e1 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if(e2==null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }
                else if(c.equals("==")){
                    RESULT = String.valueOf(e1.equals(e2));
                } else if(c.equals("<")){
                    RESULT = String.valueOf(Double.valueOf(e1) < Double.valueOf(e2));
                } else if(c.equals(">")){
                    RESULT = String.valueOf(Double.valueOf(e1) > Double.valueOf(e2));
                 }else if(c.equals("<=")){
                    RESULT = String.valueOf(Double.valueOf(e1) <= Double.valueOf(e2));
                } else if(c.equals("!=")){
                    RESULT = String.valueOf(!e1.equals(e2));
                } else if (c.equals(">=")){
                    RESULT = String.valueOf(Double.valueOf(e1) >= Double.valueOf(e2));
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr logop Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr mod Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               try{
                   
                    if(e1 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }else if (e2 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) % Double.valueOf(e2));
                    }
                }catch(Exception e){
                     MostrarFilaColumnaError(e1right, e1left,"Esta operación no está deinida para este tipo de dato.");      
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr divide Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                    if(e1 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }else if (e2 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) / Double.valueOf(e2));
                    }
                }catch(Exception e){
                     MostrarFilaColumnaError(e1right, e1left,"Esta operación no está deinida para este tipo de dato.");      
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr times Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                     if(e1 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }else if (e2 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) * Double.valueOf(e2));
                    }
                }catch(Exception e){
                     MostrarFilaColumnaError(e1right, e1left,"Esta operación no está deinida para este tipo de dato.");      
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr plus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                     if(e1 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }else if (e2 == null){
                     MostrarFilaColumnaError(e1right, e1left,"La variable nunca fue asignada.");  
                        System.out.println("La variable nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) + Double.valueOf(e2));
                    }
                }catch(Exception e){
                     MostrarFilaColumnaError(e1right, e1left,"Esta operación no está deinida para este tipo de dato.");      
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= prnthss_A Expr prnthss_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT  = e;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Call 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= t_this 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= LValue 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Constant 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= ident equals Expr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
                    MostrarFilaColumnaError(iright, ileft, "No existe el símbolo " + i + " en el ámbito actual. ");
                    System.out.println("El símbolo " + i + " no se encuentra en el ámbito actual.");
                }else if(e==null){
                    //MostrarFilaColumnaError(iright, ileft, "No se puede asignar el valor de null a la variable.");
                    System.out.println("No se puede asignar el valor de null a la variable.");
                }else{
                    if((ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("int") == 0 && !isNumber(e)) 
                            || (ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("double") == 0 && !isNumber(e))
                            || (ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("bool") == 0 && !isBoolean(e))){
                        MostrarFilaColumnaError(iright, ileft, "El dato a asignar no es del mismo tipo que la variable");
                        System.out.println("El dato a asignar no es del mismo tipo que la variable");
                    } else{
                        String newData = e;
                        if(ManejadorScopes.getInstancia().GetSimbolo(i).DataType.equals("int")){
                            e = e.split("[.]")[0];
                        }
                        System.out.println("Se asignó a " + i + " el valor de " + e);
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = e;
                    }                   
                    
                }
            
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= ident 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(ManejadorScopes.getInstancia().GetSimbolo(i) != null){ // Existe
                    System.out.println("Se obtuvo correctamente el símbolo " + i);
                    RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value;
                }else {
                    MostrarFilaColumnaError(iright, ileft, "No existe el símbolo " + i + " en el ámbito actual. ");
                    System.out.println("No existe el símbolo " + i + " en el ámbito actual. ");
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= LValue equals Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExprOptional ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExprOptional ::= Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrintStmt ::= print prnthss_A ExprList prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BreakStmt ::= t_break pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ReturnStmt ::= t_return ExprOptional NT$16 pyc 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$16 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(CurrentFunction.DataType.equals("double") && (e==null || !isNumber(e))){
            MostrarFilaColumnaError(eright, eleft, "El valor de retorno debe ser del mismo tipo de dato que la función.");
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        } else if(CurrentFunction.DataType.equals("int") && (e==null || !isInteger(e))){
            MostrarFilaColumnaError(eright, eleft, "El valor de retorno debe ser del mismo tipo de dato que la función.");
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        } else if(CurrentFunction.DataType.equals("string") && (e==null)){
            MostrarFilaColumnaError(eright, eleft, "El valor de retorno debe ser del mismo tipo de dato que la función.");
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función");
        } else if(CurrentFunction.DataType.equals("bool") && !isBoolean(e)){
            MostrarFilaColumnaError(eright, eleft, "El valor de retorno debe ser del mismo tipo de dato que la función.");
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función");
        } else if(CurrentFunction.DataType.equals("void") && e!=null){
            MostrarFilaColumnaError(eright, eleft, "El valor de retorno debe ser del mismo tipo de dato que la función.");
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ForStmt ::= t_for prnthss_A ExprOptional NT$15 pyc Expr pyc ExprOptional prnthss_C Stmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$15 ::= 
            {
              String RESULT =null;
 System.out.println("Finaliza primer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WhileStmt ::= t_while prnthss_A Expr prnthss_C Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StmtStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StmtStar ::= Stmt StmtStar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VariableDeclStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VariableDeclStar ::= VariableDeclStar ConstDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VariableDeclStar ::= VariableDeclStar VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt t_else Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StmtBlock ::= curly_A VariableDeclStar StmtStar curly_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= StmtBlock 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= PrintStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= ReturnStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= BreakStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= NT$14 ForStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$14 ::= 
            {
              String RESULT =null;
 ManejadorScopes.getInstancia().NuevoScope("for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= NT$13 WhileStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$13 ::= 
            {
              String RESULT =null;
 ManejadorScopes.getInstancia().NuevoScope("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= NT$12 IfStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$12 ::= 
            {
              String RESULT =null;
 ManejadorScopes.getInstancia().NuevoScope("if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= Expr pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Prototype ::= t_void ident prnthss_A Formals prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Prototype ::= Type ident prnthss_A Formals prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PrototypeStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PrototypeStar ::= PrototypeStar Prototype 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InterfaceDecl ::= t_interface ident NT$9 curly_A NT$10 PrototypeStar NT$11 curly_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 ManejadorScopes.getInstancia().NuevoScope(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$9 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Interface", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Field ::= ConstDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Field ::= FunctionDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Field ::= VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IdentList ::= IdentList comma ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IdentList ::= ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ImplementsIdentPlusCommaOptional ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ImplementsIdentPlusCommaOptional ::= t_implements IdentList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExtendsIdentOptional ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExtendsIdentOptional ::= extend ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FieldStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FieldStar ::= FieldStar Field 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassDecl ::= clase ident NT$7 ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_A NT$8 FieldStar curly_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 
    System.out.println("Finaliza Clase");
    ManejadorScopes.getInstancia().FinalizaScope(); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 ManejadorScopes.getInstancia().NuevoScope(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Class", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VariableList ::= VariableList comma Variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VariableList ::= Variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Formals ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Formals ::= VariableList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FunctionDecl ::= t_void ident NT$4 prnthss_A NT$5 Formals prnthss_C NT$6 StmtBlock 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     ManejadorScopes.getInstancia().FinalizaScope();
                     System.out.println("Finaliza void");
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 
                     WritingParameters = false;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                     ManejadorScopes.getInstancia().NuevoScope(i); WritingParameters = true; 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                    ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Function", null)); 
                     String CurrentIdFunction = i; 
                    CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionDecl ::= Type ident NT$1 prnthss_A NT$2 Formals prnthss_C NT$3 StmtBlock 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 
                      ManejadorScopes.getInstancia().FinalizaScope();
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                      WritingParameters = false; 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                      ManejadorScopes.getInstancia().NuevoScope(i); WritingParameters = true;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    String data = null;
                    if(t.equals("int")||t.equals("double")){
                        data = "0";
                    }
                     ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Function", data)); 
                     String CurrentIdFunction = i;  
                    CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                    if(t.equals("int")){
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "0";
                        RESULT="0";
                    }else if(t.equals("double")){
                        RESULT="0";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "0";
                    }else if(t.equals("bool")){
                        RESULT="true";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "false";
                    }else if(t.equals("string")){
                        RESULT = "\"\"";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "\"\"";
                    }    
                     
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= Type brackets 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= ident 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= t_string 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= t_bool 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= t_double 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= t_int 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variable ::= Type ident 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        String data = null;
        if(t.equals("int")||t.equals("double")){
            data = "0";
        }
        oSymbol currentSymbol = new oSymbol(i, t, "Variable", data);
        ManejadorScopes.getInstancia().AgregarSimbolo(i, currentSymbol);  
        if(WritingParameters){
            ManejadorScopes.getInstancia().GetSimbolo(CurrentFunction.ID).AddParameters(currentSymbol);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDecl ::= constante Variable pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VariableDecl ::= Variable pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclStar ::= DeclStar Decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DeclStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl ::= error curly_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= error pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= ConstDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= InterfaceDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ClassDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= FunctionDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Include ::= include library 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(Directory.getInstancia().AddFile(l.split(">")[0].split("<")[1])){
            System.out.println("/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/");
            System.out.println("\t\t\t\t\t\t\t\t\tInicia Comprobación Semántica de " + l);
            CurrentFile = l;
            Directory.getInstancia().CheckSemantics(l.split(">")[0].split("<")[1]);
            System.out.println("\t\t\t\t\t\t\t\t\tFinaliza Comprobación Semántica de " + l);
            System.out.println("/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/");
        };
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Include",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IncludeStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludeStar",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IncludeStar ::= Include IncludeStar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludeStar",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= NT$0 IncludeStar Decl DeclStar 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
 CurrentDirectory = Directory.getInstancia().GetCurrentFile();         
    oSymbol ns = new oSymbol("Print", "void", "Function", "");
    oSymbol ps = new oSymbol("Imprimir", "string", "Parameter", "");
    ns.AddParameters(ps);
    ManejadorScopes.getInstancia().AgregarSimbolo("Print",  ns);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

