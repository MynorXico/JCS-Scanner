
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 20 06:59:43 CST 2018
//----------------------------------------------------

package php.scanner;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 20 06:59:43 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\003\005\000\002\046" +
    "\004\000\002\046\002\000\002\047\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\010\002\000\002\010\004\000\002\005\004\000\002\045" +
    "\005\000\002\012\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\051\002\000\002\052\002\000\002" +
    "\053\002\000\002\006\013\000\002\054\002\000\002\055" +
    "\002\000\002\056\002\000\002\006\013\000\002\014\003" +
    "\000\002\014\002\000\002\002\003\000\002\002\005\000" +
    "\002\057\002\000\002\060\002\000\002\007\013\000\002" +
    "\031\004\000\002\031\002\000\002\017\004\000\002\017" +
    "\002\000\002\020\004\000\002\020\002\000\002\043\003" +
    "\000\002\043\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\061\002\000\002\062\002\000\002" +
    "\063\002\000\002\011\012\000\002\041\004\000\002\041" +
    "\002\000\002\021\010\000\002\021\010\000\002\022\004" +
    "\000\002\022\003\000\002\064\002\000\002\022\004\000" +
    "\002\065\002\000\002\022\004\000\002\066\002\000\002" +
    "\022\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\015\006\000\002\023\007" +
    "\000\002\023\011\000\002\032\004\000\002\032\004\000" +
    "\002\032\002\000\002\033\004\000\002\033\002\000\002" +
    "\024\007\000\002\067\002\000\002\025\014\000\002\070" +
    "\002\000\002\027\006\000\002\026\004\000\002\030\007" +
    "\000\002\042\003\000\002\042\002\000\002\050\005\000" +
    "\002\050\003\000\002\050\005\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\004\000\002\050\004\000\002" +
    "\050\006\000\002\050\010\000\002\050\005\000\002\050" +
    "\005\000\002\050\006\000\002\034\005\000\002\034\006" +
    "\000\002\071\002\000\002\072\002\000\002\036\010\000" +
    "\002\073\002\000\002\036\011\000\002\074\002\000\002" +
    "\036\011\000\002\040\006\000\002\040\010\000\002\037" +
    "\003\000\002\037\002\000\002\044\003\000\002\044\005" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\030\003\ufffe\007\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\020\ufffe\024\ufffe\026\ufffe\064\ufffe\065\005" +
    "\001\002\000\004\002\363\001\002\000\004\066\362\001" +
    "\002\000\030\003\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\020\ufffe\024\ufffe\026\ufffe\064\ufffe\065\005\001" +
    "\002\000\026\003\024\007\022\011\027\012\012\013\015" +
    "\014\014\020\021\024\030\026\010\064\013\001\002\000" +
    "\004\007\335\001\002\000\030\002\ufff8\003\ufff8\007\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\020\ufff8\024\ufff8\026" +
    "\ufff8\064\ufff8\001\002\000\010\007\uffef\017\uffef\022\uffef" +
    "\001\002\000\014\007\022\011\027\012\012\013\015\014" +
    "\014\001\002\000\010\007\uffed\017\uffed\022\uffed\001\002" +
    "\000\010\007\uffee\017\uffee\022\uffee\001\002\000\030\002" +
    "\ufffa\003\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\020\ufffa\024\ufffa\026\ufffa\064\ufffa\001\002\000\030\002" +
    "\ufff5\003\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\020\ufff5\024\ufff5\026\ufff5\064\ufff5\001\002\000\006\007" +
    "\321\017\303\001\002\000\004\007\060\001\002\000\010" +
    "\007\uffec\017\uffec\022\uffec\001\002\000\030\002\ufff9\003" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\020\ufff9" +
    "\024\ufff9\026\ufff9\064\ufff9\001\002\000\006\010\056\055" +
    "\057\001\002\000\004\010\055\001\002\000\030\002\ufffb" +
    "\003\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\020" +
    "\ufffb\024\ufffb\026\ufffb\064\ufffb\001\002\000\010\007\ufff0" +
    "\017\ufff0\022\ufff0\001\002\000\004\007\032\001\002\000" +
    "\030\002\ufffc\003\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\020\ufffc\024\ufffc\026\ufffc\064\ufffc\001\002\000" +
    "\010\025\uffde\054\uffde\056\uffde\001\002\000\010\025\uffd8" +
    "\054\uffd8\056\034\001\002\000\004\007\054\001\002\000" +
    "\006\025\036\054\uffd6\001\002\000\004\007\050\001\002" +
    "\000\004\054\040\001\002\000\022\007\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\020\uffdd\055\uffdd\064\uffdd\001\002" +
    "\000\022\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\020" +
    "\uffda\055\uffda\064\uffda\001\002\000\022\007\022\011\027" +
    "\012\012\013\015\014\014\020\021\055\045\064\013\001" +
    "\002\000\022\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\020\uffd3\055\uffd3\064\uffd3\001\002\000\022\007\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\020\uffdb\055\uffdb\064\uffdb" +
    "\001\002\000\030\002\uffdc\003\uffdc\007\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\020\uffdc\024\uffdc\026\uffdc\064\uffdc" +
    "\001\002\000\022\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\020\uffd2\055\uffd2\064\uffd2\001\002\000\022\007\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\020\uffd1\055\uffd1\064" +
    "\uffd1\001\002\000\006\023\uffd5\054\uffd5\001\002\000\006" +
    "\023\052\054\uffd7\001\002\000\004\007\053\001\002\000" +
    "\006\023\uffd4\054\uffd4\001\002\000\006\025\uffd9\054\uffd9" +
    "\001\002\000\106\002\ufff3\003\ufff3\004\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\020\ufff3\021\ufff3\024\ufff3\026\ufff3\027\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\054\ufff3\055" +
    "\ufff3\057\ufff3\064\ufff3\067\ufff3\001\002\000\030\002\ufff7" +
    "\003\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\020" +
    "\ufff7\024\ufff7\026\ufff7\064\ufff7\001\002\000\030\002\ufff6" +
    "\003\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\020" +
    "\ufff6\024\ufff6\026\ufff6\064\ufff6\001\002\000\004\021\uffe6" +
    "\001\002\000\004\021\062\001\002\000\016\007\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\022\uffe5\001\002\000\016" +
    "\007\022\011\027\012\012\013\015\014\014\022\uffe1\001" +
    "\002\000\006\007\320\017\303\001\002\000\006\022\uffe0" +
    "\023\uffe0\001\002\000\004\022\072\001\002\000\006\022" +
    "\uffe2\023\070\001\002\000\014\007\022\011\027\012\012" +
    "\013\015\014\014\001\002\000\006\022\uffdf\023\uffdf\001" +
    "\002\000\004\054\uffe4\001\002\000\004\054\074\001\002" +
    "\000\074\004\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\021\uffb7\027\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\054\uffb7" +
    "\055\uffb7\057\uffb7\064\uffb7\067\uffb7\001\002\000\032\002" +
    "\uffe3\003\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\020\uffe3\024\uffe3\026\uffe3\055\uffe3\064\uffe3\001\002\000" +
    "\074\004\104\007\122\010\121\011\027\012\012\013\015" +
    "\014\014\015\077\016\133\021\123\027\uffc6\031\uffc2\032" +
    "\uffc4\033\106\034\131\035\134\036\140\041\107\042\110" +
    "\043\120\044\114\046\125\047\103\050\113\054\074\055" +
    "\uffb5\057\112\064\013\067\111\001\002\000\034\004\uff84" +
    "\005\uff84\006\uff84\010\uff84\022\uff84\023\uff84\037\uff84\040" +
    "\uff84\045\uff84\060\uff84\061\uff84\062\uff84\063\uff84\001\002" +
    "\000\064\004\uffbf\007\uffbf\010\uffbf\015\uffbf\016\uffbf\021" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\054\uffbf\055\uffbf\057\uffbf\067\uffbf" +
    "\001\002\000\004\055\317\001\002\000\034\004\uffa8\005" +
    "\uffa8\006\uffa8\010\uffa8\022\uffa8\023\uffa8\037\uffa8\040\uffa8" +
    "\045\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\001\002\000" +
    "\034\004\uff82\005\uff82\006\uff82\010\uff82\022\uff82\023\uff82" +
    "\037\uff82\040\uff82\045\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\001\002\000\040\004\104\007\144\015\077\016\133" +
    "\021\123\036\140\041\107\042\110\043\120\044\114\046" +
    "\125\047\103\050\113\057\112\067\111\001\002\000\064" +
    "\004\uffbe\007\uffbe\010\uffbe\015\uffbe\016\uffbe\021\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\054\uffbe\055\uffbe\057\uffbe\067\uffbe\001\002" +
    "\000\042\004\104\007\144\010\uffac\015\077\016\133\021" +
    "\123\036\140\041\107\042\110\043\120\044\114\046\125" +
    "\047\103\050\113\057\112\067\111\001\002\000\040\004" +
    "\104\007\144\015\077\016\133\021\123\036\140\041\107" +
    "\042\110\043\120\044\114\046\125\047\103\050\113\057" +
    "\112\067\111\001\002\000\004\021\307\001\002\000\034" +
    "\004\uff86\005\uff86\006\uff86\010\uff86\022\uff86\023\uff86\037" +
    "\uff86\040\uff86\045\uff86\060\uff86\061\uff86\062\uff86\063\uff86" +
    "\001\002\000\004\021\304\001\002\000\004\021\276\001" +
    "\002\000\004\021\274\001\002\000\004\031\260\001\002" +
    "\000\004\032\252\001\002\000\004\027\242\001\002\000" +
    "\004\021\240\001\002\000\064\004\uffc7\007\uffc7\010\uffc7" +
    "\015\uffc7\016\uffc7\021\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\054\uffc7\055" +
    "\uffc7\057\uffc7\067\uffc7\001\002\000\036\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffec\010\uffaa\017\uffec\021\147\037\uffaa\045" +
    "\145\053\146\060\uffaa\061\uffaa\062\uffaa\063\uffaa\001\002" +
    "\000\040\004\104\007\144\015\077\016\133\021\123\036" +
    "\140\041\107\042\110\043\120\044\114\046\125\047\103" +
    "\050\113\057\112\067\111\001\002\000\064\004\uffbd\007" +
    "\uffbd\010\uffbd\015\uffbd\016\uffbd\021\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\054\uffbd\055\uffbd\057\uffbd\067\uffbd\001\002\000\034\004" +
    "\uff85\005\uff85\006\uff85\010\uff85\022\uff85\023\uff85\037\uff85" +
    "\040\uff85\045\uff85\060\uff85\061\uff85\062\uff85\063\uff85\001" +
    "\002\000\026\004\157\005\164\006\162\010\235\037\165" +
    "\045\156\060\161\061\155\062\160\063\163\001\002\000" +
    "\036\004\uffa7\005\uffa7\006\uffa7\010\uffa7\022\uffa7\023\uffa7" +
    "\037\uffa7\040\uffa7\045\uffa7\053\233\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\001\002\000\074\004\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\021" +
    "\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\054\uffb9\055\uffb9\057\uffb9\064\uffb9\067\uffb9" +
    "\001\002\000\004\010\232\001\002\000\062\004\104\007" +
    "\144\010\121\015\077\016\133\021\123\027\uffc6\031\uffc2" +
    "\032\uffc4\033\106\034\131\035\134\036\140\041\107\042" +
    "\110\043\120\044\114\046\125\047\103\050\113\054\074" +
    "\055\uffb5\057\112\067\111\001\002\000\034\004\uff83\005" +
    "\uff83\006\uff83\010\uff83\022\uff83\023\uff83\037\uff83\040\uff83" +
    "\045\uff83\060\uff83\061\uff83\062\uff83\063\uff83\001\002\000" +
    "\004\021\141\001\002\000\074\004\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021" +
    "\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\054\uffb8\055\uffb8\057\uffb8\064\uffb8\067\uffb8" +
    "\001\002\000\034\004\uffa5\005\uffa5\006\uffa5\010\uffa5\022" +
    "\uffa5\023\uffa5\037\uffa5\040\uffa5\045\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\001\002\000\064\004\uffc0\007\uffc0\010" +
    "\uffc0\015\uffc0\016\uffc0\021\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\054\uffc0" +
    "\055\uffc0\057\uffc0\067\uffc0\001\002\000\034\004\uffa6\005" +
    "\uffa6\006\uffa6\010\uffa6\022\uffa6\023\uffa6\037\uffa6\040\uffa6" +
    "\045\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\001\002\000" +
    "\040\004\104\007\144\015\077\016\133\021\123\036\140" +
    "\041\107\042\110\043\120\044\114\046\125\047\103\050" +
    "\113\057\112\067\111\001\002\000\006\022\227\023\153" +
    "\001\002\000\030\004\157\005\164\006\162\022\uff88\023" +
    "\uff88\037\165\045\156\060\161\061\155\062\160\063\163" +
    "\001\002\000\040\004\uffaa\005\uffaa\006\uffaa\010\uffaa\021" +
    "\147\022\uffaa\023\uffaa\037\uffaa\040\uffaa\045\145\053\146" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\001\002\000\004\007" +
    "\222\001\002\000\040\004\104\007\144\015\077\016\133" +
    "\021\123\036\140\041\107\042\110\043\120\044\114\046" +
    "\125\047\103\050\113\057\112\067\111\001\002\000\042" +
    "\004\uff93\007\uff93\015\uff93\016\uff93\021\uff93\022\uff93\036" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\046\uff93\047\uff93" +
    "\050\uff93\057\uff93\067\uff93\001\002\000\042\004\104\007" +
    "\144\015\077\016\133\021\123\022\uff89\036\140\041\107" +
    "\042\110\043\120\044\114\046\125\047\103\050\113\057" +
    "\112\067\111\001\002\000\004\022\uff92\001\002\000\006" +
    "\022\uff8a\023\153\001\002\000\040\004\104\007\144\015" +
    "\077\016\133\021\123\036\140\041\107\042\110\043\120" +
    "\044\114\046\125\047\103\050\113\057\112\067\111\001" +
    "\002\000\030\004\157\005\164\006\162\022\uff87\023\uff87" +
    "\037\165\045\156\060\161\061\155\062\160\063\163\001" +
    "\002\000\040\004\104\007\144\015\077\016\133\021\123" +
    "\036\140\041\107\042\110\043\120\044\114\046\125\047" +
    "\103\050\113\057\112\067\111\001\002\000\010\007\200" +
    "\051\176\052\177\001\002\000\040\004\104\007\144\015" +
    "\077\016\133\021\123\036\140\041\107\042\110\043\120" +
    "\044\114\046\125\047\103\050\113\057\112\067\111\001" +
    "\002\000\040\004\104\007\144\015\077\016\133\021\123" +
    "\036\140\041\107\042\110\043\120\044\114\046\125\047" +
    "\103\050\113\057\112\067\111\001\002\000\040\004\104" +
    "\007\144\015\077\016\133\021\123\036\140\041\107\042" +
    "\110\043\120\044\114\046\125\047\103\050\113\057\112" +
    "\067\111\001\002\000\040\004\104\007\144\015\077\016" +
    "\133\021\123\036\140\041\107\042\110\043\120\044\114" +
    "\046\125\047\103\050\113\057\112\067\111\001\002\000" +
    "\040\004\104\007\144\015\077\016\133\021\123\036\140" +
    "\041\107\042\110\043\120\044\114\046\125\047\103\050" +
    "\113\057\112\067\111\001\002\000\040\004\104\007\144" +
    "\015\077\016\133\021\123\036\140\041\107\042\110\043" +
    "\120\044\114\046\125\047\103\050\113\057\112\067\111" +
    "\001\002\000\040\004\104\007\144\015\077\016\133\021" +
    "\123\036\140\041\107\042\110\043\120\044\114\046\125" +
    "\047\103\050\113\057\112\067\111\001\002\000\026\004" +
    "\157\005\164\006\162\037\165\040\167\045\156\060\161" +
    "\061\155\062\160\063\163\001\002\000\036\004\uff94\005" +
    "\uff94\006\uff94\010\uff94\022\uff94\023\uff94\037\uff94\040\uff94" +
    "\045\uff94\053\uff94\060\uff94\061\uff94\062\uff94\063\uff94\001" +
    "\002\000\032\004\157\006\uff9e\010\uff9e\022\uff9e\023\uff9e" +
    "\037\165\040\uff9e\045\156\060\161\061\155\062\160\063" +
    "\163\001\002\000\034\004\uffa0\005\uffa0\006\uffa0\010\uffa0" +
    "\022\uffa0\023\uffa0\037\165\040\uffa0\045\156\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\001\002\000\034\004\157\005\164" +
    "\006\uff9f\010\uff9f\022\uff9f\023\uff9f\037\165\040\uff9f\045" +
    "\156\060\161\061\155\062\160\063\163\001\002\000\034" +
    "\004\uffa3\005\uffa3\006\uffa3\010\uffa3\022\uffa3\023\uffa3\037" +
    "\165\040\uffa3\045\156\060\uffa3\061\155\062\160\063\163" +
    "\001\002\000\034\004\uffa1\005\uffa1\006\uffa1\010\uffa1\022" +
    "\uffa1\023\uffa1\037\165\040\uffa1\045\156\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\001\002\000\034\004\uff9d\005\uff9d\006" +
    "\uff9d\010\uff9d\022\uff9d\023\uff9d\037\165\040\uff9d\045\156" +
    "\060\uff9d\061\155\062\160\063\163\001\002\000\004\021" +
    "\213\001\002\000\004\021\206\001\002\000\036\004\uff95" +
    "\005\uff95\006\uff95\010\uff95\022\uff95\023\uff95\037\uff95\040" +
    "\uff95\045\uff95\053\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\001\002\000\004\021\202\001\002\000\042\004\uff8e\007" +
    "\uff8e\015\uff8e\016\uff8e\021\uff8e\022\uff8e\036\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\044\uff8e\046\uff8e\047\uff8e\050\uff8e\057" +
    "\uff8e\067\uff8e\001\002\000\042\004\104\007\144\015\077" +
    "\016\133\021\123\022\uff89\036\140\041\107\042\110\043" +
    "\120\044\114\046\125\047\103\050\113\057\112\067\111" +
    "\001\002\000\004\022\205\001\002\000\034\004\uff8d\005" +
    "\uff8d\006\uff8d\010\uff8d\022\uff8d\023\uff8d\037\uff8d\040\uff8d" +
    "\045\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\001\002\000" +
    "\040\004\104\007\144\015\077\016\133\021\123\036\140" +
    "\041\107\042\110\043\120\044\114\046\125\047\103\050" +
    "\113\057\112\067\111\001\002\000\026\004\157\005\164" +
    "\006\162\023\210\037\165\045\156\060\161\061\155\062" +
    "\160\063\163\001\002\000\040\004\104\007\144\015\077" +
    "\016\133\021\123\036\140\041\107\042\110\043\120\044" +
    "\114\046\125\047\103\050\113\057\112\067\111\001\002" +
    "\000\026\004\157\005\164\006\162\022\212\037\165\045" +
    "\156\060\161\061\155\062\160\063\163\001\002\000\004" +
    "\021\uff8b\001\002\000\040\004\104\007\144\015\077\016" +
    "\133\021\123\036\140\041\107\042\110\043\120\044\114" +
    "\046\125\047\103\050\113\057\112\067\111\001\002\000" +
    "\026\004\157\005\164\006\162\022\215\037\165\045\156" +
    "\060\161\061\155\062\160\063\163\001\002\000\004\021" +
    "\uff8c\001\002\000\034\004\uffa2\005\uffa2\006\uffa2\010\uffa2" +
    "\022\uffa2\023\uffa2\037\165\040\uffa2\045\156\060\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\001\002\000\004\022\220\001\002" +
    "\000\034\004\uff91\005\uff91\006\uff91\010\uff91\022\uff91\023" +
    "\uff91\037\uff91\040\uff91\045\uff91\060\uff91\061\uff91\062\uff91" +
    "\063\uff91\001\002\000\034\004\157\005\164\006\162\010" +
    "\uffa9\022\uffa9\023\uffa9\037\165\040\uffa9\045\156\060\161" +
    "\061\155\062\160\063\163\001\002\000\004\021\223\001" +
    "\002\000\042\004\uff90\007\uff90\015\uff90\016\uff90\021\uff90" +
    "\022\uff90\036\uff90\041\uff90\042\uff90\043\uff90\044\uff90\046" +
    "\uff90\047\uff90\050\uff90\057\uff90\067\uff90\001\002\000\042" +
    "\004\104\007\144\015\077\016\133\021\123\022\uff89\036" +
    "\140\041\107\042\110\043\120\044\114\046\125\047\103" +
    "\050\113\057\112\067\111\001\002\000\004\022\226\001" +
    "\002\000\034\004\uff8f\005\uff8f\006\uff8f\010\uff8f\022\uff8f" +
    "\023\uff8f\037\uff8f\040\uff8f\045\uff8f\060\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\001\002\000\004\010\230\001\002\000\064" +
    "\004\uffae\007\uffae\010\uffae\015\uffae\016\uffae\021\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\041\uffae\042\uffae\043\uffae\044\uffae\046\uffae\047" +
    "\uffae\050\uffae\054\uffae\055\uffae\057\uffae\067\uffae\001\002" +
    "\000\004\055\uffb6\001\002\000\064\004\uffaf\007\uffaf\010" +
    "\uffaf\015\uffaf\016\uffaf\021\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\054\uffaf" +
    "\055\uffaf\057\uffaf\067\uffaf\001\002\000\040\004\104\007" +
    "\144\015\077\016\133\021\123\036\140\041\107\042\110" +
    "\043\120\044\114\046\125\047\103\050\113\057\112\067" +
    "\111\001\002\000\034\004\157\005\164\006\162\010\uffab" +
    "\022\uffab\023\uffab\037\165\040\uffab\045\156\060\161\061" +
    "\155\062\160\063\163\001\002\000\064\004\uffc8\007\uffc8" +
    "\010\uffc8\015\uffc8\016\uffc8\021\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8\054" +
    "\uffc8\055\uffc8\057\uffc8\067\uffc8\001\002\000\026\004\157" +
    "\005\164\006\162\022\237\037\165\045\156\060\161\061" +
    "\155\062\160\063\163\001\002\000\034\004\uffa4\005\uffa4" +
    "\006\uffa4\010\uffa4\022\uffa4\023\uffa4\037\uffa4\040\uffa4\045" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\001\002\000\004" +
    "\022\241\001\002\000\034\004\uff98\005\uff98\006\uff98\010" +
    "\uff98\022\uff98\023\uff98\037\uff98\040\uff98\045\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\001\002\000\004\021\244\001" +
    "\002\000\064\004\uffc5\007\uffc5\010\uffc5\015\uffc5\016\uffc5" +
    "\021\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\054\uffc5\055\uffc5\057\uffc5\067" +
    "\uffc5\001\002\000\040\004\104\007\144\015\077\016\133" +
    "\021\123\036\140\041\107\042\110\043\120\044\114\046" +
    "\125\047\103\050\113\057\112\067\111\001\002\000\026" +
    "\004\157\005\164\006\162\022\246\037\165\045\156\060" +
    "\161\061\155\062\160\063\163\001\002\000\060\004\104" +
    "\007\144\010\121\015\077\016\133\021\123\027\uffc6\031" +
    "\uffc2\032\uffc4\033\106\034\131\035\134\036\140\041\107" +
    "\042\110\043\120\044\114\046\125\047\103\050\113\054" +
    "\074\057\112\067\111\001\002\000\064\004\uffbb\007\uffbb" +
    "\010\uffbb\015\uffbb\016\uffbb\021\uffbb\027\uffbb\030\250\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\054" +
    "\uffbb\055\uffbb\057\uffbb\067\uffbb\001\002\000\060\004\104" +
    "\007\144\010\121\015\077\016\133\021\123\027\uffc6\031" +
    "\uffc2\032\uffc4\033\106\034\131\035\134\036\140\041\107" +
    "\042\110\043\120\044\114\046\125\047\103\050\113\054" +
    "\074\057\112\067\111\001\002\000\064\004\uffba\007\uffba" +
    "\010\uffba\015\uffba\016\uffba\021\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\046\uffba\047\uffba\050\uffba\054" +
    "\uffba\055\uffba\057\uffba\067\uffba\001\002\000\004\021\254" +
    "\001\002\000\064\004\uffc3\007\uffc3\010\uffc3\015\uffc3\016" +
    "\uffc3\021\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\054\uffc3\055\uffc3\057\uffc3" +
    "\067\uffc3\001\002\000\040\004\104\007\144\015\077\016" +
    "\133\021\123\036\140\041\107\042\110\043\120\044\114" +
    "\046\125\047\103\050\113\057\112\067\111\001\002\000" +
    "\026\004\157\005\164\006\162\022\256\037\165\045\156" +
    "\060\161\061\155\062\160\063\163\001\002\000\060\004" +
    "\104\007\144\010\121\015\077\016\133\021\123\027\uffc6" +
    "\031\uffc2\032\uffc4\033\106\034\131\035\134\036\140\041" +
    "\107\042\110\043\120\044\114\046\125\047\103\050\113" +
    "\054\074\057\112\067\111\001\002\000\064\004\uffb4\007" +
    "\uffb4\010\uffb4\015\uffb4\016\uffb4\021\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\054\uffb4\055\uffb4\057\uffb4\067\uffb4\001\002\000\004\021" +
    "\262\001\002\000\064\004\uffc1\007\uffc1\010\uffc1\015\uffc1" +
    "\016\uffc1\021\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\046\uffc1\047\uffc1\050\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\067\uffc1\001\002\000\042\004\104\007\144\010\uffac" +
    "\015\077\016\133\021\123\036\140\041\107\042\110\043" +
    "\120\044\114\046\125\047\103\050\113\057\112\067\111" +
    "\001\002\000\030\004\157\005\164\006\162\010\uffad\022" +
    "\uffad\037\165\045\156\060\161\061\155\062\160\063\163" +
    "\001\002\000\004\010\uffb3\001\002\000\004\010\266\001" +
    "\002\000\040\004\104\007\144\015\077\016\133\021\123" +
    "\036\140\041\107\042\110\043\120\044\114\046\125\047" +
    "\103\050\113\057\112\067\111\001\002\000\026\004\157" +
    "\005\164\006\162\010\270\037\165\045\156\060\161\061" +
    "\155\062\160\063\163\001\002\000\042\004\104\007\144" +
    "\015\077\016\133\021\123\022\uffac\036\140\041\107\042" +
    "\110\043\120\044\114\046\125\047\103\050\113\057\112" +
    "\067\111\001\002\000\004\022\272\001\002\000\060\004" +
    "\104\007\144\010\121\015\077\016\133\021\123\027\uffc6" +
    "\031\uffc2\032\uffc4\033\106\034\131\035\134\036\140\041" +
    "\107\042\110\043\120\044\114\046\125\047\103\050\113" +
    "\054\074\057\112\067\111\001\002\000\064\004\uffb2\007" +
    "\uffb2\010\uffb2\015\uffb2\016\uffb2\021\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\054\uffb2\055\uffb2\057\uffb2\067\uffb2\001\002\000\004\022" +
    "\275\001\002\000\034\004\uff97\005\uff97\006\uff97\010\uff97" +
    "\022\uff97\023\uff97\037\uff97\040\uff97\045\uff97\060\uff97\061" +
    "\uff97\062\uff97\063\uff97\001\002\000\040\004\104\007\144" +
    "\015\077\016\133\021\123\036\140\041\107\042\110\043" +
    "\120\044\114\046\125\047\103\050\113\057\112\067\111" +
    "\001\002\000\026\004\157\005\164\006\162\023\300\037" +
    "\165\045\156\060\161\061\155\062\160\063\163\001\002" +
    "\000\014\007\022\011\027\012\012\013\015\014\014\001" +
    "\002\000\006\017\303\022\302\001\002\000\034\004\uff99" +
    "\005\uff99\006\uff99\010\uff99\022\uff99\023\uff99\037\uff99\040" +
    "\uff99\045\uff99\060\uff99\061\uff99\062\uff99\063\uff99\001\002" +
    "\000\010\007\uffeb\017\uffeb\022\uffeb\001\002\000\004\007" +
    "\305\001\002\000\004\022\306\001\002\000\034\004\uff9a" +
    "\005\uff9a\006\uff9a\010\uff9a\022\uff9a\023\uff9a\037\uff9a\040" +
    "\uff9a\045\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002" +
    "\000\040\004\104\007\144\015\077\016\133\021\123\036" +
    "\140\041\107\042\110\043\120\044\114\046\125\047\103" +
    "\050\113\057\112\067\111\001\002\000\026\004\157\005" +
    "\164\006\162\022\311\037\165\045\156\060\161\061\155" +
    "\062\160\063\163\001\002\000\034\004\uff96\005\uff96\006" +
    "\uff96\010\uff96\022\uff96\023\uff96\037\uff96\040\uff96\045\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\001\002\000\034\004" +
    "\uff9b\005\uff9b\006\uff9b\010\uff9b\022\uff9b\023\uff9b\037\165" +
    "\040\uff9b\045\156\060\uff9b\061\uff9b\062\uff9b\063\uff9b\001" +
    "\002\000\004\010\uffb1\001\002\000\004\010\315\001\002" +
    "\000\064\004\uffb0\007\uffb0\010\uffb0\015\uffb0\016\uffb0\021" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\054\uffb0\055\uffb0\057\uffb0\067\uffb0" +
    "\001\002\000\034\004\uff9c\005\uff9c\006\uff9c\010\uff9c\022" +
    "\uff9c\023\uff9c\037\165\040\uff9c\045\156\060\uff9c\061\155" +
    "\062\160\063\163\001\002\000\110\002\uffbc\003\uffbc\004" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\020\uffbc\021\uffbc\024\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\054\uffbc\055\uffbc\057\uffbc\064\uffbc\067\uffbc" +
    "\001\002\000\010\010\ufff1\022\ufff1\023\ufff1\001\002\000" +
    "\006\010\ufff1\021\uffea\001\002\000\004\021\323\001\002" +
    "\000\016\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\022" +
    "\uffe9\001\002\000\016\007\022\011\027\012\012\013\015" +
    "\014\014\022\uffe1\001\002\000\004\022\326\001\002\000" +
    "\004\054\uffe8\001\002\000\004\054\074\001\002\000\032" +
    "\002\uffe7\003\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\020\uffe7\024\uffe7\026\uffe7\055\uffe7\064\uffe7\001\002" +
    "\000\030\002\000\003\024\007\022\011\027\012\012\013" +
    "\015\014\014\020\021\024\030\026\010\064\013\001\002" +
    "\000\030\002\ufff4\003\ufff4\007\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\020\ufff4\024\ufff4\026\ufff4\064\ufff4\001\002" +
    "\000\004\010\334\001\002\000\106\002\ufff2\003\ufff2\004" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\020\ufff2\021\ufff2\024\ufff2\026\ufff2\027" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\047\ufff2\050" +
    "\ufff2\054\ufff2\055\ufff2\057\ufff2\064\ufff2\067\ufff2\001\002" +
    "\000\004\054\uffd0\001\002\000\004\054\337\001\002\000" +
    "\020\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\020\uffcf" +
    "\055\uffcf\001\002\000\020\007\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\020\uffcb\055\uffcb\001\002\000\020\007\022" +
    "\011\027\012\012\013\015\014\014\020\343\055\uffce\001" +
    "\002\000\006\007\354\017\303\001\002\000\004\007\347" +
    "\001\002\000\020\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\020\uffcc\055\uffcc\001\002\000\004\055\346\001\002" +
    "\000\030\002\uffcd\003\uffcd\007\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\020\uffcd\024\uffcd\026\uffcd\064\uffcd\001\002" +
    "\000\004\021\350\001\002\000\016\007\022\011\027\012" +
    "\012\013\015\014\014\022\uffe1\001\002\000\004\022\352" +
    "\001\002\000\004\010\353\001\002\000\020\007\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\020\uffc9\055\uffc9\001\002" +
    "\000\004\021\355\001\002\000\016\007\022\011\027\012" +
    "\012\013\015\014\014\022\uffe1\001\002\000\004\022\357" +
    "\001\002\000\004\010\360\001\002\000\020\007\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\020\uffca\055\uffca\001\002" +
    "\000\026\003\uffff\007\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\020\uffff\024\uffff\026\uffff\064\uffff\001\002\000\030" +
    "\003\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\020" +
    "\ufffd\024\ufffd\026\ufffd\064\ufffd\065\ufffd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\010\003\003\046\006\047\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\360\047\005" +
    "\001\001\000\022\004\016\005\030\006\025\007\015\011" +
    "\022\012\024\013\017\045\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\332\013" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\032" +
    "\001\001\000\004\017\034\001\001\000\002\001\001\000" +
    "\004\020\036\001\001\000\004\043\050\001\001\000\002" +
    "\001\001\000\004\060\040\001\001\000\004\031\041\001" +
    "\001\000\016\005\042\006\045\012\024\013\017\016\043" +
    "\045\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\060\001\001\000\002\001" +
    "\001\000\004\055\062\001\001\000\012\002\066\012\064" +
    "\013\063\014\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\070" +
    "\013\063\001\001\000\002\001\001\000\004\056\072\001" +
    "\001\000\004\015\074\001\001\000\004\032\075\001\001" +
    "\000\002\001\001\000\044\005\127\012\024\013\063\015" +
    "\123\022\131\026\136\027\077\030\104\033\100\034\126" +
    "\035\101\036\135\045\134\050\125\064\116\065\115\066" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\126\035\101\036\135\050\315\001\001\000\002\001\001" +
    "\000\014\034\126\035\101\036\135\042\312\050\262\001" +
    "\001\000\012\034\126\035\101\036\135\050\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\260\001\001" +
    "\000\004\024\252\001\001\000\004\023\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\126\035\101\036\135\050\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\015\123\022" +
    "\131\026\136\027\077\030\104\033\230\034\126\035\101" +
    "\036\135\050\125\064\116\065\115\066\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\126\035\101\036\135\044\141\050\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\126\035\101\036\135\050\220\001\001" +
    "\000\004\071\147\001\001\000\016\034\126\035\101\036" +
    "\135\037\150\044\151\050\142\001\001\000\004\072\216" +
    "\001\001\000\002\001\001\000\012\034\126\035\101\036" +
    "\135\050\153\001\001\000\002\001\001\000\012\034\126" +
    "\035\101\036\135\050\215\001\001\000\004\040\200\001" +
    "\001\000\012\034\126\035\101\036\135\050\174\001\001" +
    "\000\012\034\126\035\101\036\135\050\173\001\001\000" +
    "\012\034\126\035\101\036\135\050\172\001\001\000\012" +
    "\034\126\035\101\036\135\050\171\001\001\000\012\034" +
    "\126\035\101\036\135\050\170\001\001\000\012\034\126" +
    "\035\101\036\135\050\167\001\001\000\012\034\126\035" +
    "\101\036\135\050\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\202\001\001\000\016\034\126" +
    "\035\101\036\135\037\203\044\151\050\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\126\035\101" +
    "\036\135\050\206\001\001\000\002\001\001\000\012\034" +
    "\126\035\101\036\135\050\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\126\035\101\036\135\050" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\223\001\001\000\016" +
    "\034\126\035\101\036\135\037\224\044\151\050\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\126\035\101\036\135\050\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\126\035\101\036\135\050" +
    "\244\001\001\000\002\001\001\000\032\015\123\022\246" +
    "\026\136\027\077\030\104\034\126\035\101\036\135\050" +
    "\125\064\116\065\115\066\114\001\001\000\002\001\001" +
    "\000\032\015\123\022\250\026\136\027\077\030\104\034" +
    "\126\035\101\036\135\050\125\064\116\065\115\066\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\126\035\101\036\135\050\254\001\001" +
    "\000\002\001\001\000\032\015\123\022\256\026\136\027" +
    "\077\030\104\034\126\035\101\036\135\050\125\064\116" +
    "\065\115\066\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\126\035\101\036\135" +
    "\042\263\050\262\001\001\000\002\001\001\000\004\067" +
    "\264\001\001\000\002\001\001\000\012\034\126\035\101" +
    "\036\135\050\266\001\001\000\002\001\001\000\014\034" +
    "\126\035\101\036\135\042\270\050\262\001\001\000\002" +
    "\001\001\000\032\015\123\022\272\026\136\027\077\030" +
    "\104\034\126\035\101\036\135\050\125\064\116\065\115" +
    "\066\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\126\035\101\036\135\050\276" +
    "\001\001\000\002\001\001\000\004\013\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\126\035\101\036\135\050\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\321\001" +
    "\001\000\002\001\001\000\004\052\323\001\001\000\012" +
    "\002\066\012\064\013\063\014\324\001\001\000\002\001" +
    "\001\000\004\053\326\001\001\000\004\015\327\001\001" +
    "\000\002\001\001\000\022\004\331\005\030\006\025\007" +
    "\015\011\022\012\024\013\017\045\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\335\001\001\000\002\001\001\000\004\062\337\001\001" +
    "\000\004\041\340\001\001\000\010\013\341\021\343\063" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\066\012\064\013\063\014\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\066\012\064\013\063\014\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<TError> TablaES = new LinkedList<TError>();

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 
   
    boolean WritingParameters = false;
    boolean ReadingParameters = false;
    int CurrentParameter = 0;
    String CurrentFile = "";
    oSymbol CurrentFunction;
    public void MostrarFilaColumnaError(int Fila, int Columna, String error) throws BadLocationException{
      String newMssg = (Directory.GetCurrentFile() + " - Fila: " + Fila + " - Columna: " + Columna +" - " + error);
      Interfaz.getInterfaz().AddTextToJTextArea(newMssg + "\n");
    }


    public boolean isNumber(String s){
        try{
            Double.valueOf(s);
            return true;
        }catch(Exception e){
            return false;
        }
    }
    
    public boolean isInteger(String s){
        if(isNumber(s) && !s.contains(".")){
            return true;
        }
        return false;
    }

    
    public boolean isBoolean(String s){
        return (s.equals("true") || s.equals("false"));
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Constant ::= t_null 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Constant ::= strConst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Constant ::= bolCnst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Constant ::= dblConst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Constant ::= intCnst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExprList ::= ExprList comma Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(CurrentFunction == null){

                        }else{
                            try{
                                if((CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("int")  && !isInteger(e))|| 
                                (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("double") && !isNumber(e))|| 
                                (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("bool") && !isBoolean(e))){
                                    MostrarFilaColumnaError(eright, eleft, "El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");                          
                                    System.out.println("El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");
                                }
                                else if(CurrentParameter!=CurrentFunction.Parameters.size()-1 && !(CurrentParameter!=CurrentFunction.Parameters.size()-1)){
                                    MostrarFilaColumnaError(eright, eleft, "Se reciben más de los parámetros necesarios para la función.");                          
                                    System.out.println("Se reciben más de los parámetros necesarios para la función.");
                                }
                            }catch(Exception ex){
                                MostrarFilaColumnaError(eright, eleft, "El número de parámetros no coincide con la definición del mismo");                          
                                System.out.println("El número de parámetros no coincide con la definición del mismo");
                            }
                            CurrentParameter++;  
                        }
                                              

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExprList ::= Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(CurrentFunction == null){
                            System.out.println("No se encuentra el símbolo en el contexto actual");
                        }else{
                             try{    
                                if((CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("int")  && !isInteger(e))|| 
                                    (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("double") && !isNumber(e))|| 
                                    (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("bool") && !isBoolean(e))){
                                    MostrarFilaColumnaError(eright, eleft, "El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");                          
                                    System.out.println("El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");
                                }
                            } catch (Exception ex){
                                MostrarFilaColumnaError(eright, eleft, "El número de parámetros no coincide con la definición del mismo");                          
                                System.out.println("El número de parámetros no coincide con la definición del mismo");
                            } 
                            CurrentParameter++; 
                            }
                       
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Actuals ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Actuals ::= ExprList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LibCall ::= setByte prnthss_A Expr comma Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LibCall ::= getByte prnthss_A Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Call ::= Expr dot LibCall prnthss_A NT$19 Actuals prnthss_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 WritingParameters = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$19 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value; CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i); WritingParameters = true; CurrentParameter = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Call ::= ident dot ident prnthss_A NT$18 Actuals prnthss_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
             WritingParameters = false; 
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$18 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

             System.out.println("Expr dot ident");
             if(ManejadorScopes.getInstancia().GetSimbolo(i1)==null){
                System.out.println("No se encuentra el símbolo en el ámbito actual");
                return null;                 
             }
             String clasePerteneceA = ManejadorScopes.getInstancia().GetSimbolo(i1).DataType;
             oSymbol functionSymbol = ManejadorScopes.getInstancia().GetFuncion(clasePerteneceA, i);
             if(functionSymbol == null){
                 CurrentFunction = functionSymbol;
                 System.out.println("No se encuentra la función en la tabla de símbolos");
                 RESULT = null;
             }else{
                RESULT = functionSymbol.Value; 
                CurrentFunction = functionSymbol; 
                WritingParameters = true; 
                CurrentParameter = 0; 
             }

            
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Call ::= ident prnthss_A NT$16 Actuals NT$17 prnthss_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
              if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
            }else{
                WritingParameters = false;
            }


             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                if(ManejadorScopes.getInstancia().GetSimbolo(i)==null) ;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$16 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

            CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
            if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
                System.out.println("No se encuentra el símbolo en el ámbito actual"); 
             RESULT = "null";
            }else{
                RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value; 
                CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                RESULT = CurrentFunction.Value;
                WritingParameters = true; 
                CurrentParameter = 0;
            }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LValue ::= Expr brackets_A Expr brackets_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LValue ::= Expr dot ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expr ::= malloc prnthss_A Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= ReadLine prnthss_A prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= readInteger prnthss_A prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= t_newArr prnthss_A Expr comma Type prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= t_new prnthss_A ident prnthss_C 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= neg Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(e==null){
                    System.out.println("La variable " + e + " nunca fue asignada.");
                } else{
                    System.out.println("Operación de negación !("+e+") = "+ !(Boolean.valueOf(e)));
                    RESULT = String.valueOf(!(Boolean.valueOf(e)));
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= minus Expr 
            {
              String RESULT =null;
		

             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr minus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) - Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr cmpop Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if(e2==null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }
                else if(c.equals("==")){
                    RESULT = String.valueOf(e1.equals(e2));
                } else if(c.equals("<")){
                    RESULT = String.valueOf(Double.valueOf(e1) < Double.valueOf(e2));
                } else if(c.equals(">")){
                    RESULT = String.valueOf(Double.valueOf(e1) > Double.valueOf(e2));
                 }else if(c.equals("<=")){
                    RESULT = String.valueOf(Double.valueOf(e1) <= Double.valueOf(e2));
                } else if(c.equals("!=")){
                    RESULT = String.valueOf(!e1.equals(e2));
                } else if (c.equals(">=")){
                    RESULT = String.valueOf(Double.valueOf(e1) >= Double.valueOf(e2));
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr logop Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr mod Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) % Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr divide Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) / Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr times Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) * Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr plus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) + Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= prnthss_A Expr prnthss_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT  = e;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Call 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= t_this 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= LValue 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Constant 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= ident equals Expr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
                    MostrarFilaColumnaError(iright, ileft, "No existe el símbolo " + i + " en el ámbito actual. ");
                    System.out.println("El símbolo " + i + " no se encuentra en el ámbito actual.");
                }else if(e==null){
                    MostrarFilaColumnaError(iright, ileft, "No se puede asignar el valor de null a la variable.");
                    System.out.println("No se puede asignar el valor de null a la variable.");
                }else{
                    if((ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("int") == 0 && !isNumber(e)) 
                            || (ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("double") == 0 && !isNumber(e))
                            || (ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("bool") == 0 && !isBoolean(e))){
                        MostrarFilaColumnaError(iright, ileft, "El dato a asignar no es del mismo tipo que la variable");
                        System.out.println("El dato a asignar no es del mismo tipo que la variable");
                    } else{
                        String newData = e;
                        if(ManejadorScopes.getInstancia().GetSimbolo(i).DataType.equals("int")){
                            e = e.split("[.]")[0];
                        }
                        System.out.println("Se asignó a " + i + " el valor de " + e);
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = e;
                    }                   
                    
                }
            
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= ident 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(ManejadorScopes.getInstancia().GetSimbolo(i) != null){ // Existe
                    System.out.println("Se obtuvo correctamente el símbolo " + i);
                    RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value;
                }else {
                    MostrarFilaColumnaError(iright, ileft, "No existe el símbolo " + i + " en el ámbito actual. ");
                    System.out.println("No existe el símbolo " + i + " en el ámbito actual. ");
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= LValue equals Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExprOptional ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprOptional ::= Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrintStmt ::= print prnthss_A ExprList prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BreakStmt ::= t_break pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ReturnStmt ::= t_return ExprOptional NT$15 pyc 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$15 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        if(CurrentFunction.DataType.equals("double") && (e==null || !isNumber(e))){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        } else if(CurrentFunction.DataType.equals("int") && (e==null || !isInteger(e))){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        } else if(CurrentFunction.DataType.equals("string") && (e==null)){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función");
        } else if(CurrentFunction.DataType.equals("bool") && !isBoolean(e)){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función");
        } else if(CurrentFunction.DataType.equals("void") && e!=null){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ForStmt ::= t_for prnthss_A ExprOptional NT$14 pyc Expr pyc ExprOptional prnthss_C Stmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              String RESULT =null;
 System.out.println("Finaliza primer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // WhileStmt ::= t_while prnthss_A Expr prnthss_C Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StmtStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StmtStar ::= Stmt StmtStar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VariableDeclStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VariableDeclStar ::= VariableDeclStar ConstDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VariableDeclStar ::= VariableDeclStar VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt t_else Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StmtBlock ::= curly_A VariableDeclStar StmtStar curly_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= StmtBlock 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= PrintStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= ReturnStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= BreakStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= NT$13 ForStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$13 ::= 
            {
              String RESULT =null;
 ManejadorScopes.getInstancia().NuevoScope("for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= NT$12 WhileStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$12 ::= 
            {
              String RESULT =null;
 ManejadorScopes.getInstancia().NuevoScope("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= NT$11 IfStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$11 ::= 
            {
              String RESULT =null;
 ManejadorScopes.getInstancia().NuevoScope("if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= Expr pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Prototype ::= t_void ident prnthss_A Formals prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Prototype ::= Type ident prnthss_A Formals prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PrototypeStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PrototypeStar ::= PrototypeStar Prototype 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InterfaceDecl ::= t_interface ident NT$8 curly_A NT$9 PrototypeStar NT$10 curly_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 ManejadorScopes.getInstancia().FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 ManejadorScopes.getInstancia().NuevoScope(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$8 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Interface", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Field ::= ConstDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Field ::= FunctionDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Field ::= VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IdentList ::= IdentList comma ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IdentList ::= ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ImplementsIdentPlusCommaOptional ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ImplementsIdentPlusCommaOptional ::= t_implements IdentList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExtendsIdentOptional ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExtendsIdentOptional ::= extend ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FieldStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FieldStar ::= FieldStar Field 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassDecl ::= clase ident NT$6 ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_A NT$7 FieldStar curly_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 
    System.out.println("Finaliza Clase");
    ManejadorScopes.getInstancia().FinalizaScope(); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 ManejadorScopes.getInstancia().NuevoScope(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$6 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Class", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VariableList ::= VariableList comma Variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VariableList ::= Variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Formals ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Formals ::= VariableList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FunctionDecl ::= t_void ident NT$3 prnthss_A NT$4 Formals prnthss_C NT$5 StmtBlock 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
                     ManejadorScopes.getInstancia().FinalizaScope();
                     System.out.println("Finaliza void");
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 
                     WritingParameters = false;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                     ManejadorScopes.getInstancia().NuevoScope(i); WritingParameters = true; 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                    ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Function", null)); 
                     String CurrentIdFunction = i; 
                    CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunctionDecl ::= Type ident NT$0 prnthss_A NT$1 Formals prnthss_C NT$2 StmtBlock 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 
                      ManejadorScopes.getInstancia().FinalizaScope();
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                      WritingParameters = false; 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                      ManejadorScopes.getInstancia().NuevoScope(i); WritingParameters = true;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    String data = null;
                    if(t.equals("int")||t.equals("double")){
                        data = "0";
                    }
                     ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Function", data)); 
                     String CurrentIdFunction = i;  
                    CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                    if(t.equals("int")){
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "0";
                        RESULT="0";
                    }else if(t.equals("double")){
                        RESULT="0";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "0";
                    }else if(t.equals("bool")){
                        RESULT="true";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "false";
                    }else if(t.equals("string")){
                        RESULT = "\"\"";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "\"\"";
                    }    
                     
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= Type brackets 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= ident 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= t_string 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= t_bool 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= t_double 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= t_int 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Variable ::= Type ident 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        String data = null;
        if(t.equals("int")||t.equals("double")){
            data = "0";
        }
        oSymbol currentSymbol = new oSymbol(i, t, "Variable", data);
        ManejadorScopes.getInstancia().AgregarSimbolo(i, currentSymbol);  
        if(WritingParameters){
            ManejadorScopes.getInstancia().GetSimbolo(CurrentFunction.ID).AddParameters(currentSymbol);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= constante Variable pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VariableDecl ::= Variable pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DeclStar ::= DeclStar Decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DeclStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decl ::= error curly_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= error pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= ConstDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= InterfaceDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= ClassDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= FunctionDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Include ::= include library 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        if(Directory.getInstancia().AddFile(l.split(">")[0].split("<")[1])){
            System.out.println("/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/");
            System.out.println("\t\t\t\t\t\t\t\t\tInicia Comprobación Semántica de " + l);
            CurrentFile = l;
            Directory.getInstancia().CheckSemantics(l.split(">")[0].split("<")[1]);
            System.out.println("\t\t\t\t\t\t\t\t\tFinaliza Comprobación Semántica de " + l);
            System.out.println("/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/");
        };
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Include",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IncludeStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludeStar",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IncludeStar ::= Include IncludeStar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IncludeStar",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= IncludeStar Decl DeclStar 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

