
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 07 10:19:16 CST 2018
//----------------------------------------------------

package php.scanner;

import java_cup.runtime.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 07 10:19:16 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\010\002\000" +
    "\002\010\004\000\002\005\004\000\002\012\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\006\010" +
    "\000\002\006\010\000\002\014\003\000\002\014\005\000" +
    "\002\007\011\000\002\032\004\000\002\032\002\000\002" +
    "\017\004\000\002\017\002\000\002\020\004\000\002\020" +
    "\002\000\002\045\003\000\002\045\005\000\002\016\003" +
    "\000\002\016\003\000\002\011\007\000\002\042\004\000" +
    "\002\042\002\000\002\021\010\000\002\021\010\000\002" +
    "\022\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\015\006\000" +
    "\002\024\010\000\002\044\004\000\002\044\002\000\002" +
    "\033\004\000\002\033\002\000\002\034\004\000\002\034" +
    "\002\000\002\025\007\000\002\026\013\000\002\030\005" +
    "\000\002\027\004\000\002\031\010\000\002\043\003\000" +
    "\002\043\002\000\002\023\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\004\000\002\023\004" +
    "\000\002\023\006\000\002\023\010\000\002\023\004\000" +
    "\002\023\004\000\002\023\006\000\002\035\003\000\002" +
    "\035\005\000\002\035\006\000\002\037\006\000\002\037" +
    "\010\000\002\037\010\000\002\041\006\000\002\041\010" +
    "\000\002\040\003\000\002\040\002\000\002\046\003\000" +
    "\002\046\005\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\022\007\013\011\017\012\014\013\016\014" +
    "\012\020\020\024\021\026\023\001\002\000\006\007\300" +
    "\017\045\001\002\000\024\002\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\020\ufffa\024\ufffa\026\ufffa\001\002" +
    "\000\024\002\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\020\ufffd\024\ufffd\026\ufffd\001\002\000\024\002\ufff9" +
    "\007\013\011\017\012\014\013\016\014\012\020\020\024" +
    "\021\026\023\001\002\000\004\010\274\001\002\000\004" +
    "\002\273\001\002\000\010\007\ufff2\017\ufff2\022\ufff2\001" +
    "\002\000\010\007\ufff1\017\ufff1\022\ufff1\001\002\000\010" +
    "\007\ufff4\017\ufff4\022\ufff4\001\002\000\024\002\ufffb\007" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\020\ufffb\024\ufffb" +
    "\026\ufffb\001\002\000\010\007\ufff3\017\ufff3\022\ufff3\001" +
    "\002\000\010\007\ufff5\017\ufff5\022\ufff5\001\002\000\004" +
    "\007\075\001\002\000\004\007\054\001\002\000\024\002" +
    "\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\020\ufffc" +
    "\024\ufffc\026\ufffc\001\002\000\004\007\024\001\002\000" +
    "\004\056\025\001\002\000\020\007\013\011\017\012\014" +
    "\013\016\014\012\020\030\057\uffde\001\002\000\006\007" +
    "\047\017\045\001\002\000\004\057\046\001\002\000\004" +
    "\007\033\001\002\000\020\007\013\011\017\012\014\013" +
    "\016\014\012\020\030\057\uffde\001\002\000\004\057\uffdf" +
    "\001\002\000\004\021\034\001\002\000\014\007\013\011" +
    "\017\012\014\013\016\014\012\001\002\000\006\007\044" +
    "\017\045\001\002\000\006\022\041\023\040\001\002\000" +
    "\006\022\uffed\023\uffed\001\002\000\014\007\013\011\017" +
    "\012\014\013\016\014\012\001\002\000\004\010\042\001" +
    "\002\000\020\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\020\uffdc\057\uffdc\001\002\000\006\022\uffec\023\uffec\001" +
    "\002\000\010\010\ufff6\022\ufff6\023\ufff6\001\002\000\010" +
    "\007\ufff0\017\ufff0\022\ufff0\001\002\000\024\002\uffe0\007" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\020\uffe0\024\uffe0" +
    "\026\uffe0\001\002\000\004\021\050\001\002\000\014\007" +
    "\013\011\017\012\014\013\016\014\012\001\002\000\006" +
    "\022\052\023\040\001\002\000\004\010\053\001\002\000" +
    "\020\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\020\uffdd" +
    "\057\uffdd\001\002\000\010\025\uffe7\056\uffe7\060\055\001" +
    "\002\000\004\007\074\001\002\000\006\025\057\056\uffe5" +
    "\001\002\000\004\007\070\001\002\000\004\056\061\001" +
    "\002\000\020\007\013\011\017\012\014\013\016\014\012" +
    "\020\020\057\uffe9\001\002\000\020\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\020\uffe2\057\uffe2\001\002\000\004" +
    "\057\067\001\002\000\020\007\013\011\017\012\014\013" +
    "\016\014\012\020\020\057\uffe9\001\002\000\020\007\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\020\uffe1\057\uffe1\001" +
    "\002\000\004\057\uffea\001\002\000\024\002\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\020\uffeb\024\uffeb\026" +
    "\uffeb\001\002\000\006\023\uffe4\056\uffe4\001\002\000\006" +
    "\023\072\056\uffe6\001\002\000\004\007\073\001\002\000" +
    "\006\023\uffe3\056\uffe3\001\002\000\006\025\uffe8\056\uffe8" +
    "\001\002\000\004\021\076\001\002\000\014\007\013\011" +
    "\017\012\014\013\016\014\012\001\002\000\006\022\100" +
    "\023\040\001\002\000\004\056\101\001\002\000\072\004" +
    "\uffcd\007\013\010\uffcd\011\017\012\014\013\016\014\012" +
    "\015\uffcd\016\uffcd\021\uffcd\027\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\056\uffcd\057" +
    "\uffcd\061\uffcd\001\002\000\026\002\uffee\007\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\020\uffee\024\uffee\026\uffee\057" +
    "\uffee\001\002\000\072\004\uffcd\007\013\010\uffcd\011\017" +
    "\012\014\013\016\014\012\015\uffcd\016\uffcd\021\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\056\uffcd\057\uffcd\061\uffcd\001\002\000\062" +
    "\004\uffcb\007\uffcb\010\uffcb\015\uffcb\016\uffcb\021\uffcb\027" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\056\uffcb\057\uffcb\061\uffcb\001\002\000\062" +
    "\004\115\007\131\010\132\015\106\016\143\021\133\027" +
    "\122\031\110\032\150\033\117\034\141\035\144\036\147" +
    "\042\120\043\121\044\130\045\127\047\135\050\123\051" +
    "\113\052\125\056\101\057\111\061\124\001\002\000\060" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\015\uffa7\016" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\036\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\061\uffa7\001\002\000\064\004\uffd5" +
    "\007\uffd5\010\uffd5\015\uffd5\016\uffd5\021\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\056\uffd5\057\uffd5\061\uffd5\001\002\000\004" +
    "\021\262\001\002\000\104\002\uffd2\004\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\020\uffd2\021\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\056\uffd2\057\uffd2\061\uffd2\001\002\000\060\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\015\uffc2\016\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\061\uffc2\001\002\000\060\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\015\uffa5\016\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\036\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\061\uffa5\001\002\000\064\004\uffd7\007\uffd7\010\uffd7" +
    "\015\uffd7\016\uffd7\021\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\056" +
    "\uffd7\057\uffd7\061\uffd7\001\002\000\040\004\115\007\131" +
    "\015\106\016\143\021\133\036\147\042\120\043\121\044" +
    "\130\045\127\047\135\050\123\051\113\052\125\061\124" +
    "\001\002\000\064\004\uffd4\007\uffd4\010\uffd4\015\uffd4\016" +
    "\uffd4\021\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\056\uffd4\057\uffd4" +
    "\061\uffd4\001\002\000\042\004\115\007\131\010\uffc4\015" +
    "\106\016\143\021\133\036\147\042\120\043\121\044\130" +
    "\045\127\047\135\050\123\051\113\052\125\061\124\001" +
    "\002\000\040\004\115\007\131\015\106\016\143\021\133" +
    "\036\147\042\120\043\121\044\130\045\127\047\135\050" +
    "\123\051\113\052\125\061\124\001\002\000\004\021\252" +
    "\001\002\000\004\021\243\001\002\000\060\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\015\uffa9\016\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\036\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\061\uffa9\001\002\000\004\021\240\001\002\000" +
    "\004\021\233\001\002\000\064\004\uffd8\007\uffd8\010\uffd8" +
    "\015\uffd8\016\uffd8\021\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\056" +
    "\uffd8\057\uffd8\061\uffd8\001\002\000\004\037\232\001\002" +
    "\000\004\037\231\001\002\000\062\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\015\uffb5\016\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\055\uffb5\061\uffb5\001\002\000\064\004\uffda\007\uffda\010" +
    "\uffda\015\uffda\016\uffda\021\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda" +
    "\056\uffda\057\uffda\061\uffda\001\002\000\040\004\115\007" +
    "\131\015\106\016\143\021\133\036\147\042\120\043\121" +
    "\044\130\045\127\047\135\050\123\051\113\052\125\061" +
    "\124\001\002\000\064\004\uffd3\007\uffd3\010\uffd3\015\uffd3" +
    "\016\uffd3\021\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\056\uffd3\057" +
    "\uffd3\061\uffd3\001\002\000\060\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\015\uffa8\016\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\061" +
    "\uffa8\001\002\000\064\004\uffd9\007\uffd9\010\uffd9\015\uffd9" +
    "\016\uffd9\021\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\056\uffd9\057" +
    "\uffd9\061\uffd9\001\002\000\014\005\153\006\154\010\223" +
    "\040\160\046\155\001\002\000\062\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\055\221\061\uffc1\001\002\000\004\010\220\001\002\000" +
    "\062\004\uffcc\007\uffcc\010\uffcc\015\uffcc\016\uffcc\021\uffcc" +
    "\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\056\uffcc\057\uffcc\061\uffcc\001\002\000" +
    "\060\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\015\uffa6" +
    "\016\uffa6\021\uffa6\022\uffa6\023\uffa6\036\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\061\uffa6\001\002\000\004\021" +
    "\213\001\002\000\060\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\023\uffbf\036" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\061\uffbf\001" +
    "\002\000\064\004\uffd6\007\uffd6\010\uffd6\015\uffd6\016\uffd6" +
    "\021\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\056\uffd6\057\uffd6\061" +
    "\uffd6\001\002\000\060\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\015\uffc0\016\uffc0\021\uffc0\022\uffc0\023\uffc0\036" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\061\uffc0\001" +
    "\002\000\004\021\151\001\002\000\040\004\115\007\131" +
    "\015\106\016\143\021\133\036\147\042\120\043\121\044" +
    "\130\045\127\047\135\050\123\051\113\052\125\061\124" +
    "\001\002\000\014\005\153\006\154\022\157\040\160\046" +
    "\155\001\002\000\040\004\000\007\000\015\000\016\000" +
    "\021\000\036\000\042\000\043\000\044\000\045\000\047" +
    "\000\050\000\051\000\052\000\061\000\001\002\000\040" +
    "\004\uffff\007\uffff\015\uffff\016\uffff\021\uffff\036\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\061\uffff\001\002\000\010\007\167\053\165\054" +
    "\166\001\002\000\040\004\115\007\131\015\106\016\143" +
    "\021\133\036\147\042\120\043\121\044\130\045\127\047" +
    "\135\050\123\051\113\052\125\061\124\001\002\000\060" +
    "\004\115\007\131\010\132\015\106\016\143\021\133\027" +
    "\122\031\110\032\150\033\117\034\141\035\144\036\147" +
    "\042\120\043\121\044\130\045\127\047\135\050\123\051" +
    "\113\052\125\056\101\061\124\001\002\000\040\004\115" +
    "\007\131\015\106\016\143\021\133\036\147\042\120\043" +
    "\121\044\130\045\127\047\135\050\123\051\113\052\125" +
    "\061\124\001\002\000\014\005\153\006\154\040\160\041" +
    "\162\046\155\001\002\000\062\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\055" +
    "\uffb3\061\uffb3\001\002\000\064\004\uffca\007\uffca\010\uffca" +
    "\015\uffca\016\uffca\021\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\047\uffca\050\uffca\051\uffca\052\uffca\056" +
    "\uffca\057\uffca\061\uffca\001\002\000\060\004\uffbd\005\153" +
    "\006\154\007\uffbd\010\uffbd\015\uffbd\016\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\036\uffbd\040\160\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\155\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\061\uffbd\001\002\000\004\021\210\001\002\000\004" +
    "\021\203\001\002\000\062\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\015\uffb4\016\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\036\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\055\uffb4" +
    "\061\uffb4\001\002\000\004\021\171\001\002\000\042\004" +
    "\115\007\131\015\106\016\143\021\133\022\uffac\036\147" +
    "\042\120\043\121\044\130\045\127\047\135\050\123\051" +
    "\113\052\125\061\124\001\002\000\004\022\177\001\002" +
    "\000\006\022\uffad\023\175\001\002\000\016\005\153\006" +
    "\154\022\uffab\023\uffab\040\160\046\155\001\002\000\040" +
    "\004\115\007\131\015\106\016\143\021\133\036\147\042" +
    "\120\043\121\044\130\045\127\047\135\050\123\051\113" +
    "\052\125\061\124\001\002\000\016\005\153\006\154\022" +
    "\uffaa\023\uffaa\040\160\046\155\001\002\000\060\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\015\uffb0\016\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\036\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\061\uffb0\001\002\000\042\004\115\007\131" +
    "\015\106\016\143\021\133\022\uffac\036\147\042\120\043" +
    "\121\044\130\045\127\047\135\050\123\051\113\052\125" +
    "\061\124\001\002\000\004\022\202\001\002\000\060\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\015\uffb1\016\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\036\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\061\uffb1\001\002\000\040\004\115\007" +
    "\131\015\106\016\143\021\133\036\147\042\120\043\121" +
    "\044\130\045\127\047\135\050\123\051\113\052\125\061" +
    "\124\001\002\000\014\005\153\006\154\023\205\040\160" +
    "\046\155\001\002\000\040\004\115\007\131\015\106\016" +
    "\143\021\133\036\147\042\120\043\121\044\130\045\127" +
    "\047\135\050\123\051\113\052\125\061\124\001\002\000" +
    "\014\005\153\006\154\022\207\040\160\046\155\001\002" +
    "\000\004\021\uffae\001\002\000\040\004\115\007\131\015" +
    "\106\016\143\021\133\036\147\042\120\043\121\044\130" +
    "\045\127\047\135\050\123\051\113\052\125\061\124\001" +
    "\002\000\014\005\153\006\154\022\212\040\160\046\155" +
    "\001\002\000\004\021\uffaf\001\002\000\040\004\115\007" +
    "\131\015\106\016\143\021\133\036\147\042\120\043\121" +
    "\044\130\045\127\047\135\050\123\051\113\052\125\061" +
    "\124\001\002\000\050\004\115\005\153\006\154\007\131" +
    "\015\106\016\143\021\133\036\147\040\160\042\120\043" +
    "\121\044\130\045\127\046\155\047\135\050\123\051\113" +
    "\052\125\061\124\001\002\000\006\022\216\023\175\001" +
    "\002\000\004\010\217\001\002\000\064\004\uffc6\007\uffc6" +
    "\010\uffc6\015\uffc6\016\uffc6\021\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\056\uffc6\057\uffc6\061\uffc6\001\002\000\064\004\uffc7" +
    "\007\uffc7\010\uffc7\015\uffc7\016\uffc7\021\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\056\uffc7\057\uffc7\061\uffc7\001\002\000\040" +
    "\004\115\007\131\015\106\016\143\021\133\036\147\042" +
    "\120\043\121\044\130\045\127\047\135\050\123\051\113" +
    "\052\125\061\124\001\002\000\060\004\uffc3\005\153\006" +
    "\154\007\uffc3\010\uffc3\015\uffc3\016\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\036\uffc3\040\160\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\155\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\061\uffc3\001\002\000\064\004\uffdb\007\uffdb\010\uffdb\015" +
    "\uffdb\016\uffdb\021\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\056\uffdb" +
    "\057\uffdb\061\uffdb\001\002\000\014\005\153\006\154\022" +
    "\225\040\160\046\155\001\002\000\060\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\015\uffbe\016\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\061\uffbe\001\002\000\042\004\115\007\131\015\106" +
    "\016\143\021\133\022\uffac\036\147\042\120\043\121\044" +
    "\130\045\127\047\135\050\123\051\113\052\125\061\124" +
    "\001\002\000\004\022\230\001\002\000\060\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\015\uffb2\016\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\061\uffb2\001\002\000\060\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\061\uffb8\001\002\000\060\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\015\uffb7\016\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\036\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\061\uffb7" +
    "\001\002\000\040\004\115\007\131\015\106\016\143\021" +
    "\133\036\147\042\120\043\121\044\130\045\127\047\135" +
    "\050\123\051\113\052\125\061\124\001\002\000\014\005" +
    "\153\006\154\023\235\040\160\046\155\001\002\000\014" +
    "\007\013\011\017\012\014\013\016\014\012\001\002\000" +
    "\006\017\045\022\237\001\002\000\060\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\015\uffb9\016\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\061\uffb9\001\002\000\004\007\241\001\002\000\004" +
    "\022\242\001\002\000\060\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\015\uffba\016\uffba\021\uffba\022\uffba\023\uffba" +
    "\036\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\061\uffba" +
    "\001\002\000\040\004\115\007\131\015\106\016\143\021" +
    "\133\036\147\042\120\043\121\044\130\045\127\047\135" +
    "\050\123\051\113\052\125\061\124\001\002\000\014\005" +
    "\153\006\154\022\245\040\160\046\155\001\002\000\060" +
    "\004\115\007\131\010\132\015\106\016\143\021\133\027" +
    "\122\031\110\032\150\033\117\034\141\035\144\036\147" +
    "\042\120\043\121\044\130\045\127\047\135\050\123\051" +
    "\113\052\125\056\101\061\124\001\002\000\064\004\uffcf" +
    "\007\uffcf\010\uffcf\015\uffcf\016\uffcf\021\uffcf\027\uffcf\030" +
    "\247\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\056\uffcf\057\uffcf\061\uffcf\001\002\000\060" +
    "\004\115\007\131\010\132\015\106\016\143\021\133\027" +
    "\122\031\110\032\150\033\117\034\141\035\144\036\147" +
    "\042\120\043\121\044\130\045\127\047\135\050\123\051" +
    "\113\052\125\056\101\061\124\001\002\000\064\004\uffd1" +
    "\007\uffd1\010\uffd1\015\uffd1\016\uffd1\021\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\056\uffd1\057\uffd1\061\uffd1\001\002\000\064" +
    "\004\uffd0\007\uffd0\010\uffd0\015\uffd0\016\uffd0\021\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\056\uffd0\057\uffd0\061\uffd0\001\002" +
    "\000\040\004\115\007\131\015\106\016\143\021\133\036" +
    "\147\042\120\043\121\044\130\045\127\047\135\050\123" +
    "\051\113\052\125\061\124\001\002\000\014\005\153\006" +
    "\154\022\254\040\160\046\155\001\002\000\060\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\015\uffb6\016\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\036\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\061\uffb6\001\002\000\060\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\015\uffbb\016\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\036\uffbb\040\160\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\155\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\061\uffbb\001\002\000\016\005\153\006\154\010\uffc5" +
    "\022\uffc5\040\160\046\155\001\002\000\004\010\260\001" +
    "\002\000\064\004\uffc8\007\uffc8\010\uffc8\015\uffc8\016\uffc8" +
    "\021\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\056\uffc8\057\uffc8\061" +
    "\uffc8\001\002\000\060\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\015\uffbc\016\uffbc\021\uffbc\022\uffbc\023\uffbc\036" +
    "\uffbc\040\160\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\155\047\uffbc\050\uffbc\051\uffbc\052\uffbc\061\uffbc\001" +
    "\002\000\042\004\115\007\131\010\uffc4\015\106\016\143" +
    "\021\133\036\147\042\120\043\121\044\130\045\127\047" +
    "\135\050\123\051\113\052\125\061\124\001\002\000\004" +
    "\010\264\001\002\000\040\004\115\007\131\015\106\016" +
    "\143\021\133\036\147\042\120\043\121\044\130\045\127" +
    "\047\135\050\123\051\113\052\125\061\124\001\002\000" +
    "\014\005\153\006\154\010\266\040\160\046\155\001\002" +
    "\000\042\004\115\007\131\015\106\016\143\021\133\022" +
    "\uffc4\036\147\042\120\043\121\044\130\045\127\047\135" +
    "\050\123\051\113\052\125\061\124\001\002\000\004\022" +
    "\270\001\002\000\060\004\115\007\131\010\132\015\106" +
    "\016\143\021\133\027\122\031\110\032\150\033\117\034" +
    "\141\035\144\036\147\042\120\043\121\044\130\045\127" +
    "\047\135\050\123\051\113\052\125\056\101\061\124\001" +
    "\002\000\064\004\uffc9\007\uffc9\010\uffc9\015\uffc9\016\uffc9" +
    "\021\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\056\uffc9\057\uffc9\061" +
    "\uffc9\001\002\000\062\004\uffce\007\uffce\010\uffce\015\uffce" +
    "\016\uffce\021\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\056\uffce\057\uffce\061" +
    "\uffce\001\002\000\004\002\001\001\002\000\102\002\ufff7" +
    "\004\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\024\ufff7\026\ufff7" +
    "\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\056\ufff7\057\ufff7\061\ufff7\001\002\000" +
    "\024\002\ufff9\007\013\011\017\012\014\013\016\014\012" +
    "\020\020\024\021\026\023\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\ufff8\001\002\000\006\010\ufff6\021\301" +
    "\001\002\000\014\007\013\011\017\012\014\013\016\014" +
    "\012\001\002\000\006\022\303\023\040\001\002\000\004" +
    "\056\101\001\002\000\026\002\uffef\007\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\020\uffef\024\uffef\026\uffef\057\uffef" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\022\003\010\004\006\005\005\006\021\007" +
    "\014\011\004\012\007\013\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\274\005" +
    "\005\006\021\007\014\010\275\011\004\012\007\013\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\025\021\030\042\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\025\021\030\042\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\036\013\034\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\042\013\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\036" +
    "\013\034\014\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\055\001\001\000\002" +
    "\001\001\000\004\020\057\001\001\000\004\045\070\001" +
    "\001\000\002\001\001\000\016\005\061\006\064\012\007" +
    "\013\003\016\063\032\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\061\006\064\012\007\013\003" +
    "\016\063\032\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\036\013\034\014\076\001\001" +
    "\000\002\001\001\000\004\015\101\001\001\000\012\005" +
    "\102\012\007\013\034\033\103\001\001\000\002\001\001" +
    "\000\012\005\102\012\007\013\034\033\271\001\001\000" +
    "\004\034\104\001\001\000\032\015\133\022\141\023\136" +
    "\024\135\025\125\026\113\027\145\030\106\031\115\035" +
    "\137\036\111\037\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\260" +
    "\035\137\036\111\037\144\001\001\000\002\001\001\000" +
    "\014\023\255\035\137\036\111\037\144\043\256\001\001" +
    "\000\012\023\254\035\137\036\111\037\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\223\035\137\036\111\037\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\151\035\137\036\111\037\144\001\001" +
    "\000\004\002\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\167\001\001\000\012\023\163\035\137" +
    "\036\111\037\144\001\001\000\032\015\133\022\162\023" +
    "\136\024\135\025\125\026\113\027\145\030\106\031\115" +
    "\035\137\036\111\037\144\001\001\000\012\023\160\035" +
    "\137\036\111\037\144\001\001\000\004\002\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\173\035\137\036\111\037" +
    "\144\040\171\046\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\155\001\001\000\012\023\175\035" +
    "\137\036\111\037\144\001\001\000\004\002\155\001\001" +
    "\000\002\001\001\000\016\023\173\035\137\036\111\037" +
    "\144\040\200\046\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\203\035\137\036\111\037\144\001" +
    "\001\000\004\002\155\001\001\000\012\023\205\035\137" +
    "\036\111\037\144\001\001\000\004\002\155\001\001\000" +
    "\002\001\001\000\012\023\210\035\137\036\111\037\144" +
    "\001\001\000\004\002\155\001\001\000\002\001\001\000" +
    "\012\023\213\035\137\036\111\037\144\001\001\000\016" +
    "\002\155\023\173\035\137\036\111\037\144\046\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\221\035\137\036\111\037" +
    "\144\001\001\000\004\002\155\001\001\000\002\001\001" +
    "\000\004\002\155\001\001\000\002\001\001\000\016\023" +
    "\173\035\137\036\111\037\144\040\226\046\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\233\035\137\036\111\037\144" +
    "\001\001\000\004\002\155\001\001\000\004\013\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\243\035" +
    "\137\036\111\037\144\001\001\000\004\002\155\001\001" +
    "\000\032\015\133\022\245\023\136\024\135\025\125\026" +
    "\113\027\145\030\106\031\115\035\137\036\111\037\144" +
    "\001\001\000\004\044\247\001\001\000\032\015\133\022" +
    "\250\023\136\024\135\025\125\026\113\027\145\030\106" +
    "\031\115\035\137\036\111\037\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\252\035\137\036\111" +
    "\037\144\001\001\000\004\002\155\001\001\000\002\001" +
    "\001\000\004\002\155\001\001\000\004\002\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\155\001" +
    "\001\000\014\023\255\035\137\036\111\037\144\043\262" +
    "\001\001\000\002\001\001\000\012\023\264\035\137\036" +
    "\111\037\144\001\001\000\004\002\155\001\001\000\014" +
    "\023\255\035\137\036\111\037\144\043\266\001\001\000" +
    "\002\001\001\000\032\015\133\022\270\023\136\024\135" +
    "\025\125\026\113\027\145\030\106\031\115\035\137\036" +
    "\111\037\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\274\005" +
    "\005\006\021\007\014\010\276\011\004\012\007\013\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\036\013\034\014\301\001\001\000\002" +
    "\001\001\000\004\015\303\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<TError> TablaES = new LinkedList<TError>();


    public void sintax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error Sintáctico");
        System.out.println("\tLexema: " + lexema);
        System.out.println("\tFila: " + fila);
        System.out.println("\tColumna: " + columna);

        TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Not expected token");
        TablaES.add(datos);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error Sintáctico :S");
        System.out.println("\tLexema: " + lexema);
        System.out.println("\tFila: " + fila);
        System.out.println("\tColumna: " + columna);

        TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Not expected token");
        TablaES.add(datos);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Constant ::= t_null 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Constant ::= strConst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Constant ::= bolCnst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Constant ::= dblConst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Constant ::= intCnst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExprList ::= ExprList comma Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Actuals ::= ExprList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LibCall ::= setByte prnthss_A Expr comma Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LibCall ::= getByte prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Call ::= Expr dot LibCall prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Call ::= Expr dot ident prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Call ::= ident prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LValue ::= Expr brackets_A Expr brackets_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LValue ::= Expr dot ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LValue ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= malloc prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= ReadLine prnthss 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= readInteger prnthss 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= t_newArr prnthss_A Expr comma Type prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= t_new prnthss_A ident prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= neg Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= minus Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr Arlogop Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= t_this 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= LValue equals Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprOptional ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PrintStmt ::= print prnthss_A Expr ExprList prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BreakStmt ::= t_break pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ReturnStmt ::= t_return ExprOptional pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ForStmt ::= t_for prnthss_A ExprOptional pyc Expr pyc ExprOptional prnthss_C Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WhileStmt ::= t_while prnthss_A Expr prnthss_C Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StmtStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StmtStar ::= StmtStar Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VariableDeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VariableDeclStar ::= VariableDecl VariableDeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elseStmtOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStmtOptional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elseStmtOptional ::= t_else Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStmtOptional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt elseStmtOptional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtBlock ::= curly_A VariableDeclStar StmtStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stmt ::= pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stmt ::= Expr pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Prototype ::= t_void ident prnthss_A Formals prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Prototype ::= Type ident prnthss_A Formals prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrototypeStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PrototypeStar ::= Prototype PrototypeStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InterfaceDecl ::= t_interface ident curly_A PrototypeStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IdentList ::= IdentList comma ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdentList ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ImplementsIdentPlusCommaOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ImplementsIdentPlusCommaOptional ::= t_implements IdentList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExtendsIdentOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExtendsIdentOptional ::= extend ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldStar ::= Field FieldStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassDecl ::= clase ident ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_A FieldStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Formals ::= Formals comma Variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Formals ::= Variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= t_void ident prnthss_A Formals prnthss_C StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type ident prnthss_A Formals prnthss_C StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= t_string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= t_bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= t_double 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= t_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclStar ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Arlogop ::= logop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arlogop",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Arlogop ::= arop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arlogop",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

