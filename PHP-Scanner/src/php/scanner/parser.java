
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 07 17:11:09 CST 2018
//----------------------------------------------------

package php.scanner;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 07 17:11:09 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\011\002\000\002\011\004\000\002" +
    "\006\004\000\002\013\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\007\010\000\002\007\010\000" +
    "\002\015\003\000\002\015\002\000\002\002\003\000\002" +
    "\002\005\000\002\010\011\000\002\033\004\000\002\033" +
    "\002\000\002\020\004\000\002\020\002\000\002\021\004" +
    "\000\002\021\002\000\002\046\003\000\002\046\005\000" +
    "\002\017\003\000\002\017\003\000\002\012\007\000\002" +
    "\043\004\000\002\043\002\000\002\022\010\000\002\022" +
    "\010\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\016\006\000\002\025\010\000\002\045\004\000\002\045" +
    "\002\000\002\034\004\000\002\034\002\000\002\035\004" +
    "\000\002\035\002\000\002\026\007\000\002\027\013\000" +
    "\002\031\005\000\002\030\004\000\002\032\007\000\002" +
    "\044\003\000\002\044\002\000\002\024\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\004\000\002\024\004\000\002\024\006\000\002" +
    "\024\010\000\002\024\005\000\002\024\005\000\002\024" +
    "\006\000\002\036\003\000\002\036\005\000\002\036\006" +
    "\000\002\040\006\000\002\040\010\000\002\040\010\000" +
    "\002\042\006\000\002\042\010\000\002\041\003\000\002" +
    "\041\002\000\002\047\003\000\002\047\005\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\024\003\020\010\013\012\017\013\014\014" +
    "\016\015\012\021\021\025\022\027\024\001\002\000\006" +
    "\010\307\020\047\001\002\000\004\011\306\001\002\000" +
    "\026\002\ufffa\003\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\021\ufffa\025\ufffa\027\ufffa\001\002\000\026\002" +
    "\ufffd\003\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\021\ufffd\025\ufffd\027\ufffd\001\002\000\026\002\ufff7\003" +
    "\020\010\013\012\017\013\014\014\016\015\012\021\021" +
    "\025\022\027\024\001\002\000\004\002\302\001\002\000" +
    "\010\010\ufff0\020\ufff0\023\ufff0\001\002\000\010\010\uffef" +
    "\020\uffef\023\uffef\001\002\000\010\010\ufff2\020\ufff2\023" +
    "\ufff2\001\002\000\026\002\ufffb\003\ufffb\010\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\021\ufffb\025\ufffb\027\ufffb\001" +
    "\002\000\010\010\ufff1\020\ufff1\023\ufff1\001\002\000\010" +
    "\010\ufff3\020\ufff3\023\ufff3\001\002\000\006\011\300\057" +
    "\301\001\002\000\004\010\077\001\002\000\004\010\056" +
    "\001\002\000\026\002\ufffc\003\ufffc\010\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\021\ufffc\025\ufffc\027\ufffc\001\002" +
    "\000\004\010\025\001\002\000\004\056\026\001\002\000" +
    "\020\010\013\012\017\013\014\014\016\015\012\021\031" +
    "\057\uffda\001\002\000\006\010\051\020\047\001\002\000" +
    "\004\057\050\001\002\000\004\010\034\001\002\000\020" +
    "\010\013\012\017\013\014\014\016\015\012\021\031\057" +
    "\uffda\001\002\000\004\057\uffdb\001\002\000\004\022\035" +
    "\001\002\000\016\010\013\012\017\013\014\014\016\015" +
    "\012\023\uffea\001\002\000\006\010\046\020\047\001\002" +
    "\000\006\023\uffe9\024\uffe9\001\002\000\004\023\044\001" +
    "\002\000\006\023\uffeb\024\042\001\002\000\014\010\013" +
    "\012\017\013\014\014\016\015\012\001\002\000\006\023" +
    "\uffe8\024\uffe8\001\002\000\004\011\045\001\002\000\020" +
    "\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\021\uffd8\057" +
    "\uffd8\001\002\000\010\011\ufff4\023\ufff4\024\ufff4\001\002" +
    "\000\010\010\uffee\020\uffee\023\uffee\001\002\000\026\002" +
    "\uffdc\003\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\021\uffdc\025\uffdc\027\uffdc\001\002\000\004\022\052\001" +
    "\002\000\016\010\013\012\017\013\014\014\016\015\012" +
    "\023\uffea\001\002\000\004\023\054\001\002\000\004\011" +
    "\055\001\002\000\020\010\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\021\uffd9\057\uffd9\001\002\000\010\026\uffe3\056" +
    "\uffe3\060\057\001\002\000\004\010\076\001\002\000\006" +
    "\026\061\056\uffe1\001\002\000\004\010\072\001\002\000" +
    "\004\056\063\001\002\000\020\010\013\012\017\013\014" +
    "\014\016\015\012\021\021\057\uffe5\001\002\000\020\010" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\021\uffde\057\uffde" +
    "\001\002\000\004\057\071\001\002\000\020\010\013\012" +
    "\017\013\014\014\016\015\012\021\021\057\uffe5\001\002" +
    "\000\020\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\021" +
    "\uffdd\057\uffdd\001\002\000\004\057\uffe6\001\002\000\026" +
    "\002\uffe7\003\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\021\uffe7\025\uffe7\027\uffe7\001\002\000\006\024\uffe0" +
    "\056\uffe0\001\002\000\006\024\074\056\uffe2\001\002\000" +
    "\004\010\075\001\002\000\006\024\uffdf\056\uffdf\001\002" +
    "\000\006\026\uffe4\056\uffe4\001\002\000\004\022\100\001" +
    "\002\000\016\010\013\012\017\013\014\014\016\015\012" +
    "\023\uffea\001\002\000\004\023\102\001\002\000\004\056" +
    "\103\001\002\000\072\004\uffc9\010\013\011\uffc9\012\017" +
    "\013\014\014\016\015\012\016\uffc9\017\uffc9\022\uffc9\030" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\056\uffc9\057\uffc9\061\uffc9\001\002\000\030" +
    "\002\uffec\003\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\021\uffec\025\uffec\027\uffec\057\uffec\001\002\000\072" +
    "\004\uffc9\010\013\011\uffc9\012\017\013\014\014\016\015" +
    "\012\016\uffc9\017\uffc9\022\uffc9\030\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\056\uffc9" +
    "\057\uffc9\061\uffc9\001\002\000\062\004\uffc7\010\uffc7\011" +
    "\uffc7\016\uffc7\017\uffc7\022\uffc7\030\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\056\uffc7" +
    "\057\uffc7\061\uffc7\001\002\000\062\004\117\010\133\011" +
    "\134\016\110\017\145\022\135\030\124\032\112\033\152" +
    "\034\121\035\143\036\146\037\151\042\122\043\123\044" +
    "\132\045\131\047\137\050\125\051\115\052\127\056\103" +
    "\057\113\061\126\001\002\000\024\005\uffa2\006\uffa2\007" +
    "\uffa2\011\uffa2\023\uffa2\024\uffa2\040\uffa2\041\uffa2\046\uffa2" +
    "\001\002\000\064\004\uffd1\010\uffd1\011\uffd1\016\uffd1\017" +
    "\uffd1\022\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\056\uffd1\057\uffd1" +
    "\061\uffd1\001\002\000\004\022\267\001\002\000\106\002" +
    "\uffce\003\uffce\004\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\021\uffce\022\uffce\025" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\056\uffce\057\uffce" +
    "\061\uffce\001\002\000\024\005\uffbe\006\uffbe\007\uffbe\011" +
    "\uffbe\023\uffbe\024\uffbe\040\uffbe\041\uffbe\046\uffbe\001\002" +
    "\000\024\005\uffa0\006\uffa0\007\uffa0\011\uffa0\023\uffa0\024" +
    "\uffa0\040\uffa0\041\uffa0\046\uffa0\001\002\000\064\004\uffd3" +
    "\010\uffd3\011\uffd3\016\uffd3\017\uffd3\022\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\056\uffd3\057\uffd3\061\uffd3\001\002\000\040" +
    "\004\117\010\133\016\110\017\145\022\135\037\151\042" +
    "\122\043\123\044\132\045\131\047\137\050\125\051\115" +
    "\052\127\061\126\001\002\000\064\004\uffd0\010\uffd0\011" +
    "\uffd0\016\uffd0\017\uffd0\022\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\056\uffd0\057\uffd0\061\uffd0\001\002\000\042\004\117\010" +
    "\133\011\uffc0\016\110\017\145\022\135\037\151\042\122" +
    "\043\123\044\132\045\131\047\137\050\125\051\115\052" +
    "\127\061\126\001\002\000\040\004\117\010\133\016\110" +
    "\017\145\022\135\037\151\042\122\043\123\044\132\045" +
    "\131\047\137\050\125\051\115\052\127\061\126\001\002" +
    "\000\004\022\257\001\002\000\004\022\250\001\002\000" +
    "\024\005\uffa4\006\uffa4\007\uffa4\011\uffa4\023\uffa4\024\uffa4" +
    "\040\uffa4\041\uffa4\046\uffa4\001\002\000\004\022\245\001" +
    "\002\000\004\022\240\001\002\000\064\004\uffd4\010\uffd4" +
    "\011\uffd4\016\uffd4\017\uffd4\022\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\056\uffd4\057\uffd4\061\uffd4\001\002\000\004\022\236" +
    "\001\002\000\004\022\234\001\002\000\030\005\uffb0\006" +
    "\uffb0\007\uffb0\011\uffb0\022\231\023\uffb0\024\uffb0\040\uffb0" +
    "\041\uffb0\046\uffb0\055\uffb0\001\002\000\064\004\uffd6\010" +
    "\uffd6\011\uffd6\016\uffd6\017\uffd6\022\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\056\uffd6\057\uffd6\061\uffd6\001\002\000\040\004" +
    "\117\010\133\016\110\017\145\022\135\037\151\042\122" +
    "\043\123\044\132\045\131\047\137\050\125\051\115\052" +
    "\127\061\126\001\002\000\064\004\uffcf\010\uffcf\011\uffcf" +
    "\016\uffcf\017\uffcf\022\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\056" +
    "\uffcf\057\uffcf\061\uffcf\001\002\000\024\005\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\023\uffa3\024\uffa3\040\uffa3\041\uffa3\046" +
    "\uffa3\001\002\000\064\004\uffd5\010\uffd5\011\uffd5\016\uffd5" +
    "\017\uffd5\022\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\056\uffd5\057" +
    "\uffd5\061\uffd5\001\002\000\016\005\155\006\160\007\156" +
    "\011\226\040\163\046\157\001\002\000\026\005\uffbd\006" +
    "\uffbd\007\uffbd\011\uffbd\023\uffbd\024\uffbd\040\uffbd\041\uffbd" +
    "\046\uffbd\055\224\001\002\000\004\011\223\001\002\000" +
    "\062\004\uffc8\010\uffc8\011\uffc8\016\uffc8\017\uffc8\022\uffc8" +
    "\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\056\uffc8\057\uffc8\061\uffc8\001\002\000" +
    "\024\005\uffa1\006\uffa1\007\uffa1\011\uffa1\023\uffa1\024\uffa1" +
    "\040\uffa1\041\uffa1\046\uffa1\001\002\000\004\022\217\001" +
    "\002\000\024\005\uffbb\006\uffbb\007\uffbb\011\uffbb\023\uffbb" +
    "\024\uffbb\040\uffbb\041\uffbb\046\uffbb\001\002\000\064\004" +
    "\uffd2\010\uffd2\011\uffd2\016\uffd2\017\uffd2\022\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\056\uffd2\057\uffd2\061\uffd2\001\002\000" +
    "\024\005\uffbc\006\uffbc\007\uffbc\011\uffbc\023\uffbc\024\uffbc" +
    "\040\uffbc\041\uffbc\046\uffbc\001\002\000\004\022\153\001" +
    "\002\000\040\004\117\010\133\016\110\017\145\022\135" +
    "\037\151\042\122\043\123\044\132\045\131\047\137\050" +
    "\125\051\115\052\127\061\126\001\002\000\016\005\155" +
    "\006\160\007\156\023\162\040\163\046\157\001\002\000" +
    "\040\004\000\010\000\016\000\017\000\022\000\037\000" +
    "\042\000\043\000\044\000\045\000\047\000\050\000\051" +
    "\000\052\000\061\000\001\002\000\040\004\uffff\010\uffff" +
    "\016\uffff\017\uffff\022\uffff\037\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff\061\uffff" +
    "\001\002\000\010\010\173\053\171\054\172\001\002\000" +
    "\040\004\117\010\133\016\110\017\145\022\135\037\151" +
    "\042\122\043\123\044\132\045\131\047\137\050\125\051" +
    "\115\052\127\061\126\001\002\000\040\004\117\010\133" +
    "\016\110\017\145\022\135\037\151\042\122\043\123\044" +
    "\132\045\131\047\137\050\125\051\115\052\127\061\126" +
    "\001\002\000\060\004\117\010\133\011\134\016\110\017" +
    "\145\022\135\030\124\032\112\033\152\034\121\035\143" +
    "\036\146\037\151\042\122\043\123\044\132\045\131\047" +
    "\137\050\125\051\115\052\127\056\103\061\126\001\002" +
    "\000\040\004\117\010\133\016\110\017\145\022\135\037" +
    "\151\042\122\043\123\044\132\045\131\047\137\050\125" +
    "\051\115\052\127\061\126\001\002\000\016\005\155\006" +
    "\160\007\156\040\163\041\165\046\157\001\002\000\026" +
    "\005\uffae\006\uffae\007\uffae\011\uffae\023\uffae\024\uffae\040" +
    "\uffae\041\uffae\046\uffae\055\uffae\001\002\000\064\004\uffc6" +
    "\010\uffc6\011\uffc6\016\uffc6\017\uffc6\022\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\056\uffc6\057\uffc6\061\uffc6\001\002\000\024" +
    "\005\155\006\160\007\156\011\uffb9\023\uffb9\024\uffb9\040" +
    "\163\041\uffb9\046\157\001\002\000\024\005\uffb8\006\uffb8" +
    "\007\156\011\uffb8\023\uffb8\024\uffb8\040\163\041\uffb8\046" +
    "\157\001\002\000\004\022\214\001\002\000\004\022\207" +
    "\001\002\000\030\005\uffaf\006\uffaf\007\uffaf\011\uffaf\022" +
    "\204\023\uffaf\024\uffaf\040\uffaf\041\uffaf\046\uffaf\055\uffaf" +
    "\001\002\000\004\022\175\001\002\000\042\004\117\010" +
    "\133\016\110\017\145\022\135\023\uffa7\037\151\042\122" +
    "\043\123\044\132\045\131\047\137\050\125\051\115\052" +
    "\127\061\126\001\002\000\004\023\203\001\002\000\006" +
    "\023\uffa8\024\201\001\002\000\020\005\155\006\160\007" +
    "\156\023\uffa6\024\uffa6\040\163\046\157\001\002\000\040" +
    "\004\117\010\133\016\110\017\145\022\135\037\151\042" +
    "\122\043\123\044\132\045\131\047\137\050\125\051\115" +
    "\052\127\061\126\001\002\000\020\005\155\006\160\007" +
    "\156\023\uffa5\024\uffa5\040\163\046\157\001\002\000\024" +
    "\005\uffab\006\uffab\007\uffab\011\uffab\023\uffab\024\uffab\040" +
    "\uffab\041\uffab\046\uffab\001\002\000\042\004\117\010\133" +
    "\016\110\017\145\022\135\023\uffa7\037\151\042\122\043" +
    "\123\044\132\045\131\047\137\050\125\051\115\052\127" +
    "\061\126\001\002\000\004\023\206\001\002\000\024\005" +
    "\uffac\006\uffac\007\uffac\011\uffac\023\uffac\024\uffac\040\uffac" +
    "\041\uffac\046\uffac\001\002\000\040\004\117\010\133\016" +
    "\110\017\145\022\135\037\151\042\122\043\123\044\132" +
    "\045\131\047\137\050\125\051\115\052\127\061\126\001" +
    "\002\000\016\005\155\006\160\007\156\024\211\040\163" +
    "\046\157\001\002\000\040\004\117\010\133\016\110\017" +
    "\145\022\135\037\151\042\122\043\123\044\132\045\131" +
    "\047\137\050\125\051\115\052\127\061\126\001\002\000" +
    "\016\005\155\006\160\007\156\023\213\040\163\046\157" +
    "\001\002\000\004\022\uffa9\001\002\000\040\004\117\010" +
    "\133\016\110\017\145\022\135\037\151\042\122\043\123" +
    "\044\132\045\131\047\137\050\125\051\115\052\127\061" +
    "\126\001\002\000\016\005\155\006\160\007\156\023\216" +
    "\040\163\046\157\001\002\000\004\022\uffaa\001\002\000" +
    "\040\004\117\010\133\016\110\017\145\022\135\037\151" +
    "\042\122\043\123\044\132\045\131\047\137\050\125\051" +
    "\115\052\127\061\126\001\002\000\006\023\221\024\201" +
    "\001\002\000\004\011\222\001\002\000\064\004\uffc2\010" +
    "\uffc2\011\uffc2\016\uffc2\017\uffc2\022\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\056\uffc2\057\uffc2\061\uffc2\001\002\000\064\004" +
    "\uffc3\010\uffc3\011\uffc3\016\uffc3\017\uffc3\022\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\056\uffc3\057\uffc3\061\uffc3\001\002\000" +
    "\040\004\117\010\133\016\110\017\145\022\135\037\151" +
    "\042\122\043\123\044\132\045\131\047\137\050\125\051" +
    "\115\052\127\061\126\001\002\000\024\005\155\006\160" +
    "\007\156\011\uffbf\023\uffbf\024\uffbf\040\163\041\uffbf\046" +
    "\157\001\002\000\064\004\uffd7\010\uffd7\011\uffd7\016\uffd7" +
    "\017\uffd7\022\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\056\uffd7\057" +
    "\uffd7\061\uffd7\001\002\000\016\005\155\006\160\007\156" +
    "\023\230\040\163\046\157\001\002\000\024\005\uffba\006" +
    "\uffba\007\uffba\011\uffba\023\uffba\024\uffba\040\uffba\041\uffba" +
    "\046\uffba\001\002\000\042\004\117\010\133\016\110\017" +
    "\145\022\135\023\uffa7\037\151\042\122\043\123\044\132" +
    "\045\131\047\137\050\125\051\115\052\127\061\126\001" +
    "\002\000\004\023\233\001\002\000\024\005\uffad\006\uffad" +
    "\007\uffad\011\uffad\023\uffad\024\uffad\040\uffad\041\uffad\046" +
    "\uffad\001\002\000\004\023\235\001\002\000\024\005\uffb3" +
    "\006\uffb3\007\uffb3\011\uffb3\023\uffb3\024\uffb3\040\uffb3\041" +
    "\uffb3\046\uffb3\001\002\000\004\023\237\001\002\000\024" +
    "\005\uffb2\006\uffb2\007\uffb2\011\uffb2\023\uffb2\024\uffb2\040" +
    "\uffb2\041\uffb2\046\uffb2\001\002\000\040\004\117\010\133" +
    "\016\110\017\145\022\135\037\151\042\122\043\123\044" +
    "\132\045\131\047\137\050\125\051\115\052\127\061\126" +
    "\001\002\000\016\005\155\006\160\007\156\024\242\040" +
    "\163\046\157\001\002\000\014\010\013\012\017\013\014" +
    "\014\016\015\012\001\002\000\006\020\047\023\244\001" +
    "\002\000\024\005\uffb4\006\uffb4\007\uffb4\011\uffb4\023\uffb4" +
    "\024\uffb4\040\uffb4\041\uffb4\046\uffb4\001\002\000\004\010" +
    "\246\001\002\000\004\023\247\001\002\000\024\005\uffb5" +
    "\006\uffb5\007\uffb5\011\uffb5\023\uffb5\024\uffb5\040\uffb5\041" +
    "\uffb5\046\uffb5\001\002\000\040\004\117\010\133\016\110" +
    "\017\145\022\135\037\151\042\122\043\123\044\132\045" +
    "\131\047\137\050\125\051\115\052\127\061\126\001\002" +
    "\000\016\005\155\006\160\007\156\023\252\040\163\046" +
    "\157\001\002\000\060\004\117\010\133\011\134\016\110" +
    "\017\145\022\135\030\124\032\112\033\152\034\121\035" +
    "\143\036\146\037\151\042\122\043\123\044\132\045\131" +
    "\047\137\050\125\051\115\052\127\056\103\061\126\001" +
    "\002\000\064\004\uffcb\010\uffcb\011\uffcb\016\uffcb\017\uffcb" +
    "\022\uffcb\030\uffcb\031\254\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\056\uffcb\057\uffcb\061" +
    "\uffcb\001\002\000\060\004\117\010\133\011\134\016\110" +
    "\017\145\022\135\030\124\032\112\033\152\034\121\035" +
    "\143\036\146\037\151\042\122\043\123\044\132\045\131" +
    "\047\137\050\125\051\115\052\127\056\103\061\126\001" +
    "\002\000\064\004\uffcd\010\uffcd\011\uffcd\016\uffcd\017\uffcd" +
    "\022\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\056\uffcd\057\uffcd\061" +
    "\uffcd\001\002\000\064\004\uffcc\010\uffcc\011\uffcc\016\uffcc" +
    "\017\uffcc\022\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\056\uffcc\057" +
    "\uffcc\061\uffcc\001\002\000\040\004\117\010\133\016\110" +
    "\017\145\022\135\037\151\042\122\043\123\044\132\045" +
    "\131\047\137\050\125\051\115\052\127\061\126\001\002" +
    "\000\016\005\155\006\160\007\156\023\261\040\163\046" +
    "\157\001\002\000\024\005\uffb1\006\uffb1\007\uffb1\011\uffb1" +
    "\023\uffb1\024\uffb1\040\uffb1\041\uffb1\046\uffb1\001\002\000" +
    "\024\005\uffb6\006\uffb6\007\uffb6\011\uffb6\023\uffb6\024\uffb6" +
    "\040\163\041\uffb6\046\157\001\002\000\020\005\155\006" +
    "\160\007\156\011\uffc1\023\uffc1\040\163\046\157\001\002" +
    "\000\004\011\265\001\002\000\064\004\uffc4\010\uffc4\011" +
    "\uffc4\016\uffc4\017\uffc4\022\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\056\uffc4\057\uffc4\061\uffc4\001\002\000\024\005\uffb7\006" +
    "\uffb7\007\uffb7\011\uffb7\023\uffb7\024\uffb7\040\163\041\uffb7" +
    "\046\157\001\002\000\042\004\117\010\133\011\uffc0\016" +
    "\110\017\145\022\135\037\151\042\122\043\123\044\132" +
    "\045\131\047\137\050\125\051\115\052\127\061\126\001" +
    "\002\000\004\011\271\001\002\000\040\004\117\010\133" +
    "\016\110\017\145\022\135\037\151\042\122\043\123\044" +
    "\132\045\131\047\137\050\125\051\115\052\127\061\126" +
    "\001\002\000\016\005\155\006\160\007\156\011\273\040" +
    "\163\046\157\001\002\000\042\004\117\010\133\016\110" +
    "\017\145\022\135\023\uffc0\037\151\042\122\043\123\044" +
    "\132\045\131\047\137\050\125\051\115\052\127\061\126" +
    "\001\002\000\004\023\275\001\002\000\060\004\117\010" +
    "\133\011\134\016\110\017\145\022\135\030\124\032\112" +
    "\033\152\034\121\035\143\036\146\037\151\042\122\043" +
    "\123\044\132\045\131\047\137\050\125\051\115\052\127" +
    "\056\103\061\126\001\002\000\064\004\uffc5\010\uffc5\011" +
    "\uffc5\016\uffc5\017\uffc5\022\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\056\uffc5\057\uffc5\061\uffc5\001\002\000\062\004\uffca\010" +
    "\uffca\011\uffca\016\uffca\017\uffca\022\uffca\030\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\056\uffca\057\uffca\061\uffca\001\002\000\026\002\ufff9\003" +
    "\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\021\ufff9" +
    "\025\ufff9\027\ufff9\001\002\000\026\002\ufff8\003\ufff8\010" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\021\ufff8\025\ufff8" +
    "\027\ufff8\001\002\000\004\002\001\001\002\000\026\002" +
    "\ufff7\003\020\010\013\012\017\013\014\014\016\015\012" +
    "\021\021\025\022\027\024\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\ufff6\001\002\000\104\002\ufff5\003\ufff5" +
    "\004\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\025\ufff5\027\ufff5" +
    "\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\056\ufff5\057\ufff5\061\ufff5\001\002\000" +
    "\006\011\ufff4\022\310\001\002\000\016\010\013\012\017" +
    "\013\014\014\016\015\012\023\uffea\001\002\000\004\023" +
    "\312\001\002\000\004\056\103\001\002\000\030\002\uffed" +
    "\003\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\021" +
    "\uffed\025\uffed\027\uffed\057\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\022\004\010\005\007\006\006\007\022\010" +
    "\014\012\005\013\004\014\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\302\006\006\007\022\010\014\011\303\012\005" +
    "\013\004\014\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\026\022\031\043" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\026\022\031\043\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\040\013\036" +
    "\014\035\015\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\042" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\040\013\036\014" +
    "\035\015\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\057\001\001\000\002\001" +
    "\001\000\004\021\061\001\001\000\004\046\072\001\001" +
    "\000\002\001\001\000\016\006\063\007\066\013\004\014" +
    "\003\017\065\033\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\063\007\066\013\004\014\003\017" +
    "\065\033\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\040\013\036\014\035\015\100\001" +
    "\001\000\002\001\001\000\004\016\103\001\001\000\012" +
    "\006\104\013\004\014\035\034\105\001\001\000\002\001" +
    "\001\000\012\006\104\013\004\014\035\034\276\001\001" +
    "\000\004\035\106\001\001\000\032\016\135\023\143\024" +
    "\140\025\137\026\127\027\115\030\147\031\110\032\117" +
    "\036\141\037\113\040\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\265\036\141\037\113\040\146\001\001\000\002\001\001" +
    "\000\014\024\262\036\141\037\113\040\146\044\263\001" +
    "\001\000\012\024\261\036\141\037\113\040\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\226\036\141\037\113\040\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\153\036\141\037\113\040\146\001" +
    "\001\000\004\003\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\173\001\001\000\012\024\167\036" +
    "\141\037\113\040\146\001\001\000\012\024\166\036\141" +
    "\037\113\040\146\001\001\000\032\016\135\023\165\024" +
    "\140\025\137\026\127\027\115\030\147\031\110\032\117" +
    "\036\141\037\113\040\146\001\001\000\012\024\163\036" +
    "\141\037\113\040\146\001\001\000\004\003\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\160\001" +
    "\001\000\004\003\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\024" +
    "\177\036\141\037\113\040\146\041\175\047\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\160\001" +
    "\001\000\012\024\201\036\141\037\113\040\146\001\001" +
    "\000\004\003\160\001\001\000\002\001\001\000\016\024" +
    "\177\036\141\037\113\040\146\041\204\047\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\207\036" +
    "\141\037\113\040\146\001\001\000\004\003\160\001\001" +
    "\000\012\024\211\036\141\037\113\040\146\001\001\000" +
    "\004\003\160\001\001\000\002\001\001\000\012\024\214" +
    "\036\141\037\113\040\146\001\001\000\004\003\160\001" +
    "\001\000\002\001\001\000\014\024\177\036\141\037\113" +
    "\040\146\047\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\224" +
    "\036\141\037\113\040\146\001\001\000\004\003\160\001" +
    "\001\000\002\001\001\000\004\003\160\001\001\000\002" +
    "\001\001\000\016\024\177\036\141\037\113\040\146\041" +
    "\231\047\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\240\036\141\037\113\040\146" +
    "\001\001\000\004\003\160\001\001\000\004\014\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\250\036" +
    "\141\037\113\040\146\001\001\000\004\003\160\001\001" +
    "\000\032\016\135\023\252\024\140\025\137\026\127\027" +
    "\115\030\147\031\110\032\117\036\141\037\113\040\146" +
    "\001\001\000\004\045\254\001\001\000\032\016\135\023" +
    "\255\024\140\025\137\026\127\027\115\030\147\031\110" +
    "\032\117\036\141\037\113\040\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\257\036\141\037\113" +
    "\040\146\001\001\000\004\003\160\001\001\000\002\001" +
    "\001\000\004\003\160\001\001\000\004\003\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\160\001" +
    "\001\000\014\024\262\036\141\037\113\040\146\044\267" +
    "\001\001\000\002\001\001\000\012\024\271\036\141\037" +
    "\113\040\146\001\001\000\004\003\160\001\001\000\014" +
    "\024\262\036\141\037\113\040\146\044\273\001\001\000" +
    "\002\001\001\000\032\016\135\023\275\024\140\025\137" +
    "\026\127\027\115\030\147\031\110\032\117\036\141\037" +
    "\113\040\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\302\006\006\007\022\010\014\011\304\012\005" +
    "\013\004\014\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\040" +
    "\013\036\014\035\015\310\001\001\000\002\001\001\000" +
    "\004\016\312\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<TError> TablaES = new LinkedList<TError>();


    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + fila + "\tColumna: "+ columna+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + fila + "\tColumna: "+ columna+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Constant ::= t_null 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Constant ::= strConst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Constant ::= bolCnst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Constant ::= dblConst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Constant ::= intCnst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprList ::= ExprList comma Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Actuals ::= ExprList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LibCall ::= setByte prnthss_A Expr comma Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LibCall ::= getByte prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Call ::= Expr dot LibCall prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Call ::= Expr dot ident prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Call ::= ident prnthss_A Actuals prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LValue ::= Expr brackets_A Expr brackets_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LValue ::= Expr dot ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LValue ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= malloc prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= ReadLine prnthss_A prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= readInteger prnthss_A prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= t_newArr prnthss_A Expr comma Type prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= t_new prnthss_A ident prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= neg Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= minus Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr cmpop Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr Arlogop Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= prnthss_A Expr prnthss_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= t_this 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= LValue equals Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprOptional ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrintStmt ::= print prnthss_A ExprList prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BreakStmt ::= t_break pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReturnStmt ::= t_return ExprOptional pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ForStmt ::= t_for prnthss_A ExprOptional pyc Expr pyc ExprOptional prnthss_C Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WhileStmt ::= t_while prnthss_A Expr prnthss_C Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StmtStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StmtStar ::= StmtStar Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VariableDeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VariableDeclStar ::= VariableDecl VariableDeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elseStmtOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStmtOptional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elseStmtOptional ::= t_else Stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStmtOptional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt elseStmtOptional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtBlock ::= curly_A VariableDeclStar StmtStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stmt ::= pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stmt ::= Expr pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Prototype ::= t_void ident prnthss_A Formals prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Prototype ::= Type ident prnthss_A Formals prnthss_C pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PrototypeStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PrototypeStar ::= Prototype PrototypeStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InterfaceDecl ::= t_interface ident curly_A PrototypeStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IdentList ::= IdentList comma ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IdentList ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ImplementsIdentPlusCommaOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ImplementsIdentPlusCommaOptional ::= t_implements IdentList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExtendsIdentOptional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExtendsIdentOptional ::= extend ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FieldStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FieldStar ::= Field FieldStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= clase ident ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_A FieldStar curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VariableList ::= VariableList comma Variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VariableList ::= Variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= VariableList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= t_void ident prnthss_A Formals prnthss_C StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= Type ident prnthss_A Formals prnthss_C StmtBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= Type brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= t_string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= t_bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= t_double 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= t_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Variable ::= Type ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclStar ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclStar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error curly_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Decl DeclStar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Arlogop ::= logop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arlogop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Arlogop ::= arop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arlogop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

