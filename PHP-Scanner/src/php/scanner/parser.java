
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 14 15:10:52 CST 2018
//----------------------------------------------------

package php.scanner;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 14 15:10:52 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\003\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\010\002\000" +
    "\002\010\004\000\002\005\004\000\002\012\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\046\002" +
    "\000\002\047\002\000\002\006\012\000\002\050\002\000" +
    "\002\051\002\000\002\006\012\000\002\014\003\000\002" +
    "\014\002\000\002\002\003\000\002\002\005\000\002\052" +
    "\002\000\002\053\002\000\002\054\002\000\002\007\014" +
    "\000\002\031\004\000\002\031\002\000\002\017\004\000" +
    "\002\017\002\000\002\020\004\000\002\020\002\000\002" +
    "\043\003\000\002\043\005\000\002\016\003\000\002\016" +
    "\003\000\002\055\002\000\002\056\002\000\002\057\002" +
    "\000\002\011\012\000\002\041\004\000\002\041\002\000" +
    "\002\021\010\000\002\021\010\000\002\022\004\000\002" +
    "\022\003\000\002\060\002\000\002\022\004\000\002\061" +
    "\002\000\002\022\004\000\002\062\002\000\002\022\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\015\006\000\002\023\007\000\002" +
    "\023\011\000\002\032\004\000\002\032\002\000\002\033" +
    "\004\000\002\033\002\000\002\024\007\000\002\025\013" +
    "\000\002\027\005\000\002\026\004\000\002\030\007\000" +
    "\002\042\003\000\002\042\002\000\002\045\005\000\002" +
    "\045\003\000\002\045\005\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\045\005\000\002\045\004\000\002\045\004\000\002\045" +
    "\006\000\002\045\010\000\002\045\005\000\002\045\005" +
    "\000\002\045\006\000\002\034\005\000\002\034\006\000" +
    "\002\036\006\000\002\036\010\000\002\036\010\000\002" +
    "\040\006\000\002\040\010\000\002\037\003\000\002\037" +
    "\002\000\002\044\003\000\002\044\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\024\003\020\007\013\011\017\012\015\013" +
    "\016\014\012\020\021\024\022\026\024\001\002\000\006" +
    "\007\331\017\052\001\002\000\026\002\uffff\003\uffff\007" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\020\uffff\024\uffff" +
    "\026\uffff\001\002\000\026\002\ufff9\003\ufff9\007\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\020\ufff9\024\ufff9\026\ufff9" +
    "\001\002\000\026\002\ufffc\003\ufffc\007\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\020\ufffc\024\ufffc\026\ufffc\001\002" +
    "\000\004\010\326\001\002\000\004\002\325\001\002\000" +
    "\010\007\ufff2\017\ufff2\022\ufff2\001\002\000\010\007\ufff1" +
    "\017\ufff1\022\ufff1\001\002\000\026\002\ufffd\003\ufffd\007" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\020\ufffd\024\ufffd" +
    "\026\ufffd\001\002\000\010\007\ufff4\017\ufff4\022\ufff4\001" +
    "\002\000\010\007\ufff3\017\ufff3\022\ufff3\001\002\000\010" +
    "\007\ufff5\017\ufff5\022\ufff5\001\002\000\006\010\323\055" +
    "\324\001\002\000\004\007\103\001\002\000\004\007\060" +
    "\001\002\000\026\002\ufffe\003\ufffe\007\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\020\ufffe\024\ufffe\026\ufffe\001\002" +
    "\000\004\007\025\001\002\000\004\054\uffd7\001\002\000" +
    "\004\054\027\001\002\000\020\007\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\020\uffd6\055\uffd6\001\002\000\020\007" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\020\uffd2\055\uffd2" +
    "\001\002\000\020\007\013\011\017\012\015\013\016\014" +
    "\012\020\033\055\uffd5\001\002\000\006\007\053\017\052" +
    "\001\002\000\004\007\037\001\002\000\004\055\036\001" +
    "\002\000\020\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\020\uffd3\055\uffd3\001\002\000\026\002\uffd4\003\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\020\uffd4\024\uffd4" +
    "\026\uffd4\001\002\000\004\021\040\001\002\000\016\007" +
    "\013\011\017\012\015\013\016\014\012\022\uffe8\001\002" +
    "\000\006\007\051\017\052\001\002\000\006\022\uffe7\023" +
    "\uffe7\001\002\000\004\022\047\001\002\000\006\022\uffe9" +
    "\023\045\001\002\000\014\007\013\011\017\012\015\013" +
    "\016\014\012\001\002\000\006\022\uffe6\023\uffe6\001\002" +
    "\000\004\010\050\001\002\000\020\007\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\020\uffd0\055\uffd0\001\002\000\010" +
    "\010\ufff6\022\ufff6\023\ufff6\001\002\000\010\007\ufff0\017" +
    "\ufff0\022\ufff0\001\002\000\004\021\054\001\002\000\016" +
    "\007\013\011\017\012\015\013\016\014\012\022\uffe8\001" +
    "\002\000\004\022\056\001\002\000\004\010\057\001\002" +
    "\000\020\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\020" +
    "\uffd1\055\uffd1\001\002\000\010\025\uffe5\054\uffe5\056\uffe5" +
    "\001\002\000\010\025\uffde\054\uffde\056\062\001\002\000" +
    "\004\007\102\001\002\000\006\025\064\054\uffdc\001\002" +
    "\000\004\007\076\001\002\000\004\054\066\001\002\000" +
    "\020\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\020\uffe4" +
    "\055\uffe4\001\002\000\020\007\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\020\uffe0\055\uffe0\001\002\000\020\007\013" +
    "\011\017\012\015\013\016\014\012\020\021\055\uffe3\001" +
    "\002\000\004\055\075\001\002\000\020\007\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\020\uffd9\055\uffd9\001\002\000" +
    "\020\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\020\uffe1" +
    "\055\uffe1\001\002\000\020\007\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\020\uffd8\055\uffd8\001\002\000\026\002\uffe2" +
    "\003\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\020" +
    "\uffe2\024\uffe2\026\uffe2\001\002\000\006\023\uffdb\054\uffdb" +
    "\001\002\000\006\023\100\054\uffdd\001\002\000\004\007" +
    "\101\001\002\000\006\023\uffda\054\uffda\001\002\000\006" +
    "\025\uffdf\054\uffdf\001\002\000\004\021\uffec\001\002\000" +
    "\004\021\105\001\002\000\016\007\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\022\uffeb\001\002\000\016\007\013\011" +
    "\017\012\015\013\016\014\012\022\uffe8\001\002\000\004" +
    "\022\110\001\002\000\004\054\111\001\002\000\072\004" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\021\uffbf\027\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\046\uffbf\047\uffbf\050\uffbf\054\uffbf\055\uffbf\057" +
    "\uffbf\064\uffbf\001\002\000\030\002\uffea\003\uffea\007\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\020\uffea\024\uffea\026" +
    "\uffea\055\uffea\001\002\000\072\004\121\007\136\010\137" +
    "\011\017\012\015\013\016\014\012\015\114\016\150\021" +
    "\140\027\uffcd\031\uffc9\032\uffcb\033\123\034\146\035\151" +
    "\036\154\041\124\042\125\043\135\044\131\046\142\047" +
    "\120\050\130\054\111\055\uffbd\057\127\064\126\001\002" +
    "\000\034\004\uff92\005\uff92\006\uff92\010\uff92\022\uff92\023" +
    "\uff92\037\uff92\040\uff92\045\uff92\060\uff92\061\uff92\062\uff92" +
    "\063\uff92\001\002\000\064\004\uffc6\007\uffc6\010\uffc6\015" +
    "\uffc6\016\uffc6\021\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\054\uffc6\055\uffc6" +
    "\057\uffc6\064\uffc6\001\002\000\004\055\322\001\002\000" +
    "\034\004\uffb2\005\uffb2\006\uffb2\010\uffb2\022\uffb2\023\uffb2" +
    "\037\uffb2\040\uffb2\045\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\001\002\000\034\004\uff90\005\uff90\006\uff90\010\uff90" +
    "\022\uff90\023\uff90\037\uff90\040\uff90\045\uff90\060\uff90\061" +
    "\uff90\062\uff90\063\uff90\001\002\000\040\004\121\007\160" +
    "\015\114\016\150\021\140\036\154\041\124\042\125\043" +
    "\135\044\131\046\142\047\120\050\130\057\127\064\126" +
    "\001\002\000\064\004\uffc5\007\uffc5\010\uffc5\015\uffc5\016" +
    "\uffc5\021\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\054\uffc5\055\uffc5\057\uffc5" +
    "\064\uffc5\001\002\000\042\004\121\007\160\010\uffb6\015" +
    "\114\016\150\021\140\036\154\041\124\042\125\043\135" +
    "\044\131\046\142\047\120\050\130\057\127\064\126\001" +
    "\002\000\040\004\121\007\160\015\114\016\150\021\140" +
    "\036\154\041\124\042\125\043\135\044\131\046\142\047" +
    "\120\050\130\057\127\064\126\001\002\000\004\021\313" +
    "\001\002\000\034\004\uff94\005\uff94\006\uff94\010\uff94\022" +
    "\uff94\023\uff94\037\uff94\040\uff94\045\uff94\060\uff94\061\uff94" +
    "\062\uff94\063\uff94\001\002\000\004\021\310\001\002\000" +
    "\004\021\303\001\002\000\004\021\301\001\002\000\004" +
    "\031\266\001\002\000\004\032\260\001\002\000\004\027" +
    "\251\001\002\000\004\021\246\001\002\000\036\004\uffb4" +
    "\005\uffb4\006\uffb4\007\ufff1\010\uffb4\017\ufff1\021\162\037" +
    "\uffb4\045\uffb4\053\161\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\001\002\000\064\004\uffce\007\uffce\010\uffce\015\uffce\016" +
    "\uffce\021\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\046\uffce\047\uffce\050\uffce\054\uffce\055\uffce\057\uffce" +
    "\064\uffce\001\002\000\040\004\121\007\160\015\114\016" +
    "\150\021\140\036\154\041\124\042\125\043\135\044\131" +
    "\046\142\047\120\050\130\057\127\064\126\001\002\000" +
    "\064\004\uffc4\007\uffc4\010\uffc4\015\uffc4\016\uffc4\021\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\054\uffc4\055\uffc4\057\uffc4\064\uffc4\001" +
    "\002\000\034\004\uff93\005\uff93\006\uff93\010\uff93\022\uff93" +
    "\023\uff93\037\uff93\040\uff93\045\uff93\060\uff93\061\uff93\062" +
    "\uff93\063\uff93\001\002\000\026\004\171\005\176\006\174" +
    "\010\243\037\177\045\170\060\173\061\167\062\172\063" +
    "\175\001\002\000\036\004\uffb1\005\uffb1\006\uffb1\010\uffb1" +
    "\022\uffb1\023\uffb1\037\uffb1\040\uffb1\045\uffb1\053\241\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\001\002\000\072\004\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\021\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\054\uffc0\055\uffc0\057\uffc0" +
    "\064\uffc0\001\002\000\004\010\240\001\002\000\062\004" +
    "\121\007\160\010\137\015\114\016\150\021\140\027\uffcd" +
    "\031\uffc9\032\uffcb\033\123\034\146\035\151\036\154\041" +
    "\124\042\125\043\135\044\131\046\142\047\120\050\130" +
    "\054\111\055\uffbd\057\127\064\126\001\002\000\034\004" +
    "\uff91\005\uff91\006\uff91\010\uff91\022\uff91\023\uff91\037\uff91" +
    "\040\uff91\045\uff91\060\uff91\061\uff91\062\uff91\063\uff91\001" +
    "\002\000\004\021\155\001\002\000\034\004\uffaf\005\uffaf" +
    "\006\uffaf\010\uffaf\022\uffaf\023\uffaf\037\uffaf\040\uffaf\045" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002\000\064" +
    "\004\uffc7\007\uffc7\010\uffc7\015\uffc7\016\uffc7\021\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\054\uffc7\055\uffc7\057\uffc7\064\uffc7\001\002" +
    "\000\034\004\uffb0\005\uffb0\006\uffb0\010\uffb0\022\uffb0\023" +
    "\uffb0\037\uffb0\040\uffb0\045\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\001\002\000\040\004\121\007\160\015\114\016" +
    "\150\021\140\036\154\041\124\042\125\043\135\044\131" +
    "\046\142\047\120\050\130\057\127\064\126\001\002\000" +
    "\006\022\235\023\165\001\002\000\030\004\171\005\176" +
    "\006\174\022\uff96\023\uff96\037\177\045\170\060\173\061" +
    "\167\062\172\063\175\001\002\000\040\004\uffb4\005\uffb4" +
    "\006\uffb4\010\uffb4\021\162\022\uffb4\023\uffb4\037\uffb4\040" +
    "\uffb4\045\uffb4\053\161\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\001\002\000\040\004\121\007\160\015\114\016\150\021" +
    "\140\036\154\041\124\042\125\043\135\044\131\046\142" +
    "\047\120\050\130\057\127\064\126\001\002\000\042\004" +
    "\121\007\160\015\114\016\150\021\140\022\uff97\036\154" +
    "\041\124\042\125\043\135\044\131\046\142\047\120\050" +
    "\130\057\127\064\126\001\002\000\004\022\233\001\002" +
    "\000\006\022\uff98\023\165\001\002\000\040\004\121\007" +
    "\160\015\114\016\150\021\140\036\154\041\124\042\125" +
    "\043\135\044\131\046\142\047\120\050\130\057\127\064" +
    "\126\001\002\000\030\004\171\005\176\006\174\022\uff95" +
    "\023\uff95\037\177\045\170\060\173\061\167\062\172\063" +
    "\175\001\002\000\040\004\121\007\160\015\114\016\150" +
    "\021\140\036\154\041\124\042\125\043\135\044\131\046" +
    "\142\047\120\050\130\057\127\064\126\001\002\000\010" +
    "\007\212\051\210\052\211\001\002\000\040\004\121\007" +
    "\160\015\114\016\150\021\140\036\154\041\124\042\125" +
    "\043\135\044\131\046\142\047\120\050\130\057\127\064" +
    "\126\001\002\000\040\004\121\007\160\015\114\016\150" +
    "\021\140\036\154\041\124\042\125\043\135\044\131\046" +
    "\142\047\120\050\130\057\127\064\126\001\002\000\040" +
    "\004\121\007\160\015\114\016\150\021\140\036\154\041" +
    "\124\042\125\043\135\044\131\046\142\047\120\050\130" +
    "\057\127\064\126\001\002\000\040\004\121\007\160\015" +
    "\114\016\150\021\140\036\154\041\124\042\125\043\135" +
    "\044\131\046\142\047\120\050\130\057\127\064\126\001" +
    "\002\000\040\004\121\007\160\015\114\016\150\021\140" +
    "\036\154\041\124\042\125\043\135\044\131\046\142\047" +
    "\120\050\130\057\127\064\126\001\002\000\040\004\121" +
    "\007\160\015\114\016\150\021\140\036\154\041\124\042" +
    "\125\043\135\044\131\046\142\047\120\050\130\057\127" +
    "\064\126\001\002\000\040\004\121\007\160\015\114\016" +
    "\150\021\140\036\154\041\124\042\125\043\135\044\131" +
    "\046\142\047\120\050\130\057\127\064\126\001\002\000" +
    "\026\004\171\005\176\006\174\037\177\040\201\045\170" +
    "\060\173\061\167\062\172\063\175\001\002\000\036\004" +
    "\uff9e\005\uff9e\006\uff9e\010\uff9e\022\uff9e\023\uff9e\037\uff9e" +
    "\040\uff9e\045\uff9e\053\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\001\002\000\032\004\171\006\uffa8\010\uffa8\022\uffa8" +
    "\023\uffa8\037\177\040\uffa8\045\170\060\173\061\167\062" +
    "\172\063\175\001\002\000\034\004\uffaa\005\uffaa\006\uffaa" +
    "\010\uffaa\022\uffaa\023\uffaa\037\177\040\uffaa\045\170\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\001\002\000\034\004\171" +
    "\005\176\006\uffa9\010\uffa9\022\uffa9\023\uffa9\037\177\040" +
    "\uffa9\045\170\060\173\061\167\062\172\063\175\001\002" +
    "\000\034\004\uffad\005\uffad\006\uffad\010\uffad\022\uffad\023" +
    "\uffad\037\177\040\uffad\045\170\060\uffad\061\167\062\172" +
    "\063\175\001\002\000\034\004\uffab\005\uffab\006\uffab\010" +
    "\uffab\022\uffab\023\uffab\037\177\040\uffab\045\170\060\uffab" +
    "\061\uffab\062\uffab\063\uffab\001\002\000\034\004\uffa7\005" +
    "\uffa7\006\uffa7\010\uffa7\022\uffa7\023\uffa7\037\177\040\uffa7" +
    "\045\170\060\uffa7\061\167\062\172\063\175\001\002\000" +
    "\004\021\227\001\002\000\004\021\222\001\002\000\040" +
    "\004\uff9f\005\uff9f\006\uff9f\010\uff9f\021\217\022\uff9f\023" +
    "\uff9f\037\uff9f\040\uff9f\045\uff9f\053\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\001\002\000\004\021\214\001\002\000" +
    "\042\004\121\007\160\015\114\016\150\021\140\022\uff97" +
    "\036\154\041\124\042\125\043\135\044\131\046\142\047" +
    "\120\050\130\057\127\064\126\001\002\000\004\022\216" +
    "\001\002\000\034\004\uff9b\005\uff9b\006\uff9b\010\uff9b\022" +
    "\uff9b\023\uff9b\037\uff9b\040\uff9b\045\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\001\002\000\042\004\121\007\160\015" +
    "\114\016\150\021\140\022\uff97\036\154\041\124\042\125" +
    "\043\135\044\131\046\142\047\120\050\130\057\127\064" +
    "\126\001\002\000\004\022\221\001\002\000\034\004\uff9c" +
    "\005\uff9c\006\uff9c\010\uff9c\022\uff9c\023\uff9c\037\uff9c\040" +
    "\uff9c\045\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\001\002" +
    "\000\040\004\121\007\160\015\114\016\150\021\140\036" +
    "\154\041\124\042\125\043\135\044\131\046\142\047\120" +
    "\050\130\057\127\064\126\001\002\000\026\004\171\005" +
    "\176\006\174\023\224\037\177\045\170\060\173\061\167" +
    "\062\172\063\175\001\002\000\040\004\121\007\160\015" +
    "\114\016\150\021\140\036\154\041\124\042\125\043\135" +
    "\044\131\046\142\047\120\050\130\057\127\064\126\001" +
    "\002\000\026\004\171\005\176\006\174\022\226\037\177" +
    "\045\170\060\173\061\167\062\172\063\175\001\002\000" +
    "\004\021\uff99\001\002\000\040\004\121\007\160\015\114" +
    "\016\150\021\140\036\154\041\124\042\125\043\135\044" +
    "\131\046\142\047\120\050\130\057\127\064\126\001\002" +
    "\000\026\004\171\005\176\006\174\022\231\037\177\045" +
    "\170\060\173\061\167\062\172\063\175\001\002\000\004" +
    "\021\uff9a\001\002\000\034\004\uffac\005\uffac\006\uffac\010" +
    "\uffac\022\uffac\023\uffac\037\177\040\uffac\045\170\060\uffac" +
    "\061\uffac\062\uffac\063\uffac\001\002\000\034\004\uff9d\005" +
    "\uff9d\006\uff9d\010\uff9d\022\uff9d\023\uff9d\037\uff9d\040\uff9d" +
    "\045\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\001\002\000" +
    "\034\004\171\005\176\006\174\010\uffb3\022\uffb3\023\uffb3" +
    "\037\177\040\uffb3\045\170\060\173\061\167\062\172\063" +
    "\175\001\002\000\004\010\236\001\002\000\064\004\uffb8" +
    "\007\uffb8\010\uffb8\015\uffb8\016\uffb8\021\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\054\uffb8\055\uffb8\057\uffb8\064\uffb8\001\002\000\004" +
    "\055\uffbe\001\002\000\064\004\uffb9\007\uffb9\010\uffb9\015" +
    "\uffb9\016\uffb9\021\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\054\uffb9\055\uffb9" +
    "\057\uffb9\064\uffb9\001\002\000\040\004\121\007\160\015" +
    "\114\016\150\021\140\036\154\041\124\042\125\043\135" +
    "\044\131\046\142\047\120\050\130\057\127\064\126\001" +
    "\002\000\034\004\171\005\176\006\174\010\uffb5\022\uffb5" +
    "\023\uffb5\037\177\040\uffb5\045\170\060\173\061\167\062" +
    "\172\063\175\001\002\000\064\004\uffcf\007\uffcf\010\uffcf" +
    "\015\uffcf\016\uffcf\021\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\054\uffcf\055" +
    "\uffcf\057\uffcf\064\uffcf\001\002\000\026\004\171\005\176" +
    "\006\174\022\245\037\177\045\170\060\173\061\167\062" +
    "\172\063\175\001\002\000\034\004\uffae\005\uffae\006\uffae" +
    "\010\uffae\022\uffae\023\uffae\037\uffae\040\uffae\045\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\001\002\000\004\022\247" +
    "\001\002\000\034\004\uffa2\005\uffa2\006\uffa2\010\uffa2\022" +
    "\uffa2\023\uffa2\037\uffa2\040\uffa2\045\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\001\002\000\064\004\uffcc\007\uffcc\010" +
    "\uffcc\015\uffcc\016\uffcc\021\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\054\uffcc" +
    "\055\uffcc\057\uffcc\064\uffcc\001\002\000\004\021\252\001" +
    "\002\000\040\004\121\007\160\015\114\016\150\021\140" +
    "\036\154\041\124\042\125\043\135\044\131\046\142\047" +
    "\120\050\130\057\127\064\126\001\002\000\026\004\171" +
    "\005\176\006\174\022\254\037\177\045\170\060\173\061" +
    "\167\062\172\063\175\001\002\000\060\004\121\007\160" +
    "\010\137\015\114\016\150\021\140\027\uffcd\031\uffc9\032" +
    "\uffcb\033\123\034\146\035\151\036\154\041\124\042\125" +
    "\043\135\044\131\046\142\047\120\050\130\054\111\057" +
    "\127\064\126\001\002\000\064\004\uffc2\007\uffc2\010\uffc2" +
    "\015\uffc2\016\uffc2\021\uffc2\027\uffc2\030\256\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\054\uffc2\055" +
    "\uffc2\057\uffc2\064\uffc2\001\002\000\060\004\121\007\160" +
    "\010\137\015\114\016\150\021\140\027\uffcd\031\uffc9\032" +
    "\uffcb\033\123\034\146\035\151\036\154\041\124\042\125" +
    "\043\135\044\131\046\142\047\120\050\130\054\111\057" +
    "\127\064\126\001\002\000\064\004\uffc1\007\uffc1\010\uffc1" +
    "\015\uffc1\016\uffc1\021\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\054\uffc1\055" +
    "\uffc1\057\uffc1\064\uffc1\001\002\000\004\021\262\001\002" +
    "\000\064\004\uffca\007\uffca\010\uffca\015\uffca\016\uffca\021" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\041\uffca\042\uffca\043\uffca\044\uffca\046" +
    "\uffca\047\uffca\050\uffca\054\uffca\055\uffca\057\uffca\064\uffca" +
    "\001\002\000\040\004\121\007\160\015\114\016\150\021" +
    "\140\036\154\041\124\042\125\043\135\044\131\046\142" +
    "\047\120\050\130\057\127\064\126\001\002\000\026\004" +
    "\171\005\176\006\174\022\264\037\177\045\170\060\173" +
    "\061\167\062\172\063\175\001\002\000\060\004\121\007" +
    "\160\010\137\015\114\016\150\021\140\027\uffcd\031\uffc9" +
    "\032\uffcb\033\123\034\146\035\151\036\154\041\124\042" +
    "\125\043\135\044\131\046\142\047\120\050\130\054\111" +
    "\057\127\064\126\001\002\000\064\004\uffbc\007\uffbc\010" +
    "\uffbc\015\uffbc\016\uffbc\021\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\054\uffbc" +
    "\055\uffbc\057\uffbc\064\uffbc\001\002\000\004\021\270\001" +
    "\002\000\064\004\uffc8\007\uffc8\010\uffc8\015\uffc8\016\uffc8" +
    "\021\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\054\uffc8\055\uffc8\057\uffc8\064" +
    "\uffc8\001\002\000\042\004\121\007\160\010\uffb6\015\114" +
    "\016\150\021\140\036\154\041\124\042\125\043\135\044" +
    "\131\046\142\047\120\050\130\057\127\064\126\001\002" +
    "\000\030\004\171\005\176\006\174\010\uffb7\022\uffb7\037" +
    "\177\045\170\060\173\061\167\062\172\063\175\001\002" +
    "\000\004\010\273\001\002\000\040\004\121\007\160\015" +
    "\114\016\150\021\140\036\154\041\124\042\125\043\135" +
    "\044\131\046\142\047\120\050\130\057\127\064\126\001" +
    "\002\000\026\004\171\005\176\006\174\010\275\037\177" +
    "\045\170\060\173\061\167\062\172\063\175\001\002\000" +
    "\042\004\121\007\160\015\114\016\150\021\140\022\uffb6" +
    "\036\154\041\124\042\125\043\135\044\131\046\142\047" +
    "\120\050\130\057\127\064\126\001\002\000\004\022\277" +
    "\001\002\000\060\004\121\007\160\010\137\015\114\016" +
    "\150\021\140\027\uffcd\031\uffc9\032\uffcb\033\123\034\146" +
    "\035\151\036\154\041\124\042\125\043\135\044\131\046" +
    "\142\047\120\050\130\054\111\057\127\064\126\001\002" +
    "\000\064\004\uffbb\007\uffbb\010\uffbb\015\uffbb\016\uffbb\021" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\054\uffbb\055\uffbb\057\uffbb\064\uffbb" +
    "\001\002\000\004\022\302\001\002\000\034\004\uffa1\005" +
    "\uffa1\006\uffa1\010\uffa1\022\uffa1\023\uffa1\037\uffa1\040\uffa1" +
    "\045\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\001\002\000" +
    "\040\004\121\007\160\015\114\016\150\021\140\036\154" +
    "\041\124\042\125\043\135\044\131\046\142\047\120\050" +
    "\130\057\127\064\126\001\002\000\026\004\171\005\176" +
    "\006\174\023\305\037\177\045\170\060\173\061\167\062" +
    "\172\063\175\001\002\000\014\007\013\011\017\012\015" +
    "\013\016\014\012\001\002\000\006\017\052\022\307\001" +
    "\002\000\034\004\uffa3\005\uffa3\006\uffa3\010\uffa3\022\uffa3" +
    "\023\uffa3\037\uffa3\040\uffa3\045\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\001\002\000\004\007\311\001\002\000\004" +
    "\022\312\001\002\000\034\004\uffa4\005\uffa4\006\uffa4\010" +
    "\uffa4\022\uffa4\023\uffa4\037\uffa4\040\uffa4\045\uffa4\060\uffa4" +
    "\061\uffa4\062\uffa4\063\uffa4\001\002\000\040\004\121\007" +
    "\160\015\114\016\150\021\140\036\154\041\124\042\125" +
    "\043\135\044\131\046\142\047\120\050\130\057\127\064" +
    "\126\001\002\000\026\004\171\005\176\006\174\022\315" +
    "\037\177\045\170\060\173\061\167\062\172\063\175\001" +
    "\002\000\034\004\uffa0\005\uffa0\006\uffa0\010\uffa0\022\uffa0" +
    "\023\uffa0\037\uffa0\040\uffa0\045\uffa0\060\uffa0\061\uffa0\062" +
    "\uffa0\063\uffa0\001\002\000\034\004\uffa5\005\uffa5\006\uffa5" +
    "\010\uffa5\022\uffa5\023\uffa5\037\177\040\uffa5\045\170\060" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002\000\004\010\320" +
    "\001\002\000\064\004\uffba\007\uffba\010\uffba\015\uffba\016" +
    "\uffba\021\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\046\uffba\047\uffba\050\uffba\054\uffba\055\uffba\057\uffba" +
    "\064\uffba\001\002\000\034\004\uffa6\005\uffa6\006\uffa6\010" +
    "\uffa6\022\uffa6\023\uffa6\037\177\040\uffa6\045\170\060\uffa6" +
    "\061\167\062\172\063\175\001\002\000\106\002\uffc3\003" +
    "\uffc3\004\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\024\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\054\uffc3\055\uffc3\057\uffc3\064\uffc3" +
    "\001\002\000\026\002\ufffb\003\ufffb\007\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\020\ufffb\024\ufffb\026\ufffb\001\002" +
    "\000\026\002\ufffa\003\ufffa\007\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\020\ufffa\024\ufffa\026\ufffa\001\002\000\004" +
    "\002\001\001\002\000\104\002\ufff7\003\ufff7\004\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\024\ufff7\026\ufff7\027\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\046\ufff7\047\ufff7\050\ufff7\054" +
    "\ufff7\055\ufff7\057\ufff7\064\ufff7\001\002\000\026\002\000" +
    "\003\020\007\013\011\017\012\015\013\016\014\012\020" +
    "\021\024\022\026\024\001\002\000\026\002\ufff8\003\ufff8" +
    "\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\020\ufff8\024" +
    "\ufff8\026\ufff8\001\002\000\006\010\ufff6\021\uffef\001\002" +
    "\000\004\021\333\001\002\000\016\007\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\022\uffee\001\002\000\016\007\013" +
    "\011\017\012\015\013\016\014\012\022\uffe8\001\002\000" +
    "\004\022\336\001\002\000\004\054\111\001\002\000\030" +
    "\002\uffed\003\uffed\007\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\020\uffed\024\uffed\026\uffed\055\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\022\003\010\004\005\005\004\006\022\007" +
    "\013\011\006\012\007\013\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\025\001\001\000\002\001\001\000\004" +
    "\056\027\001\001\000\004\041\030\001\001\000\010\013" +
    "\031\021\034\057\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\043\012\041\013\040" +
    "\014\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\045\013\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\043\012\041\013\040\014\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\060\001\001\000\004\017\062\001\001\000\002\001" +
    "\001\000\004\020\064\001\001\000\004\043\076\001\001" +
    "\000\002\001\001\000\004\053\066\001\001\000\004\031" +
    "\067\001\001\000\016\005\071\006\073\012\007\013\003" +
    "\016\072\054\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\103\001\001" +
    "\000\002\001\001\000\004\051\105\001\001\000\012\002" +
    "\043\012\041\013\040\014\106\001\001\000\002\001\001" +
    "\000\004\015\111\001\001\000\004\032\112\001\001\000" +
    "\002\001\001\000\042\005\144\012\007\013\040\015\140" +
    "\022\146\026\152\027\114\030\121\033\115\034\143\035" +
    "\116\036\151\045\142\060\133\061\132\062\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\143\035\116" +
    "\036\151\045\320\001\001\000\002\001\001\000\014\034" +
    "\143\035\116\036\151\042\316\045\270\001\001\000\012" +
    "\034\143\035\116\036\151\045\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\266\001\001\000\004\024" +
    "\260\001\001\000\004\023\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\034\143\035" +
    "\116\036\151\045\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\015\140\022\146\026\152" +
    "\027\114\030\121\033\236\034\143\035\116\036\151\045" +
    "\142\060\133\061\132\062\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\034\143\035\116\036\151\044\155" +
    "\045\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\143\035\116\036\151\045\233" +
    "\001\001\000\016\034\143\035\116\036\151\037\162\044" +
    "\163\045\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\143\035\116\036\151\045\165\001\001\000" +
    "\002\001\001\000\012\034\143\035\116\036\151\045\231" +
    "\001\001\000\004\040\212\001\001\000\012\034\143\035" +
    "\116\036\151\045\206\001\001\000\012\034\143\035\116" +
    "\036\151\045\205\001\001\000\012\034\143\035\116\036" +
    "\151\045\204\001\001\000\012\034\143\035\116\036\151" +
    "\045\203\001\001\000\012\034\143\035\116\036\151\045" +
    "\202\001\001\000\012\034\143\035\116\036\151\045\201" +
    "\001\001\000\012\034\143\035\116\036\151\045\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\034" +
    "\143\035\116\036\151\037\214\044\163\045\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\034\143\035" +
    "\116\036\151\037\217\044\163\045\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\034\143\035\116\036" +
    "\151\045\222\001\001\000\002\001\001\000\012\034\143" +
    "\035\116\036\151\045\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\143\035\116\036\151\045\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\143\035\116\036\151\045\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\143\035\116\036\151\045" +
    "\252\001\001\000\002\001\001\000\032\015\140\022\254" +
    "\026\152\027\114\030\121\034\143\035\116\036\151\045" +
    "\142\060\133\061\132\062\131\001\001\000\002\001\001" +
    "\000\032\015\140\022\256\026\152\027\114\030\121\034" +
    "\143\035\116\036\151\045\142\060\133\061\132\062\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\143\035\116\036\151\045\262\001\001" +
    "\000\002\001\001\000\032\015\140\022\264\026\152\027" +
    "\114\030\121\034\143\035\116\036\151\045\142\060\133" +
    "\061\132\062\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\143\035\116\036\151" +
    "\042\271\045\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\143\035\116\036\151\045\273\001\001" +
    "\000\002\001\001\000\014\034\143\035\116\036\151\042" +
    "\275\045\270\001\001\000\002\001\001\000\032\015\140" +
    "\022\277\026\152\027\114\030\121\034\143\035\116\036" +
    "\151\045\142\060\133\061\132\062\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\143\035\116\036\151\045\303\001\001\000\002\001\001" +
    "\000\004\013\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\143\035\116\036\151\045\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\327\005\004\006\022\007" +
    "\013\011\006\012\007\013\003\001\001\000\002\001\001" +
    "\000\004\046\331\001\001\000\002\001\001\000\004\047" +
    "\333\001\001\000\012\002\043\012\041\013\040\014\334" +
    "\001\001\000\002\001\001\000\004\015\336\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<TError> TablaES = new LinkedList<TError>();
    public ManejadorScopes ms = new ManejadorScopes();

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 
    ManejadorScopes ms = new ManejadorScopes();

    public boolean isNumber(String s){
        try{
            Double.valueOf(s);
            return true;
        }catch(Exception e){
            return false;
        }
    }
    
    public boolean isInteger(String s){
        if(isNumber(s) && !s.contains(".")){
            return true;
        }
        return false;
    }

    
    public boolean isBoolean(String s){
        return (s.equals("true") || s.equals("false"));
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= t_null 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= strConst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= bolCnst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= dblConst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Constant ::= intCnst 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExprList ::= ExprList comma Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExprList ::= Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Actuals ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Actuals ::= ExprList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LibCall ::= setByte prnthss_A Expr comma Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LibCall ::= getByte prnthss_A Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LibCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Call ::= Expr dot LibCall prnthss_A Actuals prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Call ::= Expr dot ident prnthss_A Actuals prnthss_C 
            {
              String RESULT =null;
		
                // Código para llamada a función
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Call ::= ident prnthss_A Actuals prnthss_C 
            {
              String RESULT =null;
		
                // Código para llamada a función
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LValue ::= Expr brackets_A Expr brackets_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LValue ::= Expr dot ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LValue",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= malloc prnthss_A Expr prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= ReadLine prnthss_A prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= readInteger prnthss_A prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= t_newArr prnthss_A Expr comma Type prnthss_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= t_new prnthss_A ident prnthss_C 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= neg Expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(e==null){
                    System.out.println("La variable " + e + " nunca fue asignada.");
                } else{
                    System.out.println("Operación de negación !("+e+") = "+ !(Boolean.valueOf(e)));
                    RESULT = String.valueOf(!(Boolean.valueOf(e)));
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= minus Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr minus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                 if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if (e2 == null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }else if(ms.GetSimbolo(e1).DataType.equals("string") || ms.GetSimbolo(e1).DataType.equals("bool") || ms.GetSimbolo(e2).DataType.equals("string") || ms.GetSimbolo(e2).DataType.equals("bool") ){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                else{
                    RESULT = String.valueOf(Double.valueOf(e1) - Double.valueOf(e2));
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr cmpop Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if(e2==null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }
                else if(c.equals("==")){
                    RESULT = String.valueOf(e1.equals(e2));
                } else if(c.equals("<")){
                    RESULT = String.valueOf(Double.valueOf(e1) < Double.valueOf(e2));
                } else if(c.equals(">")){
                    RESULT = String.valueOf(Double.valueOf(e1) > Double.valueOf(e2));
                 }else if(c.equals("<=")){
                    RESULT = String.valueOf(Double.valueOf(e1) <= Double.valueOf(e2));
                } else if(c.equals("!=")){
                    RESULT = String.valueOf(!e1.equals(e2));
                } else if (c.equals(">=")){
                    RESULT = String.valueOf(Double.valueOf(e1) >= Double.valueOf(e2));
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr logop Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr mod Expr 
            {
                String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if (e2 == null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }else if(ms.GetSimbolo(e1).DataType.equals("string") || ms.GetSimbolo(e1).DataType.equals("bool") || ms.GetSimbolo(e2).DataType.equals("string") || ms.GetSimbolo(e2).DataType.equals("bool") ){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                else{
                    RESULT = String.valueOf(Double.valueOf(e1) % Double.valueOf(e2));
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr divide Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if (e2 == null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }else if(ms.GetSimbolo(e1).DataType.equals("string") || ms.GetSimbolo(e1).DataType.equals("bool") || ms.GetSimbolo(e2).DataType.equals("string") || ms.GetSimbolo(e2).DataType.equals("bool") ){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                else{
                    RESULT = String.valueOf(Double.valueOf(e1) / Double.valueOf(e2));
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr times Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if (e2 == null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }else if(ms.GetSimbolo(e1).DataType.equals("string") || ms.GetSimbolo(e1).DataType.equals("bool") || ms.GetSimbolo(e2).DataType.equals("string") || ms.GetSimbolo(e2).DataType.equals("bool") ){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                else{
                    RESULT = String.valueOf(Double.valueOf(e1) * Double.valueOf(e2));
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr plus Expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if (e2 == null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }else if(ms.GetSimbolo(e1).DataType.equals("string") || ms.GetSimbolo(e1).DataType.equals("bool") || ms.GetSimbolo(e2).DataType.equals("string") || ms.GetSimbolo(e2).DataType.equals("bool") ){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                else{
                    RESULT = String.valueOf(Double.valueOf(e1) + Double.valueOf(e2));
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= prnthss_A Expr prnthss_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT  = e;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Call 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= t_this 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= LValue 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Constant 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= ident equals Expr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(ms.GetSimbolo(i)==null){
                    System.out.println("El símbolo " + i + " no se encuentra en el ámbito actual.");
                }else if(e==null){
                    System.out.println("No se puede asignar el valor de null a la variable.");
                }else{
                    if((ms.GetSimbolo(i).DataType.compareTo("int") == 0 && !isInteger(e)) 
                            || (ms.GetSimbolo(i).DataType.compareTo("double") == 0 && !isNumber(e))
                            || (ms.GetSimbolo(i).DataType.compareTo("bool") == 0 && !isBoolean(e))){
                        System.out.println("El dato a asignar no es del mismo tipo que la variable");
                    } else{
                        System.out.println("Se asignó a " + i + " el valor de " + e);
                        ms.GetSimbolo(i).Value = e;
                    }
                    
                    
                }
            
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ident 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if(ms.GetSimbolo(i) != null){ // Existe
                    System.out.println("Se obtuvo correctamente el símbolo " + i);
                    RESULT = ms.GetSimbolo(i).Value;
                }else {
                    System.out.println("No existe el símbolo " + i + " en el ámbito actual. ");
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= LValue equals Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExprOptional ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExprOptional ::= Expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprOptional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PrintStmt ::= print prnthss_A ExprList prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BreakStmt ::= t_break pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ReturnStmt ::= t_return ExprOptional pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForStmt ::= t_for prnthss_A ExprOptional pyc Expr pyc ExprOptional prnthss_C Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WhileStmt ::= t_while prnthss_A Expr prnthss_C Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StmtStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StmtStar ::= Stmt StmtStar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtStar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VariableDeclStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VariableDeclStar ::= VariableDeclStar VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclStar",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt t_else Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfStmt ::= t_if prnthss_A Expr prnthss_C Stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StmtBlock ::= curly_A VariableDeclStar StmtStar curly_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= StmtBlock 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= PrintStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= ReturnStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= BreakStmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= NT$12 ForStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ms.FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$12 ::= 
            {
              String RESULT =null;
 ms.NuevoScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= NT$11 WhileStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ms.FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$11 ::= 
            {
              String RESULT =null;
 ms.NuevoScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= NT$10 IfStmt 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ms.FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$10 ::= 
            {
              String RESULT =null;
 ms.NuevoScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stmt ::= Expr pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Prototype ::= t_void ident prnthss_A Formals prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Prototype ::= Type ident prnthss_A Formals prnthss_C pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prototype",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PrototypeStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PrototypeStar ::= PrototypeStar Prototype 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrototypeStar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InterfaceDecl ::= t_interface ident NT$7 curly_A NT$8 PrototypeStar NT$9 curly_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 ms.FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 ms.NuevoScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$7 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ms.AgregarSimbolo(i, new oSymbol(i, t, "Interface", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Field ::= FunctionDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Field ::= VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Field",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IdentList ::= IdentList comma ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IdentList ::= ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ImplementsIdentPlusCommaOptional ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ImplementsIdentPlusCommaOptional ::= t_implements IdentList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImplementsIdentPlusCommaOptional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExtendsIdentOptional ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExtendsIdentOptional ::= extend ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExtendsIdentOptional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldStar ::= FieldStar Field 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldStar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl ::= clase ident NT$4 ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_A NT$5 FieldStar NT$6 curly_C 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
 ms.FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 ms.NuevoScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ms.AgregarSimbolo(i, new oSymbol(i, t, "Class", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VariableList ::= VariableList comma Variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VariableList ::= Variable 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Formals ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= VariableList 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionDecl ::= t_void ident NT$2 prnthss_A NT$3 Formals prnthss_C StmtBlock 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 ms.FinalizaScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 ms.NuevoScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ms.AgregarSimbolo(i, new oSymbol(i, t, "Function", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= Type ident NT$0 prnthss_A NT$1 Formals prnthss_C StmtBlock 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 ms.FinalizaScope();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 ms.NuevoScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 ms.AgregarSimbolo(i, new oSymbol(i, t, "Function", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type brackets 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= ident 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= t_string 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= t_bool 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= t_double 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= t_int 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type ident 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ms.AgregarSimbolo(i, new oSymbol(i, t, "Variable", null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclStar ::= DeclStar Decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclStar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclStar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error curly_C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= error pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= InterfaceDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ClassDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= FunctionDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decl ::= VariableDecl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl DeclStar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

