// CUP spect_ification t_for a simple expression evaluator (no actions)
package php.scanner;


import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
// Opciones y Declaraciones



// Parser Code
parser code {:
    public LinkedList<TError> TablaES = new LinkedList<TError>();

    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        try {
          Interfaz.getInterfaz().AddTextToJTextArea("Error Sintáctico. Lexema: "+lexema+"\tFila: " + (fila+1) + "\tColumna: "+ (columna+1)+"\n");
        } catch (BadLocationException ex) {
            System.out.println("Error escribiendo");
            Logger.getLogger(parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

:}  

action code {: 
   
    boolean WritingParameters = false;
    boolean ReadingParameters = false;
    int CurrentParameter = 0;
    String CurrentFile = "";
    oSymbol CurrentFunction;
    public void MostrarFilaColumnaError(int Fila, int Columna, String error) throws BadLocationException{
      String newMssg = (Directory.GetCurrentFile() + " - Fila: " + Fila + " - Columna: " + Columna +" - " + error);
      Interfaz.getInterfaz().AddTextToJTextArea(newMssg + "\n");
    }


    public boolean isNumber(String s){
        try{
            Double.valueOf(s);
            return true;
        }catch(Exception e){
            return false;
        }
    }
    
    public boolean isInteger(String s){
        if(isNumber(s) && !s.contains(".")){
            return true;
        }
        return false;
    }

    
    public boolean isBoolean(String s){
        return (s.equals("true") || s.equals("false"));
    }
:}



terminal  String  minus, cmpop, logop,ident,pyc,t_int,t_double,t_bool, t_string, bolCnst,strConst,brackets,t_void,prnthss_A,prnthss_C,comma,clase,t_implements,t_interface,
                  t_if, t_else,t_for,t_while,t_return,t_break,print,t_this,brackets_A,brackets_C,neg,malloc,readInteger,
                  ReadLine,dot,dblConst,t_null,t_newArr,getByte,setByte, equals, curly_A, curly_C, extend, t_new, plus, times, divide, mod, constante, include, library;
terminal String intCnst;


/* No terminales usados en la seccion gramatical. */
non terminal String     VariableList, Program, Decl, VariableDecl,FunctionDecl,ClassDecl, DeclStar, InterfaceDecl,Variable,Type,Formals,StmtBlock,Field,
                        ExtendsIdentOptional,ImplementsIdentPlusCommaOptional,Prototype,Stmt,IfStmt,WhileStmt,ForStmt,BreakStmt,ReturnStmt,PrintStmt,FieldStar,
                        VariableDeclStar,StmtStar,LValue,Constant,Call,Actuals,LibCall,
                         PrototypeStar, ExprOptional,  IdentList, ExprList, ConstDecl, IncludeStar, Include;
non terminal String Expr;


precedence left equals;
precedence left logop;
precedence nonassoc cmpop;
precedence left plus, minus;
precedence left times, divide, mod;
precedence nonassoc neg;
precedence nonassoc brackets_A, dot;
precedence nonassoc t_else;

start with Program;



//GRAMATICA   
    Program ::= IncludeStar Decl DeclStar {: :}
    ;
    
    IncludeStar ::= Include IncludeStar|
    ;

    Include ::= include library: l {: 
        if(Directory.getInstancia().AddFile(l.split(">")[0].split("<")[1])){
            System.out.println("/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/");
            System.out.println("\t\t\t\t\t\t\t\t\tInicia Comprobación Semántica de " + l);
            CurrentFile = l;
            Directory.getInstancia().CheckSemantics(l.split(">")[0].split("<")[1]);
            System.out.println("\t\t\t\t\t\t\t\t\tFinaliza Comprobación Semántica de " + l);
            System.out.println("/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/");
        };
    :};

    Decl ::= VariableDecl|
             FunctionDecl|
             ClassDecl|
             InterfaceDecl|
             ConstDecl|
             error pyc|
             error curly_C
    ;
    DeclStar ::= |DeclStar Decl ;
    
    VariableDecl ::= Variable pyc
    ;
    ConstDecl ::= constante Variable pyc
    ;
    Variable ::= Type:t ident:i {: 
        String data = null;
        if(t.equals("int")||t.equals("double")){
            data = "0";
        }
        oSymbol currentSymbol = new oSymbol(i, t, "Variable", data);
        ManejadorScopes.getInstancia().AgregarSimbolo(i, currentSymbol);  
        if(WritingParameters){
            ManejadorScopes.getInstancia().GetSimbolo(CurrentFunction.ID).AddParameters(currentSymbol);
        }
    :}
    ;
    Type ::= t_int:t {: RESULT = t; :}|
             t_double:t {: RESULT = t; :}|
             t_bool:t {: RESULT = t; :}|
             t_string:t {: RESULT = t; :}|
             ident:t {: RESULT = t; :}|
             Type brackets
    ;
    FunctionDecl ::= Type:t ident:i {:
                    String data = null;
                    if(t.equals("int")||t.equals("double")){
                        data = "0";
                    }
                     ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Function", data)); 
                     String CurrentIdFunction = i;  
                    CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                    if(t.equals("int")){
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "0";
                        RESULT="0";
                    }else if(t.equals("double")){
                        RESULT="0";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "0";
                    }else if(t.equals("bool")){
                        RESULT="true";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "false";
                    }else if(t.equals("string")){
                        RESULT = "\"\"";
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = "\"\"";
                    }    
                     
                     :}	prnthss_A {:
                      ManejadorScopes.getInstancia().NuevoScope(i); WritingParameters = true;
                     :} Formals prnthss_C {:
                      WritingParameters = false; 
                      :} StmtBlock {: 
                      ManejadorScopes.getInstancia().FinalizaScope();
                      :}
                    |
                    t_void:t ident:i {: 
                    ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Function", null)); 
                     String CurrentIdFunction = i; 
                    CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                    :}  prnthss_A {:
                     ManejadorScopes.getInstancia().NuevoScope(i); WritingParameters = true; 
                     :} Formals prnthss_C {: 
                     WritingParameters = false;
                     :} StmtBlock {:
                     ManejadorScopes.getInstancia().FinalizaScope();
                     System.out.println("Finaliza void");
                     :}
    ;
    Formals ::= VariableList|;

    VariableList    ::= Variable|
                        VariableList comma Variable
    ;
    

    ClassDecl ::= clase:t ident:i {: ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Class", null)); :} ExtendsIdentOptional ImplementsIdentPlusCommaOptional curly_A {: ManejadorScopes.getInstancia().NuevoScope(i); :} FieldStar curly_C	 {: 
    System.out.println("Finaliza Clase");
    ManejadorScopes.getInstancia().FinalizaScope(); 
    :}
    ;
    FieldStar ::= FieldStar Field |
    ;
    ExtendsIdentOptional ::= extend ident |
    ;
    ImplementsIdentPlusCommaOptional ::= t_implements IdentList |
    ;

    IdentList   ::= ident|
                    IdentList comma ident;


    Field::= VariableDecl|
             FunctionDecl|
             ConstDecl
    ;
    InterfaceDecl ::= t_interface:t ident:i {: ManejadorScopes.getInstancia().AgregarSimbolo(i, new oSymbol(i, t, "Interface", null)); :} curly_A {: ManejadorScopes.getInstancia().NuevoScope(i); :}PrototypeStar {: ManejadorScopes.getInstancia().FinalizaScope(); :} curly_C
    ;
    PrototypeStar ::= PrototypeStar Prototype |;
    Prototype ::= Type ident prnthss_A Formals prnthss_C pyc|
                  t_void ident prnthss_A Formals prnthss_C pyc
    ;
    Stmt ::= Expr pyc|
                pyc|
                    {: ManejadorScopes.getInstancia().NuevoScope("if"); :}IfStmt {: ManejadorScopes.getInstancia().FinalizaScope(); :}|
                    {: ManejadorScopes.getInstancia().NuevoScope("while"); :} WhileStmt {: ManejadorScopes.getInstancia().FinalizaScope(); :}|
                    {: ManejadorScopes.getInstancia().NuevoScope("for"); :} ForStmt {: ManejadorScopes.getInstancia().FinalizaScope(); :}|
                    BreakStmt|
                    ReturnStmt|
                    PrintStmt|
                    StmtBlock
    ;
    StmtBlock ::= curly_A VariableDeclStar StmtStar curly_C
    ;
    IfStmt ::=  t_if  prnthss_A Expr prnthss_C Stmt |t_if prnthss_A Expr prnthss_C  Stmt t_else Stmt
    ;

    
    VariableDeclStar ::=VariableDeclStar  VariableDecl | VariableDeclStar ConstDecl |
    ;
    StmtStar ::=  Stmt StmtStar| 
    ;
    WhileStmt ::= t_while prnthss_A Expr prnthss_C Stmt										
    ;
    ForStmt ::= t_for prnthss_A ExprOptional pyc Expr pyc ExprOptional prnthss_C Stmt
    ;
    ReturnStmt ::= t_return ExprOptional: e {:
        if(CurrentFunction.DataType.equals("double") && (e==null || !isNumber(e))){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        } else if(CurrentFunction.DataType.equals("int") && (e==null || !isInteger(e))){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        } else if(CurrentFunction.DatatType.equals("string") && (e==null)){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función");
        } else if(CurrentFunction.DataType.equals("bool") && !isBoolean(e)){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función");
        } else if(CurrentFunction.DataType.equals("void") && e!=null){
            System.out.println("El valor de retorno debe ser del mismo tipo de dato que la función.");
        }
    :} pyc
    ;
    BreakStmt ::= t_break pyc
    ;
    PrintStmt ::= print prnthss_A ExprList prnthss_C pyc
    ;
    
    
    ExprOptional    ::= Expr:e {: RESULT =  e; :}| {: RESULT = null; :} ;

    Expr ::= LValue equals Expr|
             ident: i {: 
                if(ManejadorScopes.getInstancia().GetSimbolo(i) != null){ // Existe
                    System.out.println("Se obtuvo correctamente el símbolo " + i);
                    RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value;
                }else {
                    MostrarFilaColumnaError(iright, ileft, "No existe el símbolo " + i + " en el ámbito actual. ");
                    System.out.println("No existe el símbolo " + i + " en el ámbito actual. ");
                }
             :}|
             ident:i equals Expr: e {: 
                if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
                    MostrarFilaColumnaError(iright, ileft, "No existe el símbolo " + i + " en el ámbito actual. ");
                    System.out.println("El símbolo " + i + " no se encuentra en el ámbito actual.");
                }else if(e==null){
                    MostrarFilaColumnaError(iright, ileft, "No se puede asignar el valor de null a la variable.");
                    System.out.println("No se puede asignar el valor de null a la variable.");
                }else{
                    if((ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("int") == 0 && !isNumber(e)) 
                            || (ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("double") == 0 && !isNumber(e))
                            || (ManejadorScopes.getInstancia().GetSimbolo(i).DataType.compareTo("bool") == 0 && !isBoolean(e))){
                        MostrarFilaColumnaError(iright, ileft, "El dato a asignar no es del mismo tipo que la variable");
                        System.out.println("El dato a asignar no es del mismo tipo que la variable");
                    } else{
                        String newData = e;
                        if(ManejadorScopes.getInstancia().GetSimbolo(i).DataType.equals("int")){
                            e = e.split("[.]")[0];
                        }
                        System.out.println("Se asignó a " + i + " el valor de " + e);
                        ManejadorScopes.getInstancia().GetSimbolo(i).Value = e;
                    }                   
                    
                }
            
             :}|
             Constant:c {:RESULT = c;:}|
             LValue|
             t_this|
             Call:c {: RESULT = c;:}|
             prnthss_A Expr: e prnthss_C {:
                RESULT  = e;
             :}|
             Expr: e1 plus Expr: e2 {:
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) + Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
                
            :}|
            Expr: e1 times Expr: e2 {:
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) * Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            :}|
            Expr: e1 divide Expr: e2 {:
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) / Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            :}|

            Expr: e1 mod Expr: e2 {:
               try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) % Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
            :}|

            Expr logop Expr|
            Expr: e1 cmpop:c Expr: e2{: 
                if(e1 == null){
                    System.out.println("La variable " + e1 + " nunca fue asignada.");
                }else if(e2==null){
                    System.out.println("La variable " + e2 + " nunca fue asignada.");
                }
                else if(c.equals("==")){
                    RESULT = String.valueOf(e1.equals(e2));
                } else if(c.equals("<")){
                    RESULT = String.valueOf(Double.valueOf(e1) < Double.valueOf(e2));
                } else if(c.equals(">")){
                    RESULT = String.valueOf(Double.valueOf(e1) > Double.valueOf(e2));
                 }else if(c.equals("<=")){
                    RESULT = String.valueOf(Double.valueOf(e1) <= Double.valueOf(e2));
                } else if(c.equals("!=")){
                    RESULT = String.valueOf(!e1.equals(e2));
                } else if (c.equals(">=")){
                    RESULT = String.valueOf(Double.valueOf(e1) >= Double.valueOf(e2));
                }
             :}|
             Expr: e1 minus Expr: e2 {: 
                try{
                    if(e1 == null){
                        System.out.println("La variable " + e1 + " nunca fue asignada.");
                    }else if (e2 == null){
                        System.out.println("La variable " + e2 + " nunca fue asignada.");
                    }
                    else{
                        RESULT = String.valueOf(Double.valueOf(e1) - Double.valueOf(e2));
                    }
                }catch(Exception e){
                    System.out.println("Esta operación no está deinida para este tipo de dato.");
                }
             :}|
             minus Expr {:

             :}|
             neg Expr:e {: 
                if(e==null){
                    System.out.println("La variable " + e + " nunca fue asignada.");
                } else{
                    System.out.println("Operación de negación !("+e+") = "+ !(Boolean.valueOf(e)));
                    RESULT = String.valueOf(!(Boolean.valueOf(e)));
                }
             :}|
             t_new prnthss_A ident:i prnthss_C {: 
                
            :}|
             t_newArr prnthss_A Expr comma Type prnthss_C|
             readInteger prnthss_A prnthss_C|
             ReadLine prnthss_A prnthss_C|
             malloc prnthss_A Expr prnthss_C 
    ;
    LValue ::= Expr dot ident|
               Expr brackets_A Expr brackets_C
    ;
    Call ::= ident:i prnthss_A {:
            CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
            if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
                System.out.println("No se encuentra el símbolo en el ámbito actual"); 
            }else{
                RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value; 
                CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i);
                WritingParameters = true; 
                CurrentParameter = 0;
            }
             RESULT = "null";
             :} 
             
             Actuals {:
                if(ManejadorScopes.getInstancia().GetSimbolo(i)==null) return null;
             :} prnthss_C {: 
              if(ManejadorScopes.getInstancia().GetSimbolo(i)==null){
            }else{
                WritingParameters = false;
            }


             :}
             |
             ident:i1 dot ident:i prnthss_A  {:
             System.out.println("Expr dot ident");
             if(ManejadorScopes.getInstancia().GetSimbolo(i1)==null){
                System.out.println("No se encuentra el símbolo en el ámbito actual");
                return null;                 
             }
             String clasePerteneceA = ManejadorScopes.getInstancia().GetSimbolo(i1).DataType;
             oSymbol functionSymbol = ManejadorScopes.getInstancia().GetFuncion(clasePerteneceA, i);

             RESULT = functionSymbol.Value; 
             CurrentFunction = functionSymbol; 
             WritingParameters = true; 
             CurrentParameter = 0; 
             :} 
             Actuals prnthss_C {: 
             WritingParameters = false; 
             :}
             |
             Expr dot LibCall: i prnthss_A {: RESULT = ManejadorScopes.getInstancia().GetSimbolo(i).Value; CurrentFunction = ManejadorScopes.getInstancia().GetSimbolo(i); WritingParameters = true; CurrentParameter = 0; :}  Actuals prnthss_C  {: WritingParameters = false; :}
                // Código para llamada a función
    ;
    LibCall ::= getByte prnthss_A Expr prnthss_C|
                setByte prnthss_A Expr comma Expr prnthss_C
    ;
    Actuals ::= ExprList|
    ;

    ExprList    ::= Expr:e {:
                        if(CurrentFunction == null){
                            System.out.println("No se encuentra el símbolo en el contexto actual");
                        }else{
                             try{    
                                if((CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("int")  && !isInteger(e))|| 
                                    (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("double") && !isNumber(e))|| 
                                    (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("bool") && !isBoolean(e))){
                                    MostrarFilaColumnaError(eright, eleft, "El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");                          
                                    System.out.println("El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");
                                }
                            } catch (Exception ex){
                                MostrarFilaColumnaError(eright, eleft, "El número de parámetros no coincide con la definición del mismo");                          
                                System.out.println("El número de parámetros no coincide con la definición del mismo");
                            } 
                            CurrentParameter++; 
                            }
                       
                        
                    :} |
                    ExprList comma Expr:e {:
                        if(CurrentFunction == null){

                        }else{
                            try{
                                if((CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("int")  && !isInteger(e))|| 
                                (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("double") && !isNumber(e))|| 
                                (CurrentFunction.Parameters.get(CurrentParameter).DataType.equals("bool") && !isBoolean(e))){
                                    MostrarFilaColumnaError(eright, eleft, "El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");                          
                                    System.out.println("El tipo de dato de los parámetros de la función no coinciden con la definición del mismo. ");
                                }
                                else if(CurrentParameter!=CurrentFunction.Parameters.size()-1 && !(CurrentParameter!=CurrentFunction.Parameters.size()-1)){
                                    MostrarFilaColumnaError(eright, eleft, "Se reciben más de los parámetros necesarios para la función.");                          
                                    System.out.println("Se reciben más de los parámetros necesarios para la función.");
                                }
                            }catch(Exception ex){
                                MostrarFilaColumnaError(eright, eleft, "El número de parámetros no coincide con la definición del mismo");                          
                                System.out.println("El número de parámetros no coincide con la definición del mismo");
                            }
                            CurrentParameter++;  
                        }
                                              

                    :};

    Constant ::= intCnst:i {:RESULT = i;:}|
                 dblConst: i {: RESULT = i; :}|
                 bolCnst: i {: RESULT = i; :}|
                 strConst: i {: RESULT = i; :}|
                 t_null : i {: RESULT = i; :}
    ;
    
